diff -uNr /usr/patch/logstash-5.5.0/Gemfile /usr/elk/logstash-5.5.0/Gemfile
--- /usr/patch/logstash-5.5.0/Gemfile	2020-09-11 11:30:21.308000000 +0800
+++ /usr/elk/logstash-5.5.0/Gemfile	2020-08-31 15:47:25.112000000 +0800
@@ -119,3 +119,6 @@
 gem "logstash-output-webhdfs"
 gem "logstash-filter-dissect"
 gem "logstash-input-dead_letter_queue"
+gem "ruby-protocol-buffers", "1.6.1"
+gem "logstash-codec-hw-telemetry-gpb", :path => "/usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb"
+gem "logstash-input-unix-hw", :path => "/usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw"
diff -uNr /usr/patch/logstash-5.5.0/Gemfile.jruby-1.9.lock /usr/elk/logstash-5.5.0/Gemfile.jruby-1.9.lock
--- /usr/patch/logstash-5.5.0/Gemfile.jruby-1.9.lock	2020-09-11 11:30:21.308000000 +0800
+++ /usr/elk/logstash-5.5.0/Gemfile.jruby-1.9.lock	2020-08-31 15:47:25.112000000 +0800
@@ -30,6 +30,20 @@
     logstash-core-plugin-api (2.1.12-java)
       logstash-core (= 5.5.0)

+PATH
+  remote: local-plugins/logstash-codec-telemetry-gpb
+  specs:
+    logstash-codec-hw-telemetry-gpb (0.9.0)
+      logstash-core (>= 1.4.0)
+      ruby-protocol-buffers (>= 1.6.0, < 2.0.0)
+
+PATH
+  remote: local-plugins/logstash-input-unix-hw
+  specs:
+    logstash-input-unix-hw (3.0.4)
+      logstash-codec-line
+      logstash-core-plugin-api (>= 1.60, <= 2.99)
+
 GEM
   remote: https://rubygems.org/
   specs:
@@ -561,6 +575,7 @@
       ruby-maven-libs (~> 3.3.9)
     ruby-maven-libs (3.3.9)
     ruby-progressbar (1.8.1)
+    ruby-protocol-buffers (1.6.1)
     rubyzip (1.1.7)
     rufus-scheduler (3.0.9)
       tzinfo
@@ -636,6 +651,7 @@
   logstash-codec-es_bulk
   logstash-codec-fluent
   logstash-codec-graphite
+  logstash-codec-hw-telemetry-gpb!
   logstash-codec-json
   logstash-codec-json_lines
   logstash-codec-line
@@ -700,6 +716,7 @@
   logstash-input-twitter
   logstash-input-udp
   logstash-input-unix
+  logstash-input-unix-hw!
   logstash-input-xmpp
   logstash-output-cloudwatch
   logstash-output-csv
@@ -732,6 +749,7 @@
   rest-client (= 1.8.0)
   rspec (~> 3.1.0)
   ruby-progressbar (~> 1.8.1)
+  ruby-protocol-buffers (= 1.6.1)
   rubyzip (~> 1.1.7)
   simplecov
   stud (~> 0.0.22)
diff -uNr /usr/patch/logstash-5.5.0/huawei-test/unix_test.conf /usr/elk/logstash-5.5.0/huawei-test/unix_test.conf
--- /usr/patch/logstash-5.5.0/huawei-test/unix_test.conf	2020-09-11 11:30:21.308000000 +0800
+++ /usr/elk/logstash-5.5.0/huawei-test/unix_test.conf	2020-09-04 17:17:43.868000000 +0800
@@ -0,0 +1,27 @@
+input{
+   unix_hw{
+    codec => telemetry_gpb_hw {
+            protofiles => "/usr/elk/logstash-5.5.0/huawei-test/protos/"
+        }
+    path => "/usr/elk/logstash-5.5.0/huawei-test/UNIX.d"
+   }
+}
+filter {
+ if [sensor_path] == "huawei-devm:devm/ports/port/huawei-pic:optical-module" and [ports.port][0][optical_module][tx_power] and [ports.port][0][optical_module][rx_power] {
+   mutate {
+     add_field  => { "ports.port.optical_module.tx_power_f" => "%{[ports.port][0][optical_module][tx_power]}" }
+     add_field  => { "ports.port.optical_module.rx_power_f" => "%{[ports.port][0][optical_module][rx_power]}" }
+   }
+   mutate {
+     convert => { "ports.port.optical_module.tx_power_f" => "float" }
+     convert => { "ports.port.optical_module.rx_power_f" => "float" }
+   }
+  }
+}
+output{
+   elasticsearch {
+      hosts => "127.0.0.1:9200"
+      index => "logstash-telemetry-%{+YYYY.MM.dd}"
+      document_type => "huawei"
+   }
+}
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/lib/logstash/codecs/telemetry_gpb_hw.rb /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/lib/logstash/codecs/telemetry_gpb_hw.rb
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/lib/logstash/codecs/telemetry_gpb_hw.rb	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/lib/logstash/codecs/telemetry_gpb_hw.rb	2020-08-31 15:47:25.112000000 +0800
@@ -3,83 +3,15 @@
 require "logstash/codecs/base"
 require "logstash/namespace"
 require 'json'
-
-def telemetry_gpb_camelise s
-  s.split('_').collect {|w| w.capitalize}.join
-end
-
-def telemetry_gpb_extract_cisco_extensions_from_proto protofile
-  #
-  # Function takes care of returning the mapping between schema path
-  # and corresponding class or module::class.
-  #
-  # We rely on the properties of the autogenerated .proto file.  We
-  # expect to find at most one pertinent 'package' instruction in the
-  # .proto file, and we expect one piece of metadata which talks about
-  # paths and schema paths.
-  #
-  modulenames = nil
-  classname = nil
-  path = nil
-  theclass = nil
-
-  f = File.open(protofile, "r")
-  f.each do |line|
-
-    #
-    # Extract module - this is important to protect against name space
-    # pollution (e.g. where multiple sysdb bags point at the same bag)
-    #
-    m = line.match('package \s*(?<modulename>[\w\.]+)\s*;')
-    if m and m['modulename']
-      modulenames = m['modulename'].split('.').map do |raw|
-        #
-        # We could camelise, but then RootOper becomes Rootoper which
-        # is not what protouf compiler does.
-        #
-        telemetry_gpb_camelise raw
-        #raw
-      end
-    end
-
-    #
-    # Extract bag name and path from metadata.
-    #
-    m = line.match('.*metadata.*\\\"bag\\\": \\\"(?<bag>[\d\w]*)\\\".*\\\"schema_path\\\": \\\"(?<path>[\d\w\.]*)\\\".*')
-    if m and m['bag'] and m['path']
-      classname = telemetry_gpb_camelise m['bag']
-      path = m['path']
-    end
-
-  end # End of line by line iteration on file.
-
-  f.close
-
-  if path and classname
-    mod = Kernel
-    if modulenames
-      modulenames.each do |modulename|
-        mod = mod.const_get(modulename)
-      end
-    end
-    theclass = mod.const_get(classname)
-  end
-
-  if theclass
-    return [path, [theclass, classname]]
-  end
-
-end
-
+require 'protocol_buffers'
+require 'logger'
+require 'base64'
 #
-# To turn on debugging, modify LS_OPTS in /etc/default/logstash to
-# LS_OPTS="--debug"
-#
-# To view debugs, look at the file pointed at by LS_LOG_FILE
-# which defaults to /var/log/logstash/logstash.log
+# Implementation of a Logstash codec for the Google Protocol Buffer Format(GPB)
+# For Telemetry gpb data
 #
 class LogStash::Codecs::Telemetry_gpb < LogStash::Codecs::Base
-  config_name "telemetry_gpb"
+  config_name "telemetry_gpb_hw"

   #
   # 'protofiles' specified path for directory holding:
@@ -102,17 +34,20 @@
   config :protofiles, :validate => :path, :required => true

   public
+
   def register
     #
     # Initialise the state of the codec. Codec is always cloned from
     # this state.
     #
-    @logger.info("Registering cisco telemetry_gpb dgram codec")
-
+    # Write error info into file
+    log_file = File.open('./logs/telemetry-gpb.log', 'a')
+    @file_logger = Logger.new(log_file)
+    @file_logger.level = Logger::ERROR
     #
     # Load ruby binding source files for .proto
     #
-    Dir.glob(@protofiles + "/*.pb.rb") do |binding_sourcefile|
+    Dir.glob(@protofiles + "/*.rb") do |binding_sourcefile|
       dir_and_file = File.absolute_path binding_sourcefile
       @logger.info("Loading ruby source file",
                    :proto_binding_source => dir_and_file)
@@ -124,126 +59,177 @@
                      :exception => e, :stacktrace => e.backtrace)
       end
     end
+  end

-    #
-    # Build a map of paths to gpb rb binding objects (and name)
-    #
-    # Sample outcome:
-    #
-    # @protofiles_map = {
-    #  "RootOper.FIB.Node.Protocol.VRF.IPPrefixBrief" =>
-    #      [FibShTblFib, "FibShTblFib"],
-    #  "RootOper.InfraStatistics.Interface.Latest.GenericCounters" =>
-    #      [IfstatsbagGeneric, "IfstatsbagGeneric"]
-    #   ...
-    # }
-    #
-    #
-    @protofiles_map =
-      Hash[Dir.glob(@protofiles + "/*.proto").map { |p|
-             telemetry_gpb_extract_cisco_extensions_from_proto p
-           }]
-    @logger.info("Loading ruby path to class map",
-                 :protofiles_map => @protofiles_map.to_s)
+  # @deprecated
+  # deprecated by wangting w30000618 2020/3/4
+  def hash_merge_old(clsname, hashdata)
+    hash_res = Hash.new
+    hashdata.each do |key, value|
+      if value.is_a?(Hash)
+        tmp = "." + key.to_s
+        if clsname.eql?("")
+          tmp = key.to_s
+        end
+        clsname = clsname + tmp
+        new_hash_res = hash_merge(clsname, value)
+        hash_res = hash_res.merge(new_hash_res)
+      else
+        if !clsname.eql?("")
+          key = clsname + "." + key.to_s
+        end
+        value.each do |content|
+          if content.has_key?(:data)
+            data_tmp = Base64.strict_encode64(content[:data])
+            @logger.info(data_tmp);
+            content[:data] = data_tmp
+          end
+        end
+        hash_res[key] = value
+      end
+    end
+    hash_res
+  end
+
+  def hash_merge(clsname, hashdata)
+    hash_res = Hash.new
+    hashdata.each do |key, value|
+      if value.is_a?(Hash)
+        tmp = "." + key.to_s
+        if clsname.eql?("")
+          tmp = key.to_s
+        end
+        clsname = clsname + tmp
+        new_hash_res = hash_merge(clsname, value)
+        hash_res = hash_res.merge(new_hash_res)
+      else
+        if !clsname.eql?("")
+          key = clsname + "." + key.to_s
+        end
+        # add by wangting w30000618 2020/3/4, if value's class not arr, but num; it cannot do .each
+        if (!value.is_a?(Array))
+          hash_res[key] = value
+        else
+          value.each do |content|
+            if content.has_key?(:data)
+              data_tmp = Base64.strict_encode64(content[:data])
+              content[:data] = data_tmp
+            end
+          end
+        end
+        hash_res[key] = value
+      end
+    end
+    hash_res
+  end

+
+  # add by wangting 2020.2.28 start
+  def to_hash_with_enum_name(message)
+    return nil if message == nil
+    return message.is_a?(String) ? message.dup : message unless message.is_a?(::ProtocolBuffers::Message)
+    message.fields.select do |tag, field|
+      message.value_for_tag?(tag)
+    end.inject(Hash.new) do |hash, (tag, field)|
+      value = message.value_for_tag(tag)
+      # hash[field.name] = value.is_a?(::ProtocolBuffers::RepeatedField) ? value.map { |elem| to_hash(elem) } : to_hash(value)
+      if !field.is_a?(::ProtocolBuffers::Field::EnumField)
+        hash[field.name] = value.is_a?(::ProtocolBuffers::RepeatedField) ? value.map { |elem| to_hash_with_enum_name(elem) } : to_hash_with_enum_name(value)
+      end
+      if field.is_a?(::ProtocolBuffers::Field::EnumField)
+        if value.is_a?(::ProtocolBuffers::RepeatedField)
+          hash[field.name] = []
+          value.map { |elem|
+            hash[field.name] << field.value_to_name[elem]
+          }
+        else
+          hash[field.name] = field.is_a?(::ProtocolBuffers::Field::EnumField) ? field.value_to_name[value] : value
+        end
+      end
+      hash
+    end
   end

+  # add by wangting 2020.2.28 end
+
   public
+
   def decode(data)

     connection_thread = Thread.current

     @logger.debug? &&
-      @logger.debug("Transport passing data down",
-                    :thread => connection_thread.to_s,
-                    :length => data.length)
+        @logger.debug("Transport passing data down",
+                      :thread => connection_thread.to_s,
+                      :length => data.length)

-    msg = TelemetryHeader.new
+    #Huawei Data Decoder
     begin
-      msg_out = msg.parse(data).to_hash
-      tables = msg_out.delete(:tables)
-      tables.each do |table|
-
-        @logger.debug? &&
-          @logger.debug("Message policy paths",
-                        :identifier => msg_out[:identifier],
-                        :policy_name => msg_out[:policy_name],
-                        :end_time => msg_out[:end_time],
-                        :policy_path => table[:policy_path])
+      hwmsg = Hwtelemetry::Telemetry.new
+      # hwmsg_out = hwmsg.parse(data).to_hash   delete by wangting 30000618 2020.2.28
+      hwmsg_out = to_hash_with_enum_name(hwmsg.parse(data)) # add by wangting 30000618 2020.2.28
+      class_path = hwmsg_out[:sensor_path].split("/")
+      moudule_classpre = class_path[0].split(":") #get second class name to create message class
+      moudule_class = moudule_classpre[0].split("-")
+      moudule_prename = moudule_class[0].capitalize
+      module_class_len = moudule_class.length
+      moudule_name = ""
+      i = 1
+      while i < module_class_len
+        mod_tmp = moudule_class[i]
+        mod_tmp[0] = mod_tmp[0].capitalize
+        moudule_name += mod_tmp
+        i += 1
+      end
+      sec_class = moudule_classpre[1].split("-")
+      sec_class_len = sec_class.length
+      sec_name = ""
+      i = 0
+      while i < sec_class_len
+        sec_tmp = sec_class[i]
+        sec_tmp[0] = sec_tmp[0].capitalize
+        sec_name += sec_tmp
+        i += 1
+      end
+      classname = moudule_prename + moudule_name + "::" + sec_name
+      row_class = classname.split('::').inject(Object) { |n, c| n.const_get c }
+      data_gpb = hwmsg_out.delete(:data_gpb)
+      data_rows = data_gpb.delete(:row)

-        #
+      data_rows.each do |row|
         # Map row to appropriate sub-message type and decode.
-        #
-        if @protofiles_map.has_key? table[:policy_path]
-          row_decoder_name = @protofiles_map[table[:policy_path]]
-          begin
-
-            row_decoder_class = row_decoder_name[0]
-            rows = table[:row]
-            rows.each do |row|
-
-              @logger.debug? &&
-                @logger.debug("Raw row", :row_raw => row.to_s,
-                              :row_decoder_name => row_decoder_name,
-                              :row_decoder_class => row_decoder_class.to_s)
-
-              #
-              # Perhaps just clear the object as opposed to allocate
-              # it for every iteration.
-              #
-              row_decoder = row_decoder_class.new
-              row_out = row_decoder.parse(row).to_hash
-              @logger.debug? &&
-                @logger.debug("Decoded row",
-                              :row_out => row_out.to_s)
-
-              #
-              # Merge header and row, stringify keys, and yield.
-              #
-              # Stringify operation copes with nested hashes too.
-              # .stringify in rails is what I am looking for, but this
-              # is not rails.
-              #
-              ev = msg_out.clone
-              ev[:end_time] = msg_out[:end_time]
-              ev[:content] = row_out
-              ev[:type] = row_decoder_name[1]
-              ev[:path] = table[:policy_path]
-              yield LogStash::Event.new(JSON.parse(ev.to_json))
-
-            end # End of iteration over rows
-
-          rescue Exception => e
-            @logger.warn("Failed to decode telemetry row",
-                         :policy_path => table[:policy_path],
-                         :decoder => row_decoder_name,
+        row_out = to_hash_with_enum_name(row_class.parse(row[:content]))
+        hwmsg_out[:timestamp] = row[:timestamp]
+        content_out = Hash.new
+        clsname = ""
+        content_out = hash_merge(clsname, row_out)
+        ev = hwmsg_out.clone
+        ev = ev.merge(content_out)
+        #yield LogStash::Event.new(JSON.parse(ev.to_json))
+        yield LogStash::Event.new(ev)
+      end # End of iteration over rows
+
+    rescue Exception => e # Catch Decoder Exception
+      msg = "Failed to decode telemetry data"
+      @logger.error("Failed to decode telemetry data",
+                    :data => data,
+                    :exception => e, :stacktrace => e.backtrace)
+      @file_logger.error(:msg => msg,
+                         :data => data,
                          :exception => e, :stacktrace => e.backtrace)
-          end # End of exception handling of row decode
-
-          @logger.debug? && @logger.debug("Iteration end")
-
-        else # No decoder is available
-
-          @logger.debug? &&
-            @logger.debug("No decoder available",
-                          :policy_path => table[:policy_path])
-
-        end # End of cases where a decoder is available, or not
+    end # End of Exception handling

-      end # End of iteration over each table
-
-    rescue Exception => e
-      @logger.warn("Failed to decode telemetry header",
-                   :data => data,
-                   :exception => e, :stacktrace => e.backtrace)
-    end
+  end

-  end # def decode
+  # def decode

   public
+
   def encode(event)
     # do nothing on encode for now
-    @logger.info("cisco telemetry: no encode facility")
-  end # def encode
+    @logger.info("telemetry: no encode facility")
+  end
+
+# def encode

-end # class LogStash::Codecs::TelemetryStream
+end # class LogStash::Codecs::Telemetry_gpb
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/logstash-codec-hw-telemetry-gpb.gemspec /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/logstash-codec-hw-telemetry-gpb.gemspec
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/logstash-codec-hw-telemetry-gpb.gemspec	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/logstash-codec-hw-telemetry-gpb.gemspec	2020-08-31 15:47:25.112000000 +0800
@@ -1,5 +1,5 @@
 Gem::Specification.new do |s|
-  s.name = 'logstash-codec-telemetry-gpb'
+  s.name = 'logstash-codec-hw-telemetry-gpb'
   s.version         = '0.9.0'
   s.licenses = ['Apache License (2.0)']
   s.summary = "This codec handles cisco telemetry (gpb dgrams)."
@@ -19,7 +19,7 @@
   s.metadata = { "logstash_plugin" => "true", "logstash_group" => "codec" }

   # Gem dependencies
-  s.add_runtime_dependency "logstash-core", '>= 1.4.0', '< 3.0.0'
+  s.add_runtime_dependency "logstash-core", '>= 1.4.0'
   s.add_runtime_dependency "ruby-protocol-buffers", '>= 1.6.0', '< 2.0.0'

   s.add_development_dependency 'logstash-devutils'
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/cisco.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/cisco.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/cisco.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/cisco.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,50 +0,0 @@
-/* ----------------------------------------------------------------------------
- * cisco.proto -- Protocol Buffer extension definitions
- *
- * August 2015, Robert Wills
- *
- * Copyright (c) 2015 by Cisco Systems, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ----------------------------------------------------------------------------
- */
-
-syntax = "proto2";
-
-import "google/protobuf/descriptor.proto";
-
-message CiscoMessageOptions {
-    optional string schema_path = 1;
-}
-
-message CiscoFieldOptions {
-    optional string name = 1;
-    optional string path_element = 2;
-}
-
-message CiscoFileOptions {
-    optional string metadata = 1;
-}
-
-extend google.protobuf.MessageOptions {
-    optional CiscoMessageOptions cisco_msg = 29051;
-}
-
-extend google.protobuf.FieldOptions {
-    optional CiscoFieldOptions cisco_field = 29052;
-}
-
-extend google.protobuf.FileOptions {
-    optional CiscoFileOptions cisco_file = 29053;
-}
-
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/descriptor.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/descriptor.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/descriptor.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/descriptor.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,433 +0,0 @@
-// Protocol Buffers - Google's data interchange format
-// Copyright 2008 Google Inc.  All rights reserved.
-// http://code.google.com/p/protobuf/
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are
-// met:
-//
-//     * Redistributions of source code must retain the above copyright
-// notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above
-// copyright notice, this list of conditions and the following disclaimer
-// in the documentation and/or other materials provided with the
-// distribution.
-//     * Neither the name of Google Inc. nor the names of its
-// contributors may be used to endorse or promote products derived from
-// this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// Author: kenton@google.com (Kenton Varda)
-//  Based on original Protocol Buffers design by
-//  Sanjay Ghemawat, Jeff Dean, and others.
-//
-// The messages in this file describe the definitions found in .proto files.
-// A valid .proto file can be translated directly to a FileDescriptorProto
-// without any other information (e.g. without reading its imports).
-
-
-
-package google.protobuf;
-option java_package = "com.google.protobuf";
-option java_outer_classname = "DescriptorProtos";
-
-// descriptor.proto must be optimized for speed because reflection-based
-// algorithms don't work during bootstrapping.
-option optimize_for = SPEED;
-
-// The protocol compiler can output a FileDescriptorSet containing the .proto
-// files it parses.
-message FileDescriptorSet {
-  repeated FileDescriptorProto file = 1;
-}
-
-// Describes a complete .proto file.
-message FileDescriptorProto {
-  optional string name = 1;       // file name, relative to root of source tree
-  optional string package = 2;    // e.g. "foo", "foo.bar", etc.
-
-  // Names of files imported by this file.
-  repeated string dependency = 3;
-
-  // All top-level definitions in this file.
-  repeated DescriptorProto message_type = 4;
-  repeated EnumDescriptorProto enum_type = 5;
-  repeated ServiceDescriptorProto service = 6;
-  repeated FieldDescriptorProto extension = 7;
-
-  optional FileOptions options = 8;
-}
-
-// Describes a message type.
-message DescriptorProto {
-  optional string name = 1;
-
-  repeated FieldDescriptorProto field = 2;
-  repeated FieldDescriptorProto extension = 6;
-
-  repeated DescriptorProto nested_type = 3;
-  repeated EnumDescriptorProto enum_type = 4;
-
-  message ExtensionRange {
-    optional int32 start = 1;
-    optional int32 end = 2;
-  }
-  repeated ExtensionRange extension_range = 5;
-
-  optional MessageOptions options = 7;
-}
-
-// Describes a field within a message.
-message FieldDescriptorProto {
-  enum Type {
-    // 0 is reserved for errors.
-    // Order is weird for historical reasons.
-    TYPE_DOUBLE         = 1;
-    TYPE_FLOAT          = 2;
-    TYPE_INT64          = 3;   // Not ZigZag encoded.  Negative numbers
-                               // take 10 bytes.  Use TYPE_SINT64 if negative
-                               // values are likely.
-    TYPE_UINT64         = 4;
-    TYPE_INT32          = 5;   // Not ZigZag encoded.  Negative numbers
-                               // take 10 bytes.  Use TYPE_SINT32 if negative
-                               // values are likely.
-    TYPE_FIXED64        = 6;
-    TYPE_FIXED32        = 7;
-    TYPE_BOOL           = 8;
-    TYPE_STRING         = 9;
-    TYPE_GROUP          = 10;  // Tag-delimited aggregate.
-    TYPE_MESSAGE        = 11;  // Length-delimited aggregate.
-
-    // New in version 2.
-    TYPE_BYTES          = 12;
-    TYPE_UINT32         = 13;
-    TYPE_ENUM           = 14;
-    TYPE_SFIXED32       = 15;
-    TYPE_SFIXED64       = 16;
-    TYPE_SINT32         = 17;  // Uses ZigZag encoding.
-    TYPE_SINT64         = 18;  // Uses ZigZag encoding.
-  };
-
-  enum Label {
-    // 0 is reserved for errors
-    LABEL_OPTIONAL      = 1;
-    LABEL_REQUIRED      = 2;
-    LABEL_REPEATED      = 3;
-    // TODO(sanjay): Should we add LABEL_MAP?
-  };
-
-  optional string name = 1;
-  optional int32 number = 3;
-  optional Label label = 4;
-
-  // If type_name is set, this need not be set.  If both this and type_name
-  // are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
-  optional Type type = 5;
-
-  // For message and enum types, this is the name of the type.  If the name
-  // starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
-  // rules are used to find the type (i.e. first the nested types within this
-  // message are searched, then within the parent, on up to the root
-  // namespace).
-  optional string type_name = 6;
-
-  // For extensions, this is the name of the type being extended.  It is
-  // resolved in the same manner as type_name.
-  optional string extendee = 2;
-
-  // For numeric types, contains the original text representation of the value.
-  // For booleans, "true" or "false".
-  // For strings, contains the default text contents (not escaped in any way).
-  // For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
-  // TODO(kenton):  Base-64 encode?
-  optional string default_value = 7;
-
-  optional FieldOptions options = 8;
-}
-
-// Describes an enum type.
-message EnumDescriptorProto {
-  optional string name = 1;
-
-  repeated EnumValueDescriptorProto value = 2;
-
-  optional EnumOptions options = 3;
-}
-
-// Describes a value within an enum.
-message EnumValueDescriptorProto {
-  optional string name = 1;
-  optional int32 number = 2;
-
-  optional EnumValueOptions options = 3;
-}
-
-// Describes a service.
-message ServiceDescriptorProto {
-  optional string name = 1;
-  repeated MethodDescriptorProto method = 2;
-
-  optional ServiceOptions options = 3;
-}
-
-// Describes a method of a service.
-message MethodDescriptorProto {
-  optional string name = 1;
-
-  // Input and output type names.  These are resolved in the same way as
-  // FieldDescriptorProto.type_name, but must refer to a message type.
-  optional string input_type = 2;
-  optional string output_type = 3;
-
-  optional MethodOptions options = 4;
-}
-
-// ===================================================================
-// Options
-
-// Each of the definitions above may have "options" attached.  These are
-// just annotations which may cause code to be generated slightly differently
-// or may contain hints for code that manipulates protocol messages.
-//
-// Clients may define custom options as extensions of the *Options messages.
-// These extensions may not yet be known at parsing time, so the parser cannot
-// store the values in them.  Instead it stores them in a field in the *Options
-// message called uninterpreted_option. This field must have the same name
-// across all *Options messages. We then use this field to populate the
-// extensions when we build a descriptor, at which point all protos have been
-// parsed and so all extensions are known.
-//
-// Extension numbers for custom options may be chosen as follows:
-// * For options which will only be used within a single application or
-//   organization, or for experimental options, use field numbers 50000
-//   through 99999.  It is up to you to ensure that you do not use the
-//   same number for multiple options.
-// * For options which will be published and used publicly by multiple
-//   independent entities, e-mail kenton@google.com to reserve extension
-//   numbers.  Simply tell me how many you need and I'll send you back a
-//   set of numbers to use -- there's no need to explain how you intend to
-//   use them.  If this turns out to be popular, a web service will be set up
-//   to automatically assign option numbers.
-
-
-message FileOptions {
-
-  // Sets the Java package where classes generated from this .proto will be
-  // placed.  By default, the proto package is used, but this is often
-  // inappropriate because proto packages do not normally start with backwards
-  // domain names.
-  optional string java_package = 1;
-
-
-  // If set, all the classes from the .proto file are wrapped in a single
-  // outer class with the given name.  This applies to both Proto1
-  // (equivalent to the old "--one_java_file" option) and Proto2 (where
-  // a .proto always translates to a single class, but you may want to
-  // explicitly choose the class name).
-  optional string java_outer_classname = 8;
-
-  // If set true, then the Java code generator will generate a separate .java
-  // file for each top-level message, enum, and service defined in the .proto
-  // file.  Thus, these types will *not* be nested inside the outer class
-  // named by java_outer_classname.  However, the outer class will still be
-  // generated to contain the file's getDescriptor() method as well as any
-  // top-level extensions defined in the file.
-  optional bool java_multiple_files = 10 [default=false];
-
-  // Generated classes can be optimized for speed or code size.
-  enum OptimizeMode {
-    SPEED = 1;        // Generate complete code for parsing, serialization,
-                      // etc.
-    CODE_SIZE = 2;    // Use ReflectionOps to implement these methods.
-    LITE_RUNTIME = 3; // Generate code using MessageLite and the lite runtime.
-  }
-  optional OptimizeMode optimize_for = 9 [default=SPEED];
-
-
-
-
-  // Should generic services be generated in each language?  "Generic" services
-  // are not specific to any particular RPC system.  They are generated by the
-  // main code generators in each language (without additional plugins).
-  // Generic services were the only kind of service generation supported by
-  // early versions of proto2.
-  //
-  // Generic services are now considered deprecated in favor of using plugins
-  // that generate code specific to your particular RPC system.  If you are
-  // using such a plugin, set these to false.  In the future, we may change
-  // the default to false, so if you explicitly want generic services, you
-  // should explicitly set these to true.
-  optional bool cc_generic_services = 16 [default=true];
-  optional bool java_generic_services = 17 [default=true];
-  optional bool py_generic_services = 18 [default=true];
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message MessageOptions {
-  // Set true to use the old proto1 MessageSet wire format for extensions.
-  // This is provided for backwards-compatibility with the MessageSet wire
-  // format.  You should not use this for any other reason:  It's less
-  // efficient, has fewer features, and is more complicated.
-  //
-  // The message must be defined exactly as follows:
-  //   message Foo {
-  //     option message_set_wire_format = true;
-  //     extensions 4 to max;
-  //   }
-  // Note that the message cannot have any defined fields; MessageSets only
-  // have extensions.
-  //
-  // All extensions of your type must be singular messages; e.g. they cannot
-  // be int32s, enums, or repeated messages.
-  //
-  // Because this is an option, the above two restrictions are not enforced by
-  // the protocol compiler.
-  optional bool message_set_wire_format = 1 [default=false];
-
-  // Disables the generation of the standard "descriptor()" accessor, which can
-  // conflict with a field of the same name.  This is meant to make migration
-  // from proto1 easier; new code should avoid fields named "descriptor".
-  optional bool no_standard_descriptor_accessor = 2 [default=false];
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message FieldOptions {
-  // The ctype option instructs the C++ code generator to use a different
-  // representation of the field than it normally would.  See the specific
-  // options below.  This option is not yet implemented in the open source
-  // release -- sorry, we'll try to include it in a future version!
-  optional CType ctype = 1 [default = STRING];
-  enum CType {
-    // Default mode.
-    STRING = 0;
-
-    CORD = 1;
-
-    STRING_PIECE = 2;
-  }
-  // The packed option can be enabled for repeated primitive fields to enable
-  // a more efficient representation on the wire. Rather than repeatedly
-  // writing the tag and type for each element, the entire array is encoded as
-  // a single length-delimited blob.
-  optional bool packed = 2;
-
-
-  // Is this field deprecated?
-  // Depending on the target platform, this can emit Deprecated annotations
-  // for accessors, or it will be completely ignored; in the very least, this
-  // is a formalization for deprecating fields.
-  optional bool deprecated = 3 [default=false];
-
-  // EXPERIMENTAL.  DO NOT USE.
-  // For "map" fields, the name of the field in the enclosed type that
-  // is the key for this map.  For example, suppose we have:
-  //   message Item {
-  //     required string name = 1;
-  //     required string value = 2;
-  //   }
-  //   message Config {
-  //     repeated Item items = 1 [experimental_map_key="name"];
-  //   }
-  // In this situation, the map key for Item will be set to "name".
-  // TODO: Fully-implement this, then remove the "experimental_" prefix.
-  optional string experimental_map_key = 9;
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message EnumOptions {
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message EnumValueOptions {
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message ServiceOptions {
-
-  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
-  //   framework.  We apologize for hoarding these numbers to ourselves, but
-  //   we were already using them long before we decided to release Protocol
-  //   Buffers.
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-message MethodOptions {
-
-  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
-  //   framework.  We apologize for hoarding these numbers to ourselves, but
-  //   we were already using them long before we decided to release Protocol
-  //   Buffers.
-
-  // The parser stores options it doesn't recognize here. See above.
-  repeated UninterpretedOption uninterpreted_option = 999;
-
-  // Clients can define custom options in extensions of this message. See above.
-  extensions 1000 to max;
-}
-
-// A message representing a option the parser does not recognize. This only
-// appears in options protos created by the compiler::Parser class.
-// DescriptorPool resolves these when building Descriptor objects. Therefore,
-// options protos in descriptor objects (e.g. returned by Descriptor::options(),
-// or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
-// in them.
-message UninterpretedOption {
-  // The name of the uninterpreted option.  Each string represents a segment in
-  // a dot-separated name.  is_extension is true iff a segment represents an
-  // extension (denoted with parentheses in options specs in .proto files).
-  // E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
-  // "foo.(bar.baz).qux".
-  message NamePart {
-    required string name_part = 1;
-    required bool is_extension = 2;
-  }
-  repeated NamePart name = 2;
-
-  // The value of the uninterpreted option, in whatever type the tokenizer
-  // identified it as during parsing. Exactly one of these should be set.
-  optional string identifier_value = 3;
-  optional uint64 positive_int_value = 4;
-  optional int64 negative_int_value = 5;
-  optional double double_value = 6;
-  optional bytes string_value = 7;
-}
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/bgp_neighbor.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/bgp_neighbor.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/infrastatistics_datarate.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/infrastatistics_datarate.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/infrastatistics_generic.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/infrastatistics_generic.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/interfaces.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/interfaces.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_headsignallingcounters.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_headsignallingcounters.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_tunnelautobandwidth.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_tunnelautobandwidth.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_tunnelhead.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/mpls_te_tunnelhead.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/qos_input_statistics.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/qos_input_statistics.map differ
Binary files /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/qos_output_statistics.map and /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/maps/qos_output_statistics.map differ
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/bgp_neighbor.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/bgp_neighbor.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/bgp_neighbor.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/bgp_neighbor.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,505 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message bgp_nbr_bag {
-    option (cisco_msg).schema_path = "RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor";
-
-    optional string instance_name = 1 [(cisco_field).path_element="RootOper.BGP.Instance(InstanceName)"];
-    optional string neighbor_address = 2 [(cisco_field).path_element="RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor(NeighborAddress)"];
-    optional uint32 speaker_id = 50 [(cisco_field).name="SpeakerID"];
-    optional string description = 51 [(cisco_field).name="Description"];
-    optional uint32 local_as = 52 [(cisco_field).name="LocalAS"];
-    optional uint32 remote_as = 53 [(cisco_field).name="RemoteAS"];
-    optional bool has_internal_link = 54 [(cisco_field).name="HasInternalLink"];
-    optional bool is_external_neighbor_not_directly_connected = 55 [(cisco_field).name="IsExternalNeighborNotDirectlyConnected"];
-    optional uint32 messages_received = 56 [(cisco_field).name="MessagesReceived"];
-    optional uint32 messages_sent = 57 [(cisco_field).name="MessagesSent"];
-    optional uint32 update_messages_in = 58 [(cisco_field).name="UpdateMessagesIn"];
-    optional uint32 update_messages_out = 59 [(cisco_field).name="UpdateMessagesOut"];
-    optional uint32 messages_queued_in = 60 [(cisco_field).name="MessagesQueuedIn"];
-    optional uint32 messages_queued_out = 61 [(cisco_field).name="MessagesQueuedOut"];
-    optional uint32 connection_established_time = 62 [(cisco_field).name="ConnectionEstablishedTime"];
-    optional string connection_state = 63 [(cisco_field).name="ConnectionState"];
-    optional uint32 previous_connection_state = 64 [(cisco_field).name="PreviousConnectionState"];
-    optional uint32 connection_admin_status = 65 [(cisco_field).name="ConnectionAdminStatus"];
-    optional string open_check_error_code = 66 [(cisco_field).name="OpenCheckErrorCode"];
-    optional bgp_addrtype connection_local_address = 67 [(cisco_field).name="ConnectionLocalAddress"];
-    optional bool is_local_address_configured = 68 [(cisco_field).name="IsLocalAddressConfigured"];
-    optional uint32 connection_local_port = 69 [(cisco_field).name="ConnectionLocalPort"];
-    optional bgp_addrtype connection_remote_address = 70 [(cisco_field).name="ConnectionRemoteAddress"];
-    optional uint32 connection_remote_port = 71 [(cisco_field).name="ConnectionRemotePort"];
-    optional uint32 neighbor_interface_handle = 72 [(cisco_field).name="NeighborInterfaceHandle"];
-    optional bool reset_notification_sent = 73 [(cisco_field).name="ResetNotificationSent"];
-    optional bool is_administratively_shut_down = 74 [(cisco_field).name="IsAdministrativelyShutDown"];
-    optional bool is_neighbor_max_prefix_shutdown = 75 [(cisco_field).name="IsNeighborMaxPrefixShutdown"];
-    optional bool is_out_of_memory_shutdown = 76 [(cisco_field).name="IsOutOfMemoryShutdown"];
-    optional bool is_out_of_memory_forced_up = 77 [(cisco_field).name="IsOutOfMemoryForcedUp"];
-    optional bool is_ebgp_peer_as_league = 78 [(cisco_field).name="IsEBGPPeerASLeague"];
-    optional bool is_ebgp_peer_common_admin = 79 [(cisco_field).name="IsEBGPPeerCommonAdmin"];
-    optional bool ttl_security_enabled = 80 [(cisco_field).name="TTLSecurityEnabled"];
-    optional bool suppress4_byte_as = 81 [(cisco_field).name="Suppress4ByteAs"];
-    optional string bfd_session_state = 82 [(cisco_field).name="BFDSessionState"];
-    optional string bfd_session_created_state = 83 [(cisco_field).name="BFDSessionCreatedState"];
-    optional string bfd_session_enable_mode = 84 [(cisco_field).name="BFDSessionEnableMode"];
-    optional uint32 bfd_minintervalval = 85 [(cisco_field).name="BFDMinintervalval"];
-    optional uint32 bfd_multiplierval = 86 [(cisco_field).name="BFDMultiplierval"];
-    optional uint64 bfd_state_ts = 87 [(cisco_field).name="BfdStateTs"];
-    optional bytes router_id = 88 [(cisco_field).name="RouterID"];
-    optional uint32 negotiated_protocol_version = 89 [(cisco_field).name="NegotiatedProtocolVersion"];
-    optional uint32 ebgp_time_to_live = 90 [(cisco_field).name="EBGPTimeToLive"];
-    optional bool is_ebgp_multihop_bgpmpls_forwarding_disabled = 91 [(cisco_field).name="IsEBGPMultihopBGPMPLSForwardingDisabled"];
-    optional uint32 tcpmss = 92 [(cisco_field).name="TCPMSS"];
-    optional uint32 msg_log_in = 93 [(cisco_field).name="MsgLogIn"];
-    optional uint32 msg_log_out = 94 [(cisco_field).name="MsgLogOut"];
-    optional uint32 neighbor_local_as = 95 [(cisco_field).name="NeighborLocalAS"];
-    optional bool local_as_no_prepend = 96 [(cisco_field).name="LocalASNoPrepend"];
-    optional bool is_capability_negotiation_performed = 97 [(cisco_field).name="IsCapabilityNegotiationPerformed"];
-    optional bool is_route_refresh_capability_received = 98 [(cisco_field).name="IsRouteRefreshCapabilityReceived"];
-    optional bool is_route_refresh_old_capability_received = 99 [(cisco_field).name="IsRouteRefreshOldCapabilityReceived"];
-    optional bool is_gr_aware = 100 [(cisco_field).name="IsGRAware"];
-    optional bool is4_byte_as_capability_received = 101 [(cisco_field).name="Is4ByteASCapabilityReceived"];
-    optional bool is4_byte_as_capability_sent = 102 [(cisco_field).name="Is4ByteASCapabilitySent"];
-    optional bool multi_protocol_capability_received = 103 [(cisco_field).name="MultiProtocolCapabilityReceived"];
-    optional uint32 hold_time = 104 [(cisco_field).name="HoldTime"];
-    optional uint32 keep_alive_time = 105 [(cisco_field).name="KeepAliveTime"];
-    optional uint32 configured_hold_time = 106 [(cisco_field).name="ConfiguredHoldTime"];
-    optional uint32 configured_keepalive = 107 [(cisco_field).name="ConfiguredKeepalive"];
-    optional uint32 configured_min_acc_hold_time = 108 [(cisco_field).name="ConfiguredMinAccHoldTime"];
-    optional uint32 min_advertise_interval = 109 [(cisco_field).name="MinAdvertiseInterval"];
-    optional uint32 min_advertise_interval_msecs = 110 [(cisco_field).name="MinAdvertiseIntervalMsecs"];
-    optional uint32 min_origination_interval = 111 [(cisco_field).name="MinOriginationInterval"];
-    optional uint32 connect_retry_interval = 112 [(cisco_field).name="ConnectRetryInterval"];
-    optional uint32 time_since_last_update = 113 [(cisco_field).name="TimeSinceLastUpdate"];
-    optional uint32 time_since_last_read = 114 [(cisco_field).name="TimeSinceLastRead"];
-    optional uint32 time_since_last_read_reset = 115 [(cisco_field).name="TimeSinceLastReadReset"];
-    optional uint64 time_last_cb = 116 [(cisco_field).name="TimeLastCB"];
-    optional uint32 time_last_cb_reset = 117 [(cisco_field).name="TimeLastCBReset"];
-    optional uint64 time_last_fb = 118 [(cisco_field).name="TimeLastFB"];
-    optional uint32 count_last_write = 119 [(cisco_field).name="CountLastWrite"];
-    optional uint32 time_since_last_write = 120 [(cisco_field).name="TimeSinceLastWrite"];
-    optional uint32 attempted_last_write_bytes = 121 [(cisco_field).name="AttemptedLastWriteBytes"];
-    optional uint32 actual_last_write_bytes = 122 [(cisco_field).name="ActualLastWriteBytes"];
-    optional uint32 time_since_second_last_write = 123 [(cisco_field).name="TimeSinceSecondLastWrite"];
-    optional uint32 attempted_second_last_write_bytes = 124 [(cisco_field).name="AttemptedSecondLastWriteBytes"];
-    optional uint32 actual_second_last_write_bytes = 125 [(cisco_field).name="ActualSecondLastWriteBytes"];
-    optional uint32 time_since_last_write_reset = 126 [(cisco_field).name="TimeSinceLastWriteReset"];
-    optional uint32 attempted_last_write_reset_bytes = 127 [(cisco_field).name="AttemptedLastWriteResetBytes"];
-    optional uint32 actual_last_write_reset_bytes = 128 [(cisco_field).name="ActualLastWriteResetBytes"];
-    optional uint32 time_since_second_last_write_reset = 129 [(cisco_field).name="TimeSinceSecondLastWriteReset"];
-    optional uint32 attempted_second_last_write_reset_bytes = 130 [(cisco_field).name="AttemptedSecondLastWriteResetBytes"];
-    optional uint32 actual_second_last_write_reset_bytes = 131 [(cisco_field).name="ActualSecondLastWriteResetBytes"];
-    optional uint32 last_write_event = 132 [(cisco_field).name="LastWriteEvent"];
-    optional uint32 second_last_write_event = 133 [(cisco_field).name="SecondLastWriteEvent"];
-    optional uint32 last_k_aexpiry_reset = 134 [(cisco_field).name="LastKAexpiryReset"];
-    optional uint32 second_last_k_aexpiry_reset = 135 [(cisco_field).name="SecondLastKAexpiryReset"];
-    optional uint32 last_k_anotsent_reset = 136 [(cisco_field).name="LastKAnotsentReset"];
-    optional uint32 last_k_aerror_reset = 137 [(cisco_field).name="LastKAerrorReset"];
-    optional uint32 last_k_astart_reset = 138 [(cisco_field).name="LastKAstartReset"];
-    optional uint32 second_last_k_astart_reset = 139 [(cisco_field).name="SecondLastKAstartReset"];
-    optional uint32 connection_up_count = 140 [(cisco_field).name="ConnectionUpCount"];
-    optional uint32 connection_down_count = 141 [(cisco_field).name="ConnectionDownCount"];
-    optional uint32 time_since_connection_last_dropped = 142 [(cisco_field).name="TimeSinceConnectionLastDropped"];
-    optional string reset_reason = 143 [(cisco_field).name="ResetReason"];
-    optional string peer_reset_reason = 144 [(cisco_field).name="PeerResetReason"];
-    optional uint32 peer_error_code = 145 [(cisco_field).name="PeerErrorCode"];
-    optional uint32 last_notify_error_code = 146 [(cisco_field).name="LastNotifyErrorCode"];
-    optional uint32 last_notify_error_subcode = 147 [(cisco_field).name="LastNotifyErrorSubcode"];
-    optional bgp_notfntype_ send_notification_info = 148 [(cisco_field).name="SendNotificationInfo"];
-    optional bgp_notfntype_ received_notification_info = 149 [(cisco_field).name="ReceivedNotificationInfo"];
-    optional uint32 error_notifies_received = 150 [(cisco_field).name="ErrorNotifiesReceived"];
-    optional uint32 error_notifies_sent = 151 [(cisco_field).name="ErrorNotifiesSent"];
-    optional uint32 remote_as_number = 152 [(cisco_field).name="RemoteASNumber"];
-    optional uint32 dmz_link_bandwidth = 153 [(cisco_field).name="DMZLinkBandwidth"];
-    optional uint32 tos_type = 154 [(cisco_field).name="TOSType"];
-    optional uint32 tos_value = 155 [(cisco_field).name="TOSValue"];
-    optional bgp_perf_nbr_ performance_statistics = 156 [(cisco_field).name="PerformanceStatistics"];
-    optional string tcp_session_open_mode = 158 [(cisco_field).name="TCPSessionOpenMode"];
-    optional string vrf_name = 159 [(cisco_field).name="VRFName"];
-    optional bool standby_rp = 160 [(cisco_field).name="StandbyRP"];
-    optional bool nsr_enabled = 161 [(cisco_field).name="NSREnabled"];
-    optional bool graceful_restart_enabled_nbr = 162 [(cisco_field).name="GracefulRestartEnabledNbr"];
-    optional uint32 gr_restart_time = 163 [(cisco_field).name="GrRestartTime"];
-    optional uint32 gr_stale_path_time = 164 [(cisco_field).name="GrStalePathTime"];
-    optional uint32 fssn_offset = 165 [(cisco_field).name="FssnOffset"];
-    optional uint32 fpbsn_offset = 166 [(cisco_field).name="FpbsnOffset"];
-    optional uint32 last_ackd_seq_no = 167 [(cisco_field).name="LastAckdSeqNo"];
-    optional uint32 bytes_written = 168 [(cisco_field).name="BytesWritten"];
-    optional uint32 bytes_read = 169 [(cisco_field).name="BytesRead"];
-    optional uint32 socket_read_bytes = 170 [(cisco_field).name="SocketReadBytes"];
-    optional bool is_read_disabled = 171 [(cisco_field).name="IsReadDisabled"];
-    optional uint32 update_bytes_read = 172 [(cisco_field).name="UpdateBytesRead"];
-    optional string nsr_state = 173 [(cisco_field).name="NSRState"];
-    optional bool is_passive_close = 174 [(cisco_field).name="IsPassiveClose"];
-    optional bool nbr_enforce_first_as = 175 [(cisco_field).name="NbrEnforceFirstAS"];
-    optional uint32 active_bmp_servers = 176 [(cisco_field).name="ActiveBMPServers"];
-    optional uint32 nbr_cluster_id = 177 [(cisco_field).name="NbrClusterID"];
-    optional uint32 nbr_in_cluster = 178 [(cisco_field).name="NbrInCluster"];
-    optional bool ignore_connected = 179 [(cisco_field).name="IgnoreConnected"];
-    optional bool internal_vpn_client = 180 [(cisco_field).name="InternalVPNClient"];
-    optional bool io_armed = 181 [(cisco_field).name="IoArmed"];
-    optional bool read_armed = 182 [(cisco_field).name="ReadArmed"];
-    optional bool write_armed = 183 [(cisco_field).name="WriteArmed"];
-    optional bgp_nbr_msg_stats message_statistics = 184 [(cisco_field).name="MessageStatistics"];
-    optional uint32 discard_data_bytes = 185 [(cisco_field).name="DiscardDataBytes"];
-    optional bool local_as_replace_as = 186 [(cisco_field).name="LocalASReplaceAS"];
-    optional bool local_as_dual_as = 187 [(cisco_field).name="LocalASDualAS"];
-    optional bool local_as_dual_as_mode_native = 188 [(cisco_field).name="LocalASDualASModeNative"];
-    optional bool egress_peer_engineering_enabled = 189 [(cisco_field).name="EgressPeerEngineeringEnabled"];
-    optional bgp_timespec tcp_init_sync_time_spec = 190 [(cisco_field).name="TCPInitSyncTimeSpec"];
-    optional bgp_timespec tcp_init_sync_phase_two_time_spec = 191 [(cisco_field).name="TCPInitSyncPhaseTwoTimeSpec"];
-    optional bgp_timespec tcp_init_sync_done_time_spec = 192 [(cisco_field).name="TCPInitSyncDoneTimeSpec"];
-    optional uint32 discard_as4_path = 193 [(cisco_field).name="DiscardAS4Path"];
-    optional bool rpki_disable = 194 [(cisco_field).name="RPKIDisable"];
-    optional bool rpki_use_validity = 195 [(cisco_field).name="RPKIUseValidity"];
-    optional bool rpki_allow_invalid = 196 [(cisco_field).name="RPKIAllowInvalid"];
-    optional bool rpki_signal_ibgp = 197 [(cisco_field).name="RPKISignalIBGP"];
-    optional bgp_nbr_gshut_ graceful_maintenance = 198 [(cisco_field).name="GracefulMaintenance"];
-}
-
-message bgp_timespec {
-    optional uint32 seconds = 1 [(cisco_field).name="Seconds"];
-    optional uint32 nanoseconds = 2 [(cisco_field).name="Nanoseconds"];
-}
-
-message IPV4TunnelAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message IPV4MDTAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message RTConstraintAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message IPV6AddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message bgp_l2vpn_addr_t {
-    optional bytes l2vpn_address = 1 [(cisco_field).name="l2vpn_address"];
-}
-
-message L2VPNEVPNAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message bgp_l2vpn_mspw_addr_t {
-    optional bytes l2vpn_address = 1 [(cisco_field).name="l2vpn_address"];
-}
-
-message IPV6MVPNAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message IPV4MVPNAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message LS_LSAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message IPv4FlowspecAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message IPv6FlowspecAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message bgp_addrtype {
-    optional string afi = 1 [(cisco_field).name="AFI"];
-    optional bytes ipv4_address = 2 [(cisco_field).name="IPV4Address"];
-    optional bytes ipv4_mcast_address = 3 [(cisco_field).name="IPV4McastAddress"];
-    optional bytes ipv4_label_address = 4 [(cisco_field).name="IPV4LabelAddress"];
-    optional IPV4TunnelAddressType ipv4_tunnel_address = 5 [(cisco_field).name="IPV4TunnelAddress"];
-    optional IPV4MDTAddressType ipv4_mdt_address = 6 [(cisco_field).name="IPV4MDTAddress"];
-    optional bytes ipv4_vpn_address = 7 [(cisco_field).name="IPV4VPNAddress"];
-    optional bytes ipv4_vpna_mcastddress = 8 [(cisco_field).name="IPV4VPNAMcastddress"];
-    optional IPV6AddressType ipv6_address = 9 [(cisco_field).name="IPV6Address"];
-    optional IPV6AddressType ipv6_mcast_address = 10 [(cisco_field).name="IPV6McastAddress"];
-    optional IPV6AddressType ipv6_label_address = 11 [(cisco_field).name="IPv6LabelAddress"];
-    optional IPV6AddressType ipv6_vpn_address = 12 [(cisco_field).name="IPV6VPNAddress"];
-    optional IPV6AddressType ipv6_vpn_mcast_address = 13 [(cisco_field).name="IPV6VPNMcastAddress"];
-    optional bgp_l2vpn_addr_t l2_vpnvpls_address = 14 [(cisco_field).name="L2VPNVPLSAddress"];
-    optional RTConstraintAddressType rt_constraint_address = 15 [(cisco_field).name="RTConstraintAddress"];
-    optional IPV6MVPNAddressType ipv6_mvpn_address = 16 [(cisco_field).name="IPV6MVPNAddress"];
-    optional IPV4MVPNAddressType ipv4_mvpn_address = 17 [(cisco_field).name="IPV4MVPNAddress"];
-    optional L2VPNEVPNAddressType l2_vpn_evpn_address = 18 [(cisco_field).name="L2VPN_EVPNAddress"];
-    optional LS_LSAddressType ls_ls_address = 19 [(cisco_field).name="LS_LSAddress"];
-    optional bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20 [(cisco_field).name="L2VPN_MSPWAddress"];
-    optional IPv4FlowspecAddressType ipv4_flowspec_address = 21 [(cisco_field).name="IPV4FlowspecAddress"];
-    optional IPv6FlowspecAddressType ipv6_flowspec_address = 22 [(cisco_field).name="IPV6FlowspecAddress"];
-    optional IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23 [(cisco_field).name="IPV4VPNFlowspecAddress"];
-    optional IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24 [(cisco_field).name="IPV6VPNFlowspecAddress"];
-}
-
-message bgp_perf_nbr_af_ {
-    optional uint32 sub_group_pending_message_count = 1 [(cisco_field).name="SubGroupPendingMessageCount"];
-    optional uint32 processed_messages = 2 [(cisco_field).name="ProcessedMessages"];
-    optional uint32 sent_messages = 3 [(cisco_field).name="SentMessages"];
-    optional uint32 split_horizon_update_transmit = 4 [(cisco_field).name="SplitHorizonUpdateTransmit"];
-    optional uint32 split_horizon_update_blocked = 5 [(cisco_field).name="SplitHorizonUpdateBlocked"];
-    optional uint32 split_horizon_withdraw_transmit = 6 [(cisco_field).name="SplitHorizonWithdrawTransmit"];
-    optional uint32 split_horizon_withdraw_blocked = 7 [(cisco_field).name="SplitHorizonWithdrawBlocked"];
-}
-
-message bgp_perf_nbr_ {
-    optional uint32 read_throttles = 1 [(cisco_field).name="ReadThrottles"];
-    optional uint32 low_throttled_read = 2 [(cisco_field).name="LowThrottledRead"];
-    optional uint32 high_throttled_read = 3 [(cisco_field).name="HighThrottledRead"];
-    optional uint32 time_since_last_throttled_read = 4 [(cisco_field).name="TimeSinceLastThrottledRead"];
-    optional uint32 read_calls_count = 5 [(cisco_field).name="ReadCallsCount"];
-    optional uint32 read_messages_count = 6 [(cisco_field).name="ReadMessagesCount"];
-    optional uint32 data_bytes_read = 7 [(cisco_field).name="DataBytesRead"];
-    optional uint32 io_read_time = 8 [(cisco_field).name="IOReadTime"];
-    optional uint32 write_calls_count = 9 [(cisco_field).name="WriteCallsCount"];
-    optional uint32 data_bytes_written = 10 [(cisco_field).name="DataBytesWritten"];
-    optional uint32 io_write_time = 11 [(cisco_field).name="IOWriteTime"];
-    optional uint32 last_sent_seq_no = 12 [(cisco_field).name="LastSentSeqNo"];
-    optional uint32 write_subgroup_calls_count = 13 [(cisco_field).name="WriteSubgroupCallsCount"];
-    optional uint32 write_subgroup_messages_count = 14 [(cisco_field).name="WriteSubgroupMessagesCount"];
-    optional uint32 subgroup_list_time = 15 [(cisco_field).name="SubgroupListTime"];
-    optional uint32 write_queue_calls_count = 16 [(cisco_field).name="WriteQueueCallsCount"];
-    optional uint32 write_queue_messages_count = 17 [(cisco_field).name="WriteQueueMessagesCount"];
-    optional uint32 write_queue_time = 18 [(cisco_field).name="WriteQueueTime"];
-    optional uint32 inbound_update_messages = 19 [(cisco_field).name="InboundUpdateMessages"];
-    optional uint32 inbound_update_messages_time = 20 [(cisco_field).name="InboundUpdateMessagesTime"];
-    optional uint32 maximum_read_size = 21 [(cisco_field).name="MaximumReadSize"];
-    optional uint32 actives = 22 [(cisco_field).name="Actives"];
-    optional uint32 failed_post_actives = 23 [(cisco_field).name="FailedPostActives"];
-    optional uint32 passives = 24 [(cisco_field).name="Passives"];
-    optional uint32 rejected_passives = 25 [(cisco_field).name="RejectedPassives"];
-    optional uint32 active_collision = 26 [(cisco_field).name="ActiveCollision"];
-    optional uint32 passive_collision = 27 [(cisco_field).name="PassiveCollision"];
-    optional uint32 control_to_read_thread_trigger = 28 [(cisco_field).name="ControlToReadThreadTrigger"];
-    optional uint32 control_to_write_thread_trigger = 29 [(cisco_field).name="ControlToWriteThreadTrigger"];
-    optional uint32 network_status = 30 [(cisco_field).name="NetworkStatus"];
-    optional uint32 reset_flags = 31 [(cisco_field).name="ResetFlags"];
-    optional uint32 nbr_flags = 32 [(cisco_field).name="NbrFlags"];
-    optional sint32 nbr_fd = 33 [(cisco_field).name="NbrFd"];
-    optional uint32 reset_retries = 34 [(cisco_field).name="ResetRetries"];
-    optional uint32 sync_flags = 35 [(cisco_field).name="SyncFlags"];
-    optional uint32 nsr_oper_down_count = 36 [(cisco_field).name="NSROperDownCount"];
-    optional uint32 last_nsr_scoped_sync = 37 [(cisco_field).name="LastNSRScopedSync"];
-}
-
-message bgp_nbr_gshut_ {
-    optional bool gshut_exists = 1 [(cisco_field).name="GshutExists"];
-    optional bool gshut_local_active = 2 [(cisco_field).name="GshutLocalActive"];
-    optional bool gshut_active = 3 [(cisco_field).name="GshutActive"];
-    optional bool gshut_locpref_set = 4 [(cisco_field).name="GshutLocprefSet"];
-    optional uint32 gshut_locpref = 5 [(cisco_field).name="GshutLocpref"];
-    optional uint32 gshut_prepends = 6 [(cisco_field).name="GshutPrepends"];
-}
-
-message bgp_nbr_af_ {
-    optional string af_name = 1 [(cisco_field).name="AFName"];
-    optional bool is_neighbor_route_reflector_client = 2 [(cisco_field).name="IsNeighborRouteReflectorClient"];
-    optional bool is_legacy_pe_rt = 3 [(cisco_field).name="IsLegacyPE_RT"];
-    optional bool is_neighbor_af_capable = 4 [(cisco_field).name="IsNeighborAFCapable"];
-    optional bool is_soft_reconfiguration_inbound_allowed = 5 [(cisco_field).name="IsSoftReconfigurationInboundAllowed"];
-    optional bool is_use_soft_reconfiguration_always_on = 6 [(cisco_field).name="IsUseSoftReconfigurationAlwaysOn"];
-    optional bool remove_private_as_from_updates = 7 [(cisco_field).name="RemovePrivateASFromUpdates"];
-    optional bool remove_private_as_entire_aspath_from_updates = 8 [(cisco_field).name="RemovePrivateASEntireAspathFromUpdates"];
-    optional bool remove_private_as_from_inbound_updates = 9 [(cisco_field).name="RemovePrivateASFromInboundUpdates"];
-    optional bool remove_private_as_entire_aspath_from_inbound_updates = 10 [(cisco_field).name="RemovePrivateASEntireAspathFromInboundUpdates"];
-    optional bool flowspec_validation_d_isable = 11 [(cisco_field).name="FlowspecValidationDIsable"];
-    optional bool flowspec_redirect_validation_d_isable = 12 [(cisco_field).name="FlowspecRedirectValidationDIsable"];
-    optional string orr_group_name = 13 [(cisco_field).name="OrrGroupName"];
-    optional uint32 orr_group_index = 14 [(cisco_field).name="OrrGroupIndex"];
-    optional bool is_orr_root_address_configured = 15 [(cisco_field).name="IsOrrRootAddressConfigured"];
-    optional bool advertise_afi = 16 [(cisco_field).name="AdvertiseAFI"];
-    optional bool advertise_afi_reorg = 17 [(cisco_field).name="AdvertiseAFIReorg"];
-    optional bool advertise_afi_local = 18 [(cisco_field).name="AdvertiseAFILocal"];
-    optional bool advertise_afi_disable = 19 [(cisco_field).name="AdvertiseAFIDisable"];
-    optional bool advertise_afi_eo_r_ready = 20 [(cisco_field).name="AdvertiseAFIEoRReady"];
-    optional bool always_use_next_hop_local = 21 [(cisco_field).name="AlwaysUseNextHopLocal"];
-    optional bool sent_community_to_neighbor = 22 [(cisco_field).name="SentCommunityToNeighbor"];
-    optional bool sent_gshut_community_to_neighbor = 23 [(cisco_field).name="SentGshutCommunityToNeighbor"];
-    optional bool sent_extended_community_to_neighbor = 24 [(cisco_field).name="SentExtendedCommunityToNeighbor"];
-    optional bool neighbor_default_originate = 25 [(cisco_field).name="NeighborDefaultOriginate"];
-    optional bool is_orf_sent = 26 [(cisco_field).name="IsORFSent"];
-    optional bool is_update_deferred = 27 [(cisco_field).name="IsUpdateDeferred"];
-    optional bool is_orf_send_scheduled = 28 [(cisco_field).name="IsORFSendScheduled"];
-    optional uint32 update_group_number = 29 [(cisco_field).name="UpdateGroupNumber"];
-    optional uint32 filter_group_index = 30 [(cisco_field).name="FilterGroupIndex"];
-    optional bool is_update_throttled = 31 [(cisco_field).name="IsUpdateThrottled"];
-    optional bool is_update_leaving = 32 [(cisco_field).name="IsUpdateLeaving"];
-    optional bool vpn_update_gen_enabled = 33 [(cisco_field).name="VPNUpdateGenEnabled"];
-    optional bool vpn_update_gen_trigger_enabled = 34 [(cisco_field).name="VPNUpdateGenTriggerEnabled"];
-    optional bool is_addpath_send_operational = 35 [(cisco_field).name="IsAddpathSendOperational"];
-    optional bool is_addpath_receive_operational = 36 [(cisco_field).name="IsAddpathReceiveOperational"];
-    optional uint32 neighbor_version = 37 [(cisco_field).name="NeighborVersion"];
-    optional uint32 weight = 38 [(cisco_field).name="Weight"];
-    optional uint32 max_prefix_limit = 39 [(cisco_field).name="MaxPrefixLimit"];
-    optional bool use_max_prefix_warning_only = 40 [(cisco_field).name="UseMaxPrefixWarningOnly"];
-    optional bool max_prefix_discard_extra_paths = 41 [(cisco_field).name="MaxPrefixDiscardExtraPaths"];
-    optional bool max_prefix_exceed_discard_paths = 42 [(cisco_field).name="MaxPrefixExceedDiscardPaths"];
-    optional uint32 max_prefix_threshold_percent = 43 [(cisco_field).name="MaxPrefixThresholdPercent"];
-    optional uint32 max_prefix_restart_time = 44 [(cisco_field).name="MaxPrefixRestartTime"];
-    optional uint32 prefixes_accepted = 45 [(cisco_field).name="PrefixesAccepted"];
-    optional uint32 prefixes_synced = 46 [(cisco_field).name="PrefixesSynced"];
-    optional uint32 prefixes_withdrawn = 47 [(cisco_field).name="PrefixesWithdrawn"];
-    optional uint32 prefixes_withdrawn_not_found = 48 [(cisco_field).name="PrefixesWithdrawnNotFound"];
-    optional uint32 prefixes_denied = 49 [(cisco_field).name="PrefixesDenied"];
-    optional uint32 prefixes_denied_no_policy = 50 [(cisco_field).name="PrefixesDeniedNoPolicy"];
-    optional uint32 prefixes_denied_rt_permit = 51 [(cisco_field).name="PrefixesDeniedRTPermit"];
-    optional uint32 prefixes_denied_orf_policy = 52 [(cisco_field).name="PrefixesDeniedORFPolicy"];
-    optional uint32 prefixes_denied_policy = 53 [(cisco_field).name="PrefixesDeniedPolicy"];
-    optional uint32 number_of_bestpaths = 54 [(cisco_field).name="NumberOfBestpaths"];
-    optional uint32 number_of_best_externalpaths = 55 [(cisco_field).name="NumberOfBestExternalpaths"];
-    optional uint32 prefixes_advertised = 56 [(cisco_field).name="PrefixesAdvertised"];
-    optional uint32 prefixes_be_advertised = 57 [(cisco_field).name="PrefixesBEAdvertised"];
-    optional uint32 prefixes_suppressed = 58 [(cisco_field).name="PrefixesSuppressed"];
-    optional uint32 prefixes_withrawn = 59 [(cisco_field).name="PrefixesWithrawn"];
-    optional bool is_peer_orf_capable = 60 [(cisco_field).name="IsPeerORFCapable"];
-    optional bool is_advertised_orf_send = 61 [(cisco_field).name="IsAdvertisedORFSend"];
-    optional bool is_received_orf_send_capable = 62 [(cisco_field).name="IsReceivedORFSendCapable"];
-    optional bool is_advertised_orf_receive = 63 [(cisco_field).name="IsAdvertisedORFReceive"];
-    optional bool is_received_orf_receive_capable = 64 [(cisco_field).name="IsReceivedORFReceiveCapable"];
-    optional bool is_advertised_graceful_restart = 65 [(cisco_field).name="IsAdvertisedGracefulRestart"];
-    optional bool is_graceful_restart_state_flag = 66 [(cisco_field).name="IsGracefulRestartStateFlag"];
-    optional bool is_received_graceful_restart_capable = 67 [(cisco_field).name="IsReceivedGracefulRestartCapable"];
-    optional bool is_add_path_send_capability_advertised = 68 [(cisco_field).name="IsAddPathSendCapabilityAdvertised"];
-    optional bool is_add_path_send_capability_received = 69 [(cisco_field).name="IsAddPathSendCapabilityReceived"];
-    optional bool is_add_path_receive_capability_advertised = 70 [(cisco_field).name="IsAddPathReceiveCapabilityAdvertised"];
-    optional bool is_add_path_receive_capability_received = 71 [(cisco_field).name="IsAddPathReceiveCapabilityReceived"];
-    optional uint32 restart_time = 72 [(cisco_field).name="RestartTime"];
-    optional uint32 local_restart_time = 73 [(cisco_field).name="LocalRestartTime"];
-    optional uint32 stale_path_timeout = 74 [(cisco_field).name="StalePathTimeout"];
-    optional uint32 rib_purge_timeout_value = 75 [(cisco_field).name="RIBPurgeTimeoutValue"];
-    optional bool neighbor_preserved_forwarding_state = 76 [(cisco_field).name="NeighborPreservedForwardingState"];
-    optional bool long_lived_graceful_restart_stale_time_configured = 77 [(cisco_field).name="LongLivedGracefulRestartStaleTimeConfigured"];
-    optional uint32 long_lived_graceful_restart_stale_time_sent = 78 [(cisco_field).name="LongLivedGracefulRestartStaleTimeSent"];
-    optional uint32 long_lived_graceful_restart_stale_time_accept = 79 [(cisco_field).name="LongLivedGracefulRestartStaleTimeAccept"];
-    optional bool long_lived_graceful_restart_capability_received = 80 [(cisco_field).name="LongLivedGracefulRestartCapabilityReceived"];
-    optional uint32 long_lived_graceful_restart_stale_time_received = 81 [(cisco_field).name="LongLivedGracefulRestartStaleTimeReceived"];
-    optional bool neighbor_preserved_long_lived_forwarding_state = 82 [(cisco_field).name="NeighborPreservedLongLivedForwardingState"];
-    optional bool neighbor_long_lived_graceful_restart_capable = 83 [(cisco_field).name="NeighborLongLivedGracefulRestartCapable"];
-    optional uint32 neighbor_long_lived_graceful_restart_time_remaining = 84 [(cisco_field).name="NeighborLongLivedGracefulRestartTimeRemaining"];
-    optional uint32 route_refreshes_received = 85 [(cisco_field).name="RouteRefreshesReceived"];
-    optional uint32 route_refreshes_sent = 86 [(cisco_field).name="RouteRefreshesSent"];
-    optional uint32 refresh_target_version = 87 [(cisco_field).name="RefreshTargetVersion"];
-    optional uint32 refresh_version = 88 [(cisco_field).name="RefreshVersion"];
-    optional uint32 refresh_acked_version = 89 [(cisco_field).name="RefreshAckedVersion"];
-    optional bool is_prefix_orf_present = 90 [(cisco_field).name="IsPrefixORFPresent"];
-    optional uint32 orf_entries_received = 91 [(cisco_field).name="ORFEntriesReceived"];
-    optional bool is_default_originate_sent = 92 [(cisco_field).name="IsDefaultOriginateSent"];
-    optional string route_policy_prefix_orf = 93 [(cisco_field).name="RoutePolicyPrefixORF"];
-    optional string route_policy_in = 94 [(cisco_field).name="RoutePolicyIn"];
-    optional string route_policy_out = 95 [(cisco_field).name="RoutePolicyOut"];
-    optional string route_policy_default_originate = 96 [(cisco_field).name="RoutePolicyDefaultOriginate"];
-    optional bool is_neighbor_ebgp_without_inbound_policy = 97 [(cisco_field).name="IsNeighborEBGPWithoutInboundPolicy"];
-    optional bool is_neighbor_ebgp_without_outbound_policy = 98 [(cisco_field).name="IsNeighborEBGPWithoutOutboundPolicy"];
-    optional bool is_as_override_set = 99 [(cisco_field).name="IsAsOverrideSet"];
-    optional bool is_allow_as_in_set = 100 [(cisco_field).name="IsAllowAsInSet"];
-    optional uint32 allow_as_in_count = 101 [(cisco_field).name="AllowAsInCount"];
-    optional uint32 address_family_long_lived_time = 102 [(cisco_field).name="AddressFamilyLongLivedTime"];
-    optional bool eo_r_received_in_read_only = 103 [(cisco_field).name="EoRReceivedInReadOnly"];
-    optional uint32 acked_version = 104 [(cisco_field).name="AckedVersion"];
-    optional uint32 synced_acked_version = 105 [(cisco_field).name="SyncedAckedVersion"];
-    optional uint32 outstanding_version = 106 [(cisco_field).name="OutstandingVersion"];
-    optional uint32 outstanding_version_max = 107 [(cisco_field).name="OutstandingVersionMax"];
-    optional bgp_perf_nbr_af_ neighbor_af_performance_statistics = 108 [(cisco_field).name="NeighborAFPerformanceStatistics"];
-    optional bool is_aigp_set = 109 [(cisco_field).name="IsAIGPSet"];
-    optional bool is_rt_present = 110 [(cisco_field).name="IsRTPresent"];
-    repeated uint32 extended_community = 111 [(cisco_field).name="ExtendedCommunity"];
-    optional bool is_rt_present_standby = 112 [(cisco_field).name="IsRTPresentStandby"];
-    repeated uint32 extended_community_standby = 113 [(cisco_field).name="ExtendedCommunityStandby"];
-    optional bool accept_own_enabled = 114 [(cisco_field).name="AcceptOwnEnabled"];
-    optional bool selective_multipath_eligible = 115 [(cisco_field).name="SelectiveMultipathEligible"];
-    optional bool afrpki_disable = 116 [(cisco_field).name="AFRPKIDisable"];
-    optional bool afrpki_use_validity = 117 [(cisco_field).name="AFRPKIUseValidity"];
-    optional bool afrpki_allow_invalid = 118 [(cisco_field).name="AFRPKIAllowInvalid"];
-    optional bool afrpki_signal_ibgp = 119 [(cisco_field).name="AFRPKISignalIBGP"];
-    optional bool is_advertise_permanent_network = 120 [(cisco_field).name="IsAdvertisePermanentNetwork"];
-    optional bool is_send_mcast_attr = 121 [(cisco_field).name="IsSendMcastAttr"];
-    optional bool import_stitching = 122 [(cisco_field).name="ImportStitching"];
-    optional bool import_reoriginate = 123 [(cisco_field).name="ImportReoriginate"];
-    optional bool import_reoriginate_stitching = 124 [(cisco_field).name="ImportReoriginateStitching"];
-    optional uint32 advertise_v4_flags = 125 [(cisco_field).name="AdvertiseV4Flags"];
-    optional uint32 advertise_v6_flags = 126 [(cisco_field).name="AdvertiseV6Flags"];
-}
-
-message nbr_af_p {
-    optional bgp_nbr_af_ value = 1 [(cisco_field).name="value"];
-}
-
-message bgp_notfntype_ {
-    optional uint32 time_since_last_notification = 1 [(cisco_field).name="TimeSinceLastNotification"];
-    optional uint32 notification_error_code = 2 [(cisco_field).name="NotificationErrorCode"];
-    optional uint32 notification_error_subcode = 3 [(cisco_field).name="NotificationErrorSubcode"];
-    repeated uint32 last_notification_data = 4 [(cisco_field).name="LastNotificationData"];
-}
-
-message bgp_nbr_msg_stats_unit {
-    optional uint32 count = 1 [(cisco_field).name="Count"];
-    optional bgp_timespec last_time_spec = 2 [(cisco_field).name="LastTimeSpec"];
-}
-
-message bgp_nbr_msg_stats_op {
-    optional bgp_nbr_msg_stats_unit tx = 1 [(cisco_field).name="Tx"];
-    optional bgp_nbr_msg_stats_unit rx = 2 [(cisco_field).name="Rx"];
-}
-
-message bgp_nbr_msg_stats {
-    optional bgp_nbr_msg_stats_op open = 1 [(cisco_field).name="Open"];
-    optional bgp_nbr_msg_stats_op notification = 2 [(cisco_field).name="Notification"];
-    optional bgp_nbr_msg_stats_op update = 3 [(cisco_field).name="Update"];
-    optional bgp_nbr_msg_stats_op keepalive = 4 [(cisco_field).name="Keepalive"];
-    optional bgp_nbr_msg_stats_op route_refresh = 5 [(cisco_field).name="RouteRefresh"];
-    optional bgp_nbr_msg_stats_op total = 6 [(cisco_field).name="Total"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"bgp_nbr_bag\", \"v_maj\": 30, \"version\": 1.0, \"bytecode\": \"$144={SpeakerID}C{Description}s{LocalAS}D{RemoteAS}D{HasInternalLink}b{IsExternalNeighborNotDirectlyConnected}b{MessagesReceived}D{MessagesSent}D{UpdateMessagesIn}D{UpdateMessagesOut}D{MessagesQueuedIn}D{MessagesQueuedOut}D{ConnectionEstablishedTime}D{ConnectionState}[bgp_conn_state_]e{PreviousConnectionState}D{ConnectionAdminStatus}D{OpenCheckErrorCode}[_bgp_open_check_err_]e{ConnectionLocalAddress}$60{IsLocalAddressConfigured}b{ConnectionLocalPort}D{ConnectionRemoteAddress}$60{ConnectionRemotePort}D{NeighborInterfaceHandle}D{ResetNotificationSent}b{IsAdministrativelyShutDown}b{IsNeighborMaxPrefixShutdown}b{IsOutOfMemoryShutdown}b{IsOutOfMemoryForcedUp}b{IsEBGPPeerASLeague}b{IsEBGPPeerCommonAdmin}b{TTLSecurityEnabled}b{Suppress4ByteAs}b{BFDSessionState}[bgp_bfd_state_]e{BFDSessionCreatedState}[bgp_bfd_state_]e{BFDSessionEnableMode}[bgp_bfd_enable_mode_]e{BFDMinintervalval}D{BFDMultiplierval}D{BfdStateTs}H{RouterID}N{NegotiatedProtocolVersion}I{EBGPTimeToLive}D{IsEBGPMultihopBGPMPLSForwardingDisabled}b{TCPMSS}D{MsgLogIn}D{MsgLogOut}D{NeighborLocalAS}D{LocalASNoPrepend}b{IsCapabilityNegotiationPerformed}b{IsRouteRefreshCapabilityReceived}b{IsRouteRefreshOldCapabilityReceived}b{IsGRAware}b{Is4ByteASCapabilityReceived}b{Is4ByteASCapabilitySent}b{MultiProtocolCapabilityReceived}b{HoldTime}I{KeepAliveTime}I{ConfiguredHoldTime}I{ConfiguredKeepalive}I{ConfiguredMinAccHoldTime}I{MinAdvertiseInterval}D{MinAdvertiseIntervalMsecs}D{MinOriginationInterval}I{ConnectRetryInterval}I{TimeSinceLastUpdate}D{TimeSinceLastRead}D{TimeSinceLastReadReset}D{TimeLastCB}H{TimeLastCBReset}D{TimeLastFB}H{CountLastWrite}D{TimeSinceLastWrite}D{AttemptedLastWriteBytes}D{ActualLastWriteBytes}D{TimeSinceSecondLastWrite}D{AttemptedSecondLastWriteBytes}D{ActualSecondLastWriteBytes}D{TimeSinceLastWriteReset}D{AttemptedLastWriteResetBytes}D{ActualLastWriteResetBytes}D{TimeSinceSecondLastWriteReset}D{AttemptedSecondLastWriteResetBytes}D{ActualSecondLastWriteResetBytes}D{LastWriteEvent}D{SecondLastWriteEvent}D{LastKAexpiryReset}D{SecondLastKAexpiryReset}D{LastKAnotsentReset}D{LastKAerrorReset}D{LastKAstartReset}D{SecondLastKAstartReset}D{ConnectionUpCount}D{ConnectionDownCount}D{TimeSinceConnectionLastDropped}D{ResetReason}[bgp_reset_reason_index_]e{PeerResetReason}[bgp_peer_reset_reason_index_]e{PeerErrorCode}D{LastNotifyErrorCode}C{LastNotifyErrorSubcode}C{SendNotificationInfo}$139{ReceivedNotificationInfo}$139{ErrorNotifiesReceived}D{ErrorNotifiesSent}D{RemoteASNumber}D{DMZLinkBandwidth}D{TOSType}C{TOSValue}C{PerformanceStatistics}$104{AFData}23A($138){TCPSessionOpenMode}[bgp_tcp_mode_type_]e{VRFName}s{StandbyRP}b{NSREnabled}b{GracefulRestartEnabledNbr}b{GrRestartTime}D{GrStalePathTime}D{FssnOffset}D{FpbsnOffset}D{LastAckdSeqNo}D{BytesWritten}D{BytesRead}D{SocketReadBytes}D{IsReadDisabled}b{UpdateBytesRead}D{NSRState}[bgp_sync_nbr_nsr_state_]e{IsPassiveClose}b{NbrEnforceFirstAS}b{ActiveBMPServers}C{NbrClusterID}D{NbrInCluster}C{IgnoreConnected}b{InternalVPNClient}b{IoArmed}b{ReadArmed}b{WriteArmed}b{MessageStatistics}$143{DiscardDataBytes}D{LocalASReplaceAS}b{LocalASDualAS}b{LocalASDualASModeNative}b{EgressPeerEngineeringEnabled}b{TCPInitSyncTimeSpec}$36{TCPInitSyncPhaseTwoTimeSpec}$36{TCPInitSyncDoneTimeSpec}$36{DiscardAS4Path}D{RPKIDisable}b{RPKIUseValidity}b{RPKIAllowInvalid}b{RPKISignalIBGP}b{GracefulMaintenance}$106;$36={Seconds}D{Nanoseconds}D;$41=6x%t;$42=12x%q;$43=12x%R;$44=16x%s;$49={l2vpn_address}4x;$52=29x%K;$53={l2vpn_address}20x;$55=52x%J;$56=28x%M;$57=1000x%Q;$58=4096x%G;$59=4096x%E;$60=?(<AFI,bgp_afi_>,0:{IPV4Address}N,1:{IPV4McastAddress}N,2:{IPV4LabelAddress}N,3:{IPV4TunnelAddress}$41,9:{IPV4MDTAddress}$42,4:{IPV4VPNAddress}N,16:{IPV4VPNAMcastddress}N,5:{IPV6Address}$44,6:{IPV6McastAddress}$44,7:{IPv6LabelAddress}$44,8:{IPV6VPNAddress}$44,17:{IPV6VPNMcastAddress}$44,10:{L2VPNVPLSAddress}$49,11:{RTConstraintAddress}$43,13:{IPV6MVPNAddress}$55,12:{IPV4MVPNAddress}$56,14:{L2VPN_EVPNAddress}$52,15:{LS_LSAddress}$57,22:{L2VPN_MSPWAddress}$53,18:{IPV4FlowspecAddress}$58,19:{IPV6FlowspecAddress}$59,20:{IPV4VPNFlowspecAddress}$58,21:{IPV6VPNFlowspecAddress}$59,23:v,24:v);$102={SubGroupPendingMessageCount}D{ProcessedMessages}D{SentMessages}D{SplitHorizonUpdateTransmit}D{SplitHorizonUpdateBlocked}D{SplitHorizonWithdrawTransmit}D{SplitHorizonWithdrawBlocked}D;$104={ReadThrottles}D{LowThrottledRead}D{HighThrottledRead}D{TimeSinceLastThrottledRead}D{ReadCallsCount}D{ReadMessagesCount}D{DataBytesRead}D{IOReadTime}D{WriteCallsCount}D{DataBytesWritten}D{IOWriteTime}D{LastSentSeqNo}D{WriteSubgroupCallsCount}D{WriteSubgroupMessagesCount}D{SubgroupListTime}D{WriteQueueCallsCount}D{WriteQueueMessagesCount}D{WriteQueueTime}D{InboundUpdateMessages}D{InboundUpdateMessagesTime}D{MaximumReadSize}D{Actives}D{FailedPostActives}D{Passives}D{RejectedPassives}D{ActiveCollision}D{PassiveCollision}D{ControlToReadThreadTrigger}D{ControlToWriteThreadTrigger}D{NetworkStatus}D{ResetFlags}D{NbrFlags}D{NbrFd}d{ResetRetries}C{SyncFlags}D{NSROperDownCount}D{LastNSRScopedSync}D;$106={GshutExists}b{GshutLocalActive}b{GshutActive}b{GshutLocprefSet}b{GshutLocpref}D{GshutPrepends}C;$136={AFName}[bgp_afi_]e{IsNeighborRouteReflectorClient}b{IsLegacyPE_RT}b{IsNeighborAFCapable}b{IsSoftReconfigurationInboundAllowed}b{IsUseSoftReconfigurationAlwaysOn}b{RemovePrivateASFromUpdates}b{RemovePrivateASEntireAspathFromUpdates}b{RemovePrivateASFromInboundUpdates}b{RemovePrivateASEntireAspathFromInboundUpdates}b{FlowspecValidationDIsable}b{FlowspecRedirectValidationDIsable}b{OrrGroupName}s{OrrGroupIndex}D{IsOrrRootAddressConfigured}b{AdvertiseAFI}b{AdvertiseAFIReorg}b{AdvertiseAFILocal}b{AdvertiseAFIDisable}b{AdvertiseAFIEoRReady}b{AlwaysUseNextHopLocal}b{SentCommunityToNeighbor}b{SentGshutCommunityToNeighbor}b{SentExtendedCommunityToNeighbor}b{NeighborDefaultOriginate}b{IsORFSent}b{IsUpdateDeferred}b{IsORFSendScheduled}b{UpdateGroupNumber}D{FilterGroupIndex}D{IsUpdateThrottled}b{IsUpdateLeaving}b{VPNUpdateGenEnabled}b{VPNUpdateGenTriggerEnabled}b{IsAddpathSendOperational}b{IsAddpathReceiveOperational}b{NeighborVersion}D{Weight}D{MaxPrefixLimit}D{UseMaxPrefixWarningOnly}b{MaxPrefixDiscardExtraPaths}b{MaxPrefixExceedDiscardPaths}b{MaxPrefixThresholdPercent}C{MaxPrefixRestartTime}I{PrefixesAccepted}D{PrefixesSynced}D{PrefixesWithdrawn}D{PrefixesWithdrawnNotFound}D{PrefixesDenied}D{PrefixesDeniedNoPolicy}D{PrefixesDeniedRTPermit}D{PrefixesDeniedORFPolicy}D{PrefixesDeniedPolicy}D{NumberOfBestpaths}D{NumberOfBestExternalpaths}D{PrefixesAdvertised}D{PrefixesBEAdvertised}D{PrefixesSuppressed}D{PrefixesWithrawn}D{IsPeerORFCapable}b{IsAdvertisedORFSend}b{IsReceivedORFSendCapable}b{IsAdvertisedORFReceive}b{IsReceivedORFReceiveCapable}b{IsAdvertisedGracefulRestart}b{IsGracefulRestartStateFlag}b{IsReceivedGracefulRestartCapable}b{IsAddPathSendCapabilityAdvertised}b{IsAddPathSendCapabilityReceived}b{IsAddPathReceiveCapabilityAdvertised}b{IsAddPathReceiveCapabilityReceived}b{RestartTime}D{LocalRestartTime}D{StalePathTimeout}D{RIBPurgeTimeoutValue}D{NeighborPreservedForwardingState}b{LongLivedGracefulRestartStaleTimeConfigured}b{LongLivedGracefulRestartStaleTimeSent}D{LongLivedGracefulRestartStaleTimeAccept}D{LongLivedGracefulRestartCapabilityReceived}b{LongLivedGracefulRestartStaleTimeReceived}D{NeighborPreservedLongLivedForwardingState}b{NeighborLongLivedGracefulRestartCapable}b{NeighborLongLivedGracefulRestartTimeRemaining}D{RouteRefreshesReceived}D{RouteRefreshesSent}D{RefreshTargetVersion}D{RefreshVersion}D{RefreshAckedVersion}D{IsPrefixORFPresent}b{ORFEntriesReceived}D{IsDefaultOriginateSent}b{RoutePolicyPrefixORF}s{RoutePolicyIn}s{RoutePolicyOut}s{RoutePolicyDefaultOriginate}s{IsNeighborEBGPWithoutInboundPolicy}b{IsNeighborEBGPWithoutOutboundPolicy}b{IsAsOverrideSet}b{IsAllowAsInSet}b{AllowAsInCount}D{AddressFamilyLongLivedTime}D{EoRReceivedInReadOnly}b{AckedVersion}D{SyncedAckedVersion}D{OutstandingVersion}D{OutstandingVersionMax}D{NeighborAFPerformanceStatistics}$102{IsAIGPSet}b{IsRTPresent}b{ExtendedCommunity}a(C){IsRTPresentStandby}b{ExtendedCommunityStandby}a(C){AcceptOwnEnabled}b{SelectiveMultipathEligible}b{AFRPKIDisable}b{AFRPKIUseValidity}b{AFRPKIAllowInvalid}b{AFRPKISignalIBGP}b{IsAdvertisePermanentNetwork}b{IsSendMcastAttr}b{ImportStitching}b{ImportReoriginate}b{ImportReoriginateStitching}b{AdvertiseV4Flags}D{AdvertiseV6Flags}D;$138=p($136);$139={TimeSinceLastNotification}D{NotificationErrorCode}C{NotificationErrorSubcode}C{LastNotificationData}a(C);$141={Count}D{LastTimeSpec}$36;$142={Tx}$141{Rx}$141;$143={Open}$142{Notification}$142{Update}$142{Keepalive}$142{RouteRefresh}$142{Total}$142;\", \"schema_names\": [[\"RootOper.BGP.Instance(InstanceName)\", \"\"], [\"RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor(NeighborAddress)\", \"\"]], \"subtypes\": {\"136\": \"bgp_nbr_af_\", \"138\": \"nbr_af_p\", \"139\": \"bgp_notfntype_\", \"141\": \"bgp_nbr_msg_stats_unit\", \"142\": \"bgp_nbr_msg_stats_op\", \"143\": \"bgp_nbr_msg_stats\", \"36\": \"bgp_timespec\", \"102\": \"bgp_perf_nbr_af_\", \"104\": \"bgp_perf_nbr_\", \"41\": \"IPV4TunnelAddressType\", \"42\": \"IPV4MDTAddressType\", \"43\": \"RTConstraintAddressType\", \"44\": \"IPV6AddressType\", \"49\": \"bgp_l2vpn_addr_t\", \"52\": \"L2VPNEVPNAddressType\", \"53\": \"bgp_l2vpn_mspw_addr_t\", \"55\": \"IPV6MVPNAddressType\", \"56\": \"IPV4MVPNAddressType\", \"57\": \"LS_LSAddressType\", \"58\": \"IPv4FlowspecAddressType\", \"59\": \"IPv6FlowspecAddressType\", \"60\": \"bgp_addrtype\", \"106\": \"bgp_nbr_gshut_\"}, \"enums\": {\"bgp_bfd_enable_mode_\": {\"0\": \"BGP_BFD_ENABLE_MODE_DISABLE\", \"1\": \"BGP_BFD_ENABLE_MODE_DEF\", \"2\": \"BGP_BFD_ENABLE_MODE_STRICT\"}, \"bgp_afi_\": {\"0\": \"IPv4\", \"1\": \"IPv4Multicast\", \"2\": \"IPv4Labeled\", \"3\": \"IPv4Tunnel\", \"4\": \"VPNv4\", \"5\": \"IPv6\", \"6\": \"IPv6Multicast\", \"7\": \"IPv6Labeled\", \"8\": \"VPNv6\", \"9\": \"IPv4MDT\", \"10\": \"L2VPN_VPLS\", \"11\": \"RTConstraint\", \"12\": \"IPv4MVPN\", \"13\": \"IPv6MVPN\", \"14\": \"L2VPN_EVPN\", \"15\": \"LS_LS\", \"16\": \"VPNv4Multicast\", \"17\": \"VPNv6Multicast\", \"18\": \"IPv4Flowspec\", \"19\": \"IPv6Flowspec\", \"20\": \"VPNv4Flowspec\", \"21\": \"VPNv6Flowspec\", \"22\": \"L2VPN_MSPW\", \"23\": \"NoAddressFamily\", \"24\": \"AllAddressFamilies\"}, \"bgp_tcp_mode_type_\": {\"0\": \"BGP_TCP_MODE_TYPE_EITHER\", \"1\": \"BGP_TCP_MODE_TYPE_ACTIVE_ONLY\", \"2\": \"BGP_TCP_MODE_TYPE_PASSIVE_ONLY\"}, \"bgp_bfd_state_\": {\"0\": \"BGP_BFD_STATE_NOT_CONFIGURED\", \"1\": \"BGP_BFD_STATE_ADMIN_DOWN\", \"2\": \"BGP_BFD_STATE_NOT_SUPPORTED\", \"3\": \"BGP_BFD_STATE_NOT_CREATED\", \"4\": \"BGP_BFD_STATE_CREATED\", \"5\": \"BGP_BFD_STATE_UP\", \"6\": \"BGP_BFD_STATE_DOWN\", \"7\": \"BGP_BFD_STATE_NBR_NOT_CONFIGURED\", \"8\": \"BGP_BFD_STATE_NONE\"}, \"bgp_sync_nbr_nsr_state_\": {\"0\": \"BGP_NBR_NSR_ST_NONE\", \"1\": \"BGP_NBR_NSR_ST_OPER_DOWN\", \"2\": \"BGP_NBR_NSR_ST_TCP_INIT_SYNC\", \"3\": \"BGP_NBR_NSR_ST_TCP_PHASE_TWO\", \"4\": \"BGP_NBR_NSR_ST_BGP_INIT_SYNC\", \"5\": \"BGP_NBR_NSR_ST_NSR_READY\"}, \"_bgp_open_check_err_\": {\"0\": \"None\", \"1\": \"NeighborDown\", \"2\": \"NoUpdateGroupSet\", \"3\": \"NoAFConfig\", \"4\": \"UpdateGroupPending\", \"5\": \"LowMemory\", \"6\": \"NeighborShutdown\", \"7\": \"EBGPNeighborRemote\", \"8\": \"UpdateSourceInterfaceNull\", \"9\": \"NoIPv6Address\", \"10\": \"FirstHopInterfaceNull\", \"11\": \"NoIPv6LLAddress\", \"12\": \"NoUpdateSourceConfig\", \"13\": \"NoRouterID\", \"14\": \"UpdateSourceInterfaceGetFailed\", \"15\": \"UpdateSourceInterfaceStateGetFailed\", \"16\": \"UpdateSourceInterfaceDown\", \"17\": \"UpdateSourceInterfaceLLGetFailed\", \"18\": \"UpdateSourceInterfaceAddressGetFailed\", \"19\": \"SourceAddressAFInvalid\", \"20\": \"NoUpdateSourceLLPeering\", \"21\": \"LocalAddressGetFailed\", \"22\": \"NoBestLocalAddress\", \"23\": \"NeighborAddressEqualsLocalAddress\", \"24\": \"NeighborClosing\", \"25\": \"NeighborPendingReset\", \"26\": \"OutInterfaceSetFailed\", \"27\": \"LocalAddressMismatch\", \"28\": \"NeighborActiveOnly\", \"29\": \"SocketInitFailed\", \"30\": \"SocketOperationFailed\", \"31\": \"LocalNeighbor\", \"32\": \"MultiHopNeighbor\"}, \"bgp_reset_reason_index_\": {\"0\": \"BGP_NONE\", \"1\": \"BGP_INIT\", \"2\": \"BGP_NOMEMORY\", \"3\": \"NOT_RECEIVED\", \"4\": \"NOT_SENT\", \"5\": \"CONN_COLLISION\", \"6\": \"PEER_CLOSED\", \"7\": \"MAX_PREFIX_EXCEEDED\", \"8\": \"INTERFACE_FLAP\", \"9\": \"NEIGHBOR_DELETED\", \"10\": \"ADMIN_SHUTDOWN\", \"11\": \"AF_ACTIVATED\", \"12\": \"AF_DEACTIVATED\", \"13\": \"PROTOCOL_ERROR\", \"14\": \"LISTEN_CLOSED\", \"15\": \"RIB_FAILED\", \"16\": \"USER_CLEAR\", \"17\": \"USER_CLEAR_GR\", \"18\": \"ROUTERID_CHANGED\", \"19\": \"REMOTEAS_CHANGED\", \"20\": \"ORF_CHANGED\", \"21\": \"RRCLIENT_CHANGED\", \"22\": \"LEGACY_PE_RT_CHANGED\", \"23\": \"SOFTRECONFIG_CHANGED\", \"24\": \"LOCALAS_CHANGED\", \"25\": \"LOW_MEMORY\", \"26\": \"BFD_DOWN\", \"27\": \"ALLOWAS_IN_CHANGED\", \"28\": \"CAP_4BYTEAS_CHANGED\", \"29\": \"TCP_OPER_DOWN\", \"30\": \"SCOPED_SYNC_RETRY\", \"31\": \"CLUSTERID_CHANGED\", \"32\": \"RR_DISABLE_CHANGED\", \"33\": \"AIGP_CHANGED\", \"34\": \"SIGNALLING_CHANGED\", \"35\": \"OPEN_CHECKS_FAILED\", \"36\": \"AO_CHANGED\", \"37\": \"LLGR_STALETIME_CHANGED\", \"38\": \"LLGR_CAPABLE_CHANGED\", \"39\": \"NBR_LOCAL_ADDR_CHANGED\", \"40\": \"INTERNAL_VPN_CLIENT_CHANGED\", \"41\": \"ADV_DISABLE_CHANGED\"}, \"bgp_conn_state_\": {\"0\": \"BGP_ST_DONTCARE\", \"1\": \"BGP_ST_IDLE\", \"2\": \"BGP_ST_CONNECT\", \"3\": \"BGP_ST_ACTIVE\", \"4\": \"BGP_ST_OPENSENT\", \"5\": \"BGP_ST_OPENCONFIRM\", \"6\": \"BGP_ST_ESTAB\", \"7\": \"BGP_ST_CLOSING\", \"8\": \"BGP_ST_CLOSINGSYNC\"}, \"bgp_peer_reset_reason_index_\": {\"1\": \"BGP_READ_REMOTE_CLOSED\", \"2\": \"BGP_READ_FAILED\", \"3\": \"BGP_WRITE_FAILED\", \"4\": \"BGP_SOCK_DISCONNECTED\", \"5\": \"BGP_SOCK_SELECT_FAILED\", \"6\": \"BGP_PEER_RESET_REASON_NONE\"}}, \"schema_path\": \"RootOper.BGP.Instance.InstanceActive.DefaultVRF.Neighbor\", \"v_min\": 7}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_datarate.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_datarate.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_datarate.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_datarate.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,71 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message statsdbag_datarate {
-    option (cisco_msg).schema_path = "RootOper.InfraStatistics.Interface.Latest.DataRate";
-
-    optional string interface_name = 1 [(cisco_field).path_element="RootOper.InfraStatistics.Interface(InterfaceName)"];
-    optional uint64 input_data_rate = 50 [(cisco_field).name="InputDataRate"];
-    optional uint64 input_packet_rate = 51 [(cisco_field).name="InputPacketRate"];
-    optional uint64 output_data_rate = 52 [(cisco_field).name="OutputDataRate"];
-    optional uint64 output_packet_rate = 53 [(cisco_field).name="OutputPacketRate"];
-    optional uint64 peak_input_data_rate = 54 [(cisco_field).name="PeakInputDataRate"];
-    optional uint64 peak_input_packet_rate = 55 [(cisco_field).name="PeakInputPacketRate"];
-    optional uint64 peak_output_data_rate = 56 [(cisco_field).name="PeakOutputDataRate"];
-    optional uint64 peak_output_packet_rate = 57 [(cisco_field).name="PeakOutputPacketRate"];
-    optional uint32 bandwidth = 58 [(cisco_field).name="Bandwidth"];
-    optional uint32 load_interval = 59 [(cisco_field).name="LoadInterval"];
-    optional uint32 output_load = 60 [(cisco_field).name="OutputLoad"];
-    optional uint32 input_load = 61 [(cisco_field).name="InputLoad"];
-    optional uint32 reliability = 62 [(cisco_field).name="Reliability"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"statsdbag_datarate\", \"v_maj\": 3, \"version\": 1.0, \"bytecode\": \"$4={InputDataRate}H{InputPacketRate}H{OutputDataRate}H{OutputPacketRate}H{PeakInputDataRate}H{PeakInputPacketRate}H{PeakOutputDataRate}H{PeakOutputPacketRate}H{Bandwidth}D{LoadInterval}D{OutputLoad}C{InputLoad}C{Reliability}C;\", \"schema_names\": [[\"RootOper.InfraStatistics.Interface(InterfaceName)\", \"\"]], \"subtypes\": {}, \"enums\": {}, \"schema_path\": \"RootOper.InfraStatistics.Interface.Latest.DataRate\", \"v_min\": 0}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_generic.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_generic.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_generic.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/infrastatistics_generic.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,94 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message ifstatsbag_generic {
-    option (cisco_msg).schema_path = "RootOper.InfraStatistics.Interface.Latest.GenericCounters";
-
-    optional string interface_name = 1 [(cisco_field).path_element="RootOper.InfraStatistics.Interface(InterfaceName)"];
-    optional uint64 packets_received = 50 [(cisco_field).name="PacketsReceived"];
-    optional uint64 bytes_received = 51 [(cisco_field).name="BytesReceived"];
-    optional uint64 packets_sent = 52 [(cisco_field).name="PacketsSent"];
-    optional uint64 bytes_sent = 53 [(cisco_field).name="BytesSent"];
-    optional uint64 multicast_packets_received = 54 [(cisco_field).name="MulticastPacketsReceived"];
-    optional uint64 broadcast_packets_received = 55 [(cisco_field).name="BroadcastPacketsReceived"];
-    optional uint64 multicast_packets_sent = 56 [(cisco_field).name="MulticastPacketsSent"];
-    optional uint64 broadcast_packets_sent = 57 [(cisco_field).name="BroadcastPacketsSent"];
-    optional uint32 output_drops = 58 [(cisco_field).name="OutputDrops"];
-    optional uint32 output_queue_drops = 59 [(cisco_field).name="OutputQueueDrops"];
-    optional uint32 input_drops = 60 [(cisco_field).name="InputDrops"];
-    optional uint32 input_queue_drops = 61 [(cisco_field).name="InputQueueDrops"];
-    optional uint32 runt_packets_received = 62 [(cisco_field).name="RuntPacketsReceived"];
-    optional uint32 giant_packets_received = 63 [(cisco_field).name="GiantPacketsReceived"];
-    optional uint32 throttled_packets_received = 64 [(cisco_field).name="ThrottledPacketsReceived"];
-    optional uint32 parity_packets_received = 65 [(cisco_field).name="ParityPacketsReceived"];
-    optional uint32 unknown_protocol_packets_received = 66 [(cisco_field).name="UnknownProtocolPacketsReceived"];
-    optional uint32 input_errors = 67 [(cisco_field).name="InputErrors"];
-    optional uint32 crc_errors = 68 [(cisco_field).name="CRCErrors"];
-    optional uint32 input_overruns = 69 [(cisco_field).name="InputOverruns"];
-    optional uint32 framing_errors_received = 70 [(cisco_field).name="FramingErrorsReceived"];
-    optional uint32 input_ignored_packets = 71 [(cisco_field).name="InputIgnoredPackets"];
-    optional uint32 input_aborts = 72 [(cisco_field).name="InputAborts"];
-    optional uint32 output_errors = 73 [(cisco_field).name="OutputErrors"];
-    optional uint32 output_underruns = 74 [(cisco_field).name="OutputUnderruns"];
-    optional uint32 output_buffer_failures = 75 [(cisco_field).name="OutputBufferFailures"];
-    optional uint32 output_buffers_swapped_out = 76 [(cisco_field).name="OutputBuffersSwappedOut"];
-    optional uint32 applique = 77 [(cisco_field).name="Applique"];
-    optional uint32 resets = 78 [(cisco_field).name="Resets"];
-    optional uint32 carrier_transitions = 79 [(cisco_field).name="CarrierTransitions"];
-    optional uint32 availability_flag = 80 [(cisco_field).name="AvailabilityFlag"];
-    optional uint32 last_data_time = 81 [(cisco_field).name="LastDataTime"];
-    optional uint32 seconds_since_last_clear_counters = 82 [(cisco_field).name="SecondsSinceLastClearCounters"];
-    optional uint32 last_discontinuity_time = 83 [(cisco_field).name="LastDiscontinuityTime"];
-    optional uint32 seconds_since_packet_received = 84 [(cisco_field).name="SecondsSincePacketReceived"];
-    optional uint32 seconds_since_packet_sent = 85 [(cisco_field).name="SecondsSincePacketSent"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"ifstatsbag_generic\", \"v_maj\": 3, \"version\": 1.0, \"bytecode\": \"$2={PacketsReceived}H{BytesReceived}H{PacketsSent}H{BytesSent}H{MulticastPacketsReceived}H{BroadcastPacketsReceived}H{MulticastPacketsSent}H{BroadcastPacketsSent}H{OutputDrops}D{OutputQueueDrops}D{InputDrops}D{InputQueueDrops}D{RuntPacketsReceived}D{GiantPacketsReceived}D{ThrottledPacketsReceived}D{ParityPacketsReceived}D{UnknownProtocolPacketsReceived}D{InputErrors}D{CRCErrors}D{InputOverruns}D{FramingErrorsReceived}D{InputIgnoredPackets}D{InputAborts}D{OutputErrors}D{OutputUnderruns}D{OutputBufferFailures}D{OutputBuffersSwappedOut}D{Applique}D{Resets}D{CarrierTransitions}D{AvailabilityFlag}D{LastDataTime}D{SecondsSinceLastClearCounters}D{LastDiscontinuityTime}D{SecondsSincePacketReceived}D{SecondsSincePacketSent}D;\", \"schema_names\": [[\"RootOper.InfraStatistics.Interface(InterfaceName)\", \"\"]], \"subtypes\": {}, \"enums\": {}, \"schema_path\": \"RootOper.InfraStatistics.Interface.Latest.GenericCounters\", \"v_min\": 0}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/interfaces.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/interfaces.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/interfaces.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/interfaces.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,605 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message im_cmd_info {
-    option (cisco_msg).schema_path = "RootOper.Interfaces.Interface";
-
-    optional string interface_name = 1 [(cisco_field).path_element="RootOper.Interfaces.Interface(InterfaceName)"];
-    optional uint32 interface_handle = 50 [(cisco_field).name="InterfaceHandle"];
-    optional uint32 interface_type = 51 [(cisco_field).name="InterfaceType"];
-    optional string hardware_type_string = 52 [(cisco_field).name="HardwareTypeString"];
-    optional string state = 53 [(cisco_field).name="State"];
-    optional string line_state = 54 [(cisco_field).name="LineState"];
-    optional uint32 encapsulation = 55 [(cisco_field).name="Encapsulation"];
-    optional string encapsulation_type_string = 56 [(cisco_field).name="EncapsulationTypeString"];
-    optional uint32 mtu = 57 [(cisco_field).name="MTU"];
-    optional bool is_l2_transport_enabled = 58 [(cisco_field).name="IsL2TransportEnabled"];
-    optional uint32 state_transition_count = 59 [(cisco_field).name="StateTransitionCount"];
-    optional uint32 last_state_transition_time = 60 [(cisco_field).name="LastStateTransitionTime"];
-    optional bool is_dampening_enabled = 61 [(cisco_field).name="IsDampeningEnabled"];
-    optional im_cmd_damp_st dampening_information = 62 [(cisco_field).name="DampeningInformation"];
-    optional uint32 speed = 63 [(cisco_field).name="Speed"];
-    optional uint32 crc_length = 64 [(cisco_field).name="CRCLength"];
-    optional bool is_scramble_enabled = 65 [(cisco_field).name="IsScrambleEnabled"];
-    optional string duplexity = 66 [(cisco_field).name="Duplexity"];
-    optional string media_type = 67 [(cisco_field).name="MediaType"];
-    optional string link_type = 68 [(cisco_field).name="LinkType"];
-    optional string in_flow_control = 69 [(cisco_field).name="InFlowControl"];
-    optional string out_flow_control = 70 [(cisco_field).name="OutFlowControl"];
-    optional im_cmd_mac_addr_st mac_address = 71 [(cisco_field).name="MACAddress"];
-    optional im_cmd_mac_addr_st burned_in_address = 72 [(cisco_field).name="BurnedInAddress"];
-    optional im_cmd_carrier_delay_st carrier_delay = 73 [(cisco_field).name="CarrierDelay"];
-    optional uint32 bandwidth = 74 [(cisco_field).name="Bandwidth"];
-    optional uint32 max_bandwidth = 75 [(cisco_field).name="MaxBandwidth"];
-    optional uint32 keepalive = 76 [(cisco_field).name="Keepalive"];
-    optional bool is_l2_looped = 77 [(cisco_field).name="IsL2Looped"];
-    optional uint32 parent_interface_name = 78 [(cisco_field).name="ParentInterfaceName"];
-    optional string loopback_configuration = 79 [(cisco_field).name="LoopbackConfiguration"];
-    optional string description = 80 [(cisco_field).name="Description"];
-    optional im_cmd_arp_info_st arp_information = 81 [(cisco_field).name="ARPInformation"];
-    optional im_cmd_ip_info_st ip_information = 82 [(cisco_field).name="IPInformation"];
-    optional bool is_maintenance_enabled = 83 [(cisco_field).name="IsMaintenanceEnabled"];
-    optional bool is_data_inverted = 84 [(cisco_field).name="IsDataInverted"];
-    optional string transport_mode = 85 [(cisco_field).name="TransportMode"];
-    optional im_cmd_encaps_info encapsulation_information = 86 [(cisco_field).name="EncapsulationInformation"];
-    optional im_cmd_intf_type_info interface_type_information = 87 [(cisco_field).name="InterfaceTypeInformation"];
-    optional statsdbag_datarate data_rates = 88 [(cisco_field).name="DataRates"];
-    optional im_cmd_if_stats interface_statistics = 89 [(cisco_field).name="InterfaceStatistics"];
-    optional stats_data l2_interface_statistics = 90 [(cisco_field).name="L2InterfaceStatistics"];
-    optional nv_optical_interface_info nv_optical = 91 [(cisco_field).name="NVOptical"];
-}
-
-message ifstatsbag_generic {
-    optional uint64 packets_received = 1 [(cisco_field).name="PacketsReceived"];
-    optional uint64 bytes_received = 2 [(cisco_field).name="BytesReceived"];
-    optional uint64 packets_sent = 3 [(cisco_field).name="PacketsSent"];
-    optional uint64 bytes_sent = 4 [(cisco_field).name="BytesSent"];
-    optional uint64 multicast_packets_received = 5 [(cisco_field).name="MulticastPacketsReceived"];
-    optional uint64 broadcast_packets_received = 6 [(cisco_field).name="BroadcastPacketsReceived"];
-    optional uint64 multicast_packets_sent = 7 [(cisco_field).name="MulticastPacketsSent"];
-    optional uint64 broadcast_packets_sent = 8 [(cisco_field).name="BroadcastPacketsSent"];
-    optional uint32 output_drops = 9 [(cisco_field).name="OutputDrops"];
-    optional uint32 output_queue_drops = 10 [(cisco_field).name="OutputQueueDrops"];
-    optional uint32 input_drops = 11 [(cisco_field).name="InputDrops"];
-    optional uint32 input_queue_drops = 12 [(cisco_field).name="InputQueueDrops"];
-    optional uint32 runt_packets_received = 13 [(cisco_field).name="RuntPacketsReceived"];
-    optional uint32 giant_packets_received = 14 [(cisco_field).name="GiantPacketsReceived"];
-    optional uint32 throttled_packets_received = 15 [(cisco_field).name="ThrottledPacketsReceived"];
-    optional uint32 parity_packets_received = 16 [(cisco_field).name="ParityPacketsReceived"];
-    optional uint32 unknown_protocol_packets_received = 17 [(cisco_field).name="UnknownProtocolPacketsReceived"];
-    optional uint32 input_errors = 18 [(cisco_field).name="InputErrors"];
-    optional uint32 crc_errors = 19 [(cisco_field).name="CRCErrors"];
-    optional uint32 input_overruns = 20 [(cisco_field).name="InputOverruns"];
-    optional uint32 framing_errors_received = 21 [(cisco_field).name="FramingErrorsReceived"];
-    optional uint32 input_ignored_packets = 22 [(cisco_field).name="InputIgnoredPackets"];
-    optional uint32 input_aborts = 23 [(cisco_field).name="InputAborts"];
-    optional uint32 output_errors = 24 [(cisco_field).name="OutputErrors"];
-    optional uint32 output_underruns = 25 [(cisco_field).name="OutputUnderruns"];
-    optional uint32 output_buffer_failures = 26 [(cisco_field).name="OutputBufferFailures"];
-    optional uint32 output_buffers_swapped_out = 27 [(cisco_field).name="OutputBuffersSwappedOut"];
-    optional uint32 applique = 28 [(cisco_field).name="Applique"];
-    optional uint32 resets = 29 [(cisco_field).name="Resets"];
-    optional uint32 carrier_transitions = 30 [(cisco_field).name="CarrierTransitions"];
-    optional uint32 availability_flag = 31 [(cisco_field).name="AvailabilityFlag"];
-    optional uint32 last_data_time = 32 [(cisco_field).name="LastDataTime"];
-    optional uint32 seconds_since_last_clear_counters = 33 [(cisco_field).name="SecondsSinceLastClearCounters"];
-    optional uint32 last_discontinuity_time = 34 [(cisco_field).name="LastDiscontinuityTime"];
-    optional uint32 seconds_since_packet_received = 35 [(cisco_field).name="SecondsSincePacketReceived"];
-    optional uint32 seconds_since_packet_sent = 36 [(cisco_field).name="SecondsSincePacketSent"];
-}
-
-message ifstatsbag_basic {
-    optional uint64 packets_received = 1 [(cisco_field).name="PacketsReceived"];
-    optional uint64 bytes_received = 2 [(cisco_field).name="BytesReceived"];
-    optional uint64 packets_sent = 3 [(cisco_field).name="PacketsSent"];
-    optional uint64 bytes_sent = 4 [(cisco_field).name="BytesSent"];
-    optional uint32 input_drops = 5 [(cisco_field).name="InputDrops"];
-    optional uint32 input_queue_drops = 6 [(cisco_field).name="InputQueueDrops"];
-    optional uint32 input_errors = 7 [(cisco_field).name="InputErrors"];
-    optional uint32 unknown_protocol_packets_received = 8 [(cisco_field).name="UnknownProtocolPacketsReceived"];
-    optional uint32 output_drops = 9 [(cisco_field).name="OutputDrops"];
-    optional uint32 output_queue_drops = 10 [(cisco_field).name="OutputQueueDrops"];
-    optional uint32 output_errors = 11 [(cisco_field).name="OutputErrors"];
-    optional uint32 last_data_time = 12 [(cisco_field).name="LastDataTime"];
-    optional uint32 seconds_since_last_clear_counters = 13 [(cisco_field).name="SecondsSinceLastClearCounters"];
-    optional uint32 last_discontinuity_time = 14 [(cisco_field).name="LastDiscontinuityTime"];
-    optional uint32 seconds_since_packet_received = 15 [(cisco_field).name="SecondsSincePacketReceived"];
-    optional uint32 seconds_since_packet_sent = 16 [(cisco_field).name="SecondsSincePacketSent"];
-}
-
-message statsdbag_datarate {
-    optional uint64 input_data_rate = 1 [(cisco_field).name="InputDataRate"];
-    optional uint64 input_packet_rate = 2 [(cisco_field).name="InputPacketRate"];
-    optional uint64 output_data_rate = 3 [(cisco_field).name="OutputDataRate"];
-    optional uint64 output_packet_rate = 4 [(cisco_field).name="OutputPacketRate"];
-    optional uint64 peak_input_data_rate = 5 [(cisco_field).name="PeakInputDataRate"];
-    optional uint64 peak_input_packet_rate = 6 [(cisco_field).name="PeakInputPacketRate"];
-    optional uint64 peak_output_data_rate = 7 [(cisco_field).name="PeakOutputDataRate"];
-    optional uint64 peak_output_packet_rate = 8 [(cisco_field).name="PeakOutputPacketRate"];
-    optional uint32 bandwidth = 9 [(cisco_field).name="Bandwidth"];
-    optional uint32 load_interval = 10 [(cisco_field).name="LoadInterval"];
-    optional uint32 output_load = 11 [(cisco_field).name="OutputLoad"];
-    optional uint32 input_load = 12 [(cisco_field).name="InputLoad"];
-    optional uint32 reliability = 13 [(cisco_field).name="Reliability"];
-}
-
-message ifstats_srp_per_side_errors_st {
-    optional uint32 error_packets_received = 1 [(cisco_field).name="ErrorPacketsReceived"];
-    optional uint32 crc_errors = 2 [(cisco_field).name="CRCErrors"];
-    optional uint32 input_insufficient_resource_events = 3 [(cisco_field).name="InputInsufficientResourceEvents"];
-    optional uint32 mac_aborts_received = 4 [(cisco_field).name="MACAbortsReceived"];
-    optional uint32 mac_runt_packets_received = 5 [(cisco_field).name="MACRuntPacketsReceived"];
-    optional uint32 mac_giant_packets_received = 6 [(cisco_field).name="MACGiantPacketsReceived"];
-    optional uint32 framer_runt_packets_received = 7 [(cisco_field).name="FramerRuntPacketsReceived"];
-    optional uint32 framer_giant_packets_received = 8 [(cisco_field).name="FramerGiantPacketsReceived"];
-    optional uint32 framer_aborts_received = 9 [(cisco_field).name="FramerAbortsReceived"];
-}
-
-message ifstats_srp_per_side_data_rate_st {
-    optional uint32 bit_rate_sent = 1 [(cisco_field).name="BitRateSent"];
-    optional uint32 packet_rate_sent = 2 [(cisco_field).name="PacketRateSent"];
-    optional uint32 bit_rate_received = 3 [(cisco_field).name="BitRateReceived"];
-    optional uint32 packet_rate_received = 4 [(cisco_field).name="PacketRateReceived"];
-}
-
-message ifstatsbag_srp {
-    optional uint32 data_rate_interval = 1 [(cisco_field).name="DataRateInterval"];
-    optional ifstats_srp_per_side_data_rate_st side_a_data_rate = 2 [(cisco_field).name="SideADataRate"];
-    optional ifstats_srp_per_side_data_rate_st side_b_data_rate = 3 [(cisco_field).name="SideBDataRate"];
-    optional ifstats_srp_per_side_errors_st side_a_errors = 4 [(cisco_field).name="SideAErrors"];
-    optional ifstats_srp_per_side_errors_st side_b_errors = 5 [(cisco_field).name="SideBErrors"];
-}
-
-message stats_bag_id_td {
-    optional string id_type = 1 [(cisco_field).name="id_type"];
-    optional uint32 unused = 2 [(cisco_field).name="Unused"];
-    optional uint32 interface_handle = 3 [(cisco_field).name="InterfaceHandle"];
-    optional uint32 node_id = 4 [(cisco_field).name="NodeID"];
-    optional uint32 feature_id = 5 [(cisco_field).name="Feature_ID"];
-    optional uint32 id = 6 [(cisco_field).name="ID"];
-}
-
-message stats_bag_block_st {
-    optional string type = 1 [(cisco_field).name="type"];
-    optional uint32 count = 2 [(cisco_field).name="count"];
-    optional bytes data = 3 [(cisco_field).name="data"];
-}
-
-message stats_bag_element_st {
-    optional bytes key = 1 [(cisco_field).name="key"];
-    repeated stats_bag_block_st block_array = 2 [(cisco_field).name="block_array"];
-}
-
-message stats_data {
-    optional uint32 stats_type = 1 [(cisco_field).name="stats_type"];
-    optional stats_bag_id_td stats_id = 2 [(cisco_field).name="stats_id"];
-    optional string contents = 3 [(cisco_field).name="contents"];
-    repeated stats_bag_block_st block_array = 4 [(cisco_field).name="block_array"];
-    repeated stats_bag_element_st element_array = 5 [(cisco_field).name="element_array"];
-}
-
-message ppp_show_int_ncp_info {
-    optional string ncp_state = 1 [(cisco_field).name="NCPState"];
-    optional string ncp_identifier = 2 [(cisco_field).name="NCPIdentifier"];
-}
-
-message ppp_show_int_info {
-    optional string lcp_state = 1 [(cisco_field).name="LCPState"];
-    optional sint32 is_loopback_detected = 2 [(cisco_field).name="IsLoopbackDetected"];
-    optional uint32 keepalive_period = 3 [(cisco_field).name="KeepalivePeriod"];
-    optional sint32 is_mp_bundle_member = 4 [(cisco_field).name="IsMPBundleMember"];
-    optional sint32 is_multilink_open = 5 [(cisco_field).name="IsMultilinkOpen"];
-    repeated ppp_show_int_ncp_info ncp_info_array = 6 [(cisco_field).name="NCPInfoArray"];
-}
-
-message bm_mbr_state_reason_data_type {
-    optional string reason_type = 1 [(cisco_field).name="ReasonType"];
-    optional string severity = 2 [(cisco_field).name="Severity"];
-}
-
-message bm_mac_addr_st {
-    optional bytes address = 1 [(cisco_field).name="Address"];
-}
-
-message bm_mux_data {
-    optional string mux_state = 1 [(cisco_field).name="MuxState"];
-    optional uint32 error = 2 [(cisco_field).name="Error"];
-    optional string member_mux_state_reason = 3 [(cisco_field).name="MemberMuxStateReason"];
-    optional bm_mbr_state_reason_data_type member_mux_state_reason_data = 4 [(cisco_field).name="MemberMuxStateReasonData"];
-    optional string member_state = 5 [(cisco_field).name="MemberState"];
-    optional string mux_state_reason = 6 [(cisco_field).name="MuxStateReason"];
-}
-
-message bm_member_data {
-    optional uint32 bandwidth = 1 [(cisco_field).name="Bandwidth"];
-    optional bm_mux_data member_mux_data = 2 [(cisco_field).name="MemberMuxData"];
-    optional uint32 port_priority = 3 [(cisco_field).name="PortPriority"];
-    optional uint32 port_number = 4 [(cisco_field).name="PortNumber"];
-    optional uint32 underlying_link_id = 5 [(cisco_field).name="UnderlyingLinkID"];
-    optional uint32 link_order_number = 6 [(cisco_field).name="LinkOrderNumber"];
-    optional uint32 interface_name = 7 [(cisco_field).name="InterfaceName"];
-    optional uint32 iccp_node = 8 [(cisco_field).name="ICCPNode"];
-    optional string member_type = 9 [(cisco_field).name="MemberType"];
-    optional string member_name = 10 [(cisco_field).name="MemberName"];
-    optional bm_mac_addr_st mac_address = 11 [(cisco_field).name="MACAddress"];
-}
-
-message vlan_double_tag_stack {
-    optional uint32 outer_tag = 1 [(cisco_field).name="OuterTag"];
-    optional uint32 second_tag = 2 [(cisco_field).name="SecondTag"];
-}
-
-message efp_range {
-    optional uint32 vlan_id_low = 1 [(cisco_field).name="VLAN_ID_Low"];
-    optional uint32 vlan_id_high = 2 [(cisco_field).name="VLAN_ID_High"];
-}
-
-message efp_tag_match {
-    optional string ethertype = 1 [(cisco_field).name="Ethertype"];
-    repeated efp_range vlan_ranges = 2 [(cisco_field).name="VLANRanges"];
-    optional string priority = 3 [(cisco_field).name="Priority"];
-}
-
-message efp_vlan_tag {
-    optional string ethertype = 1 [(cisco_field).name="Ethertype"];
-    optional uint32 vlan_id = 2 [(cisco_field).name="VLAN_ID"];
-}
-
-message efp_tag_local_traffic_stack {
-    repeated efp_vlan_tag local_traffic_tags = 1 [(cisco_field).name="LocalTrafficTags"];
-}
-
-message MacAddressType {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message efp_description {
-    repeated efp_tag_match tags_to_match = 1 [(cisco_field).name="TagsToMatch"];
-    optional string payload_ethertype = 2 [(cisco_field).name="PayloadEthertype"];
-    optional uint32 tags_popped = 3 [(cisco_field).name="TagsPopped"];
-    repeated efp_vlan_tag pushes = 4 [(cisco_field).name="Pushes"];
-    optional efp_tag_local_traffic_stack local_traffic_stack = 5 [(cisco_field).name="LocalTrafficStack"];
-    optional sint32 is_exact_match = 6 [(cisco_field).name="IsExactMatch"];
-    optional sint32 is_native_vlan = 7 [(cisco_field).name="IsNativeVLAN"];
-    optional sint32 is_native_preserving = 8 [(cisco_field).name="IsNativePreserving"];
-    optional MacAddressType source_mac_match = 9 [(cisco_field).name="SourceMACMatch"];
-    optional MacAddressType destination_mac_match = 10 [(cisco_field).name="DestinationMACMatch"];
-}
-
-message efp_description_p_type {
-    optional efp_description value = 1 [(cisco_field).name="value"];
-}
-
-message vlan_tag_stack_type {
-    optional string vlan_encapsulation = 1 [(cisco_field).name="VLANEncapsulation"];
-    optional uint32 tag = 2 [(cisco_field).name="Tag"];
-    optional vlan_double_tag_stack stack = 3 [(cisco_field).name="Stack"];
-    optional uint32 outer_tag = 4 [(cisco_field).name="OuterTag"];
-    optional uint32 native_tag = 5 [(cisco_field).name="NativeTag"];
-    optional uint32 dot1ad_tag = 6 [(cisco_field).name="Dot1adTag"];
-    optional uint32 dot1ad_native_tag = 7 [(cisco_field).name="Dot1adNativeTag"];
-    optional efp_description_p_type service_instance_details = 8 [(cisco_field).name="ServiceInstanceDetails"];
-    optional vlan_double_tag_stack dot1ad_dot1q_stack = 9 [(cisco_field).name="Dot1adDot1qStack"];
-    optional uint32 dot1ad_outer_tag = 10 [(cisco_field).name="Dot1adOuterTag"];
-}
-
-message vlan_intf_generic {
-    optional vlan_tag_stack_type encapsulation_details = 1 [(cisco_field).name="EncapsulationDetails"];
-}
-
-message srp_topology_node_data {
-    optional uint32 hop_count = 1 [(cisco_field).name="HopCount"];
-    optional string mac_address = 2 [(cisco_field).name="MACAddress"];
-    optional bytes ipv4_address = 3 [(cisco_field).name="IPv4Address"];
-    optional sint32 is_wrapped = 4 [(cisco_field).name="IsWrapped"];
-    optional sint32 is_srr_supported = 5 [(cisco_field).name="IsSRRSupported"];
-    optional string node_name = 6 [(cisco_field).name="NodeName"];
-}
-
-message srp_topology_map {
-    optional uint32 topology_timer = 1 [(cisco_field).name="TopologyTimer"];
-    optional uint32 next_topology_packet_delay = 2 [(cisco_field).name="NextTopologyPacketDelay"];
-    optional uint32 time_since_last_topology_packet_received = 3 [(cisco_field).name="TimeSinceLastTopologyPacketReceived"];
-    optional uint32 time_since_last_topology_change = 4 [(cisco_field).name="TimeSinceLastTopologyChange"];
-    optional uint32 number_of_nodes_on_ring = 5 [(cisco_field).name="NumberOfNodesOnRing"];
-    repeated srp_topology_node_data ring_node_list = 6 [(cisco_field).name="RingNodeList"];
-}
-
-message srp_topology_info {
-    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
-    repeated srp_topology_map local_information = 2 [(cisco_field).name="LocalInformation"];
-}
-
-message srp_failure_info {
-    optional string type = 1 [(cisco_field).name="type"];
-    optional string reported_state = 2 [(cisco_field).name="ReportedState"];
-    optional string debounced_state = 3 [(cisco_field).name="DebouncedState"];
-    optional string current_state = 4 [(cisco_field).name="CurrentState"];
-    optional uint64 stable_time = 5 [(cisco_field).name="StableTime"];
-    optional uint32 debounced_delay = 6 [(cisco_field).name="DebouncedDelay"];
-}
-
-message srp_ips_side_detail {
-    optional string mac_address = 1 [(cisco_field).name="MACAddress"];
-    optional string wrap_state = 2 [(cisco_field).name="WrapState"];
-    optional uint32 packet_sent_timer = 3 [(cisco_field).name="PacketSentTimer"];
-    optional uint32 send_timer_time_remaining = 4 [(cisco_field).name="SendTimerTimeRemaining"];
-    optional uint32 wtr_timer_remaining = 5 [(cisco_field).name="WTRTimerRemaining"];
-    optional string self_detected_request = 6 [(cisco_field).name="SelfDetectedRequest"];
-    optional string remote_request = 7 [(cisco_field).name="RemoteRequest"];
-    repeated srp_failure_info asserted_failures = 8 [(cisco_field).name="AssertedFailures"];
-    optional string rx_neighbor_mac_address = 9 [(cisco_field).name="RXNeighborMACAddress"];
-    optional string rx_message_type = 10 [(cisco_field).name="RXMessageType"];
-    optional string rx_path_type = 11 [(cisco_field).name="RXPathType"];
-    optional uint32 rx_ttl = 12 [(cisco_field).name="RX_TTL"];
-    optional sint32 rx_packet_test = 13 [(cisco_field).name="RXPacketTest"];
-    optional string tx_neighbor_mac_address = 14 [(cisco_field).name="TXNeighborMACAddress"];
-    optional string tx_message_type = 15 [(cisco_field).name="TXMessageType"];
-    optional string tx_path_type = 16 [(cisco_field).name="TXPathType"];
-    optional uint32 tx_ttl = 17 [(cisco_field).name="TX_TTL"];
-    optional sint32 tx_packet_test = 18 [(cisco_field).name="TXPacketTest"];
-    optional uint32 delay_keep_alive_trigger = 19 [(cisco_field).name="DelayKeepAliveTrigger"];
-}
-
-message srp_ips_detail {
-    optional string mac_address = 1 [(cisco_field).name="MACAddress"];
-    optional sint32 is_inter_card_bus_enabled = 2 [(cisco_field).name="IsInterCardBusEnabled"];
-    optional uint32 wtr_timer_period = 3 [(cisco_field).name="WTRTimerPeriod"];
-    optional srp_ips_side_detail side_a = 4 [(cisco_field).name="SideA"];
-    optional srp_ips_side_detail side_b = 5 [(cisco_field).name="SideB"];
-}
-
-message srp_ips_info {
-    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
-    repeated srp_ips_detail local_information = 2 [(cisco_field).name="LocalInformation"];
-}
-
-message srr_node_data {
-    optional string node_name = 1 [(cisco_field).name="NodeName"];
-    optional sint32 srr_entry_exits = 2 [(cisco_field).name="SRREntryExits"];
-    optional string mac_address = 3 [(cisco_field).name="MACAddress"];
-    optional string outer_failure = 4 [(cisco_field).name="OuterFailure"];
-    optional string inner_failure = 5 [(cisco_field).name="InnerFailure"];
-    optional sint32 is_last_announce_received = 6 [(cisco_field).name="IsLastAnnounceReceived"];
-    optional uint32 last_announce_received_time = 7 [(cisco_field).name="LastAnnounceReceivedTime"];
-}
-
-message srp_srr_detail {
-    optional uint32 version_number = 1 [(cisco_field).name="VersionNumber"];
-    optional sint32 is_wrong_version_received = 2 [(cisco_field).name="IsWrongVersionReceived"];
-    optional uint32 last_wrong_version_receive_time = 3 [(cisco_field).name="LastWrongVersionReceiveTime"];
-    optional string mac_address = 4 [(cisco_field).name="MACAddress"];
-    optional string node_state = 5 [(cisco_field).name="NodeState"];
-    optional sint32 is_outer_ring_in_use = 6 [(cisco_field).name="IsOuterRingInUse"];
-    optional sint32 is_inner_ring_in_use = 7 [(cisco_field).name="IsInnerRingInUse"];
-    optional sint32 is_announce = 8 [(cisco_field).name="IsAnnounce"];
-    optional string outer_fail_type = 9 [(cisco_field).name="OuterFailType"];
-    optional string inner_fail_type = 10 [(cisco_field).name="InnerFailType"];
-    optional uint32 packet_send_timer = 11 [(cisco_field).name="PacketSendTimer"];
-    optional uint32 next_srr_packet_send_time = 12 [(cisco_field).name="NextSRRPacketSendTime"];
-    optional uint32 single_ring_bw = 13 [(cisco_field).name="SingleRingBW"];
-    optional uint32 wtr_time = 14 [(cisco_field).name="WTRTime"];
-    optional uint32 wtr_timer_remaining_outer_ring = 15 [(cisco_field).name="WTRTimerRemainingOuterRing"];
-    optional uint32 wtr_timer_remaining_inner_ring = 16 [(cisco_field).name="WTRTimerRemainingInnerRing"];
-    repeated srr_node_data nodes_on_ring = 17 [(cisco_field).name="NodesOnRing"];
-    repeated srr_node_data nodes_not_on_ring = 18 [(cisco_field).name="NodesNotOnRing"];
-}
-
-message srp_srr_info {
-    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
-    optional sint32 is_srr_enabled = 2 [(cisco_field).name="IsSRREnabled"];
-    repeated srp_srr_detail srr_detailed_info = 3 [(cisco_field).name="SRRDetailedInfo"];
-}
-
-message srp_rate_limit_detail {
-    optional uint32 min_priority_value = 1 [(cisco_field).name="MinPriorityValue"];
-}
-
-message srp_rate_limit_info {
-    optional sint32 is_admin_down = 1 [(cisco_field).name="IsAdminDown"];
-    repeated srp_rate_limit_detail rate_limit_detailed_info = 2 [(cisco_field).name="RateLimitDetailedInfo"];
-}
-
-message srp_all_info {
-    optional srp_ips_info ips_info = 1 [(cisco_field).name="IPSInfo"];
-    optional srp_topology_info topology_info = 2 [(cisco_field).name="TopologyInfo"];
-    optional srp_srr_info srr_info = 3 [(cisco_field).name="SRRInfo"];
-    optional srp_rate_limit_info rate_limit_info = 4 [(cisco_field).name="RateLimitInfo"];
-}
-
-message tunl_pfi_in6_addr_t {
-    optional bytes value = 1 [(cisco_field).name="value"];
-}
-
-message pfi_ip_addr_union {
-    optional string afi = 1 [(cisco_field).name="AFI"];
-    optional bytes ipv4 = 2 [(cisco_field).name="IPV4"];
-    optional tunl_pfi_in6_addr_t ipv6 = 3 [(cisco_field).name="IPV6"];
-}
-
-message im_cmd_tunl_gre_info {
-    optional string source_name = 1 [(cisco_field).name="SourceName"];
-    optional pfi_ip_addr_union source_ip_address = 2 [(cisco_field).name="SourceIPAddress"];
-    optional pfi_ip_addr_union destination_ip_address = 3 [(cisco_field).name="DestinationIPAddress"];
-    optional uint32 tunnel_tos = 4 [(cisco_field).name="TunnelTOS"];
-    optional uint32 tunnel_ttl = 5 [(cisco_field).name="TunnelTTL"];
-    optional uint32 key = 6 [(cisco_field).name="Key"];
-    optional uint32 keepalive_period = 7 [(cisco_field).name="KeepalivePeriod"];
-    optional uint32 keepalive_maximum_retry = 8 [(cisco_field).name="KeepaliveMaximumRetry"];
-    optional string tunnel_mode = 9 [(cisco_field).name="TunnelMode"];
-    optional string keepalive_state = 10 [(cisco_field).name="KeepaliveState"];
-    optional string df_bit_state = 11 [(cisco_field).name="DFBitState"];
-    optional string key_bit_state = 12 [(cisco_field).name="KeyBitState"];
-}
-
-message serial_interface {
-    optional string timeslots = 1 [(cisco_field).name="Timeslots"];
-}
-
-message im_sonet_pos_info_interface {
-    optional string aps_state = 1 [(cisco_field).name="APSState"];
-}
-
-message pwhe_ether_interface_info {
-    optional string interface_list_name = 1 [(cisco_field).name="InterfaceListName"];
-    optional uint32 l2_overhead = 2 [(cisco_field).name="L2Overhead"];
-    optional uint32 internal_label = 3 [(cisco_field).name="InternalLabel"];
-}
-
-message cem_interface {
-    optional string timeslots = 1 [(cisco_field).name="Timeslots"];
-    optional uint32 payload = 2 [(cisco_field).name="Payload"];
-    optional uint32 dejitter_buffer = 3 [(cisco_field).name="DejitterBuffer"];
-    optional sint32 framing = 4 [(cisco_field).name="Framing"];
-}
-
-message nv_optical_interface_info {
-    optional string controller = 1 [(cisco_field).name="Controller"];
-}
-
-message im_cmd_gcc_per_port_info {
-    optional string derived_mode = 1 [(cisco_field).name="DerivedMode"];
-    optional string sec_state = 2 [(cisco_field).name="SecState"];
-}
-
-message im_cmd_damp_st {
-    optional uint32 penalty = 1 [(cisco_field).name="Penalty"];
-    optional bool is_suppressed_enabled = 2 [(cisco_field).name="IsSuppressedEnabled"];
-    optional uint32 seconds_remaining = 3 [(cisco_field).name="SecondsRemaining"];
-    optional uint32 half_life = 4 [(cisco_field).name="HalfLife"];
-    optional uint32 reuse_threshold = 5 [(cisco_field).name="ReuseThreshold"];
-    optional uint32 suppress_threshold = 6 [(cisco_field).name="SuppressThreshold"];
-    optional uint32 maximum_suppress_time = 7 [(cisco_field).name="MaximumSuppressTime"];
-    optional uint32 restart_penalty = 8 [(cisco_field).name="RestartPenalty"];
-}
-
-message im_cmd_arp_info_st {
-    optional uint32 arp_timeout = 1 [(cisco_field).name="ARPTimeout"];
-    optional string arp_type_name = 2 [(cisco_field).name="ARPTypeName"];
-    optional bool arp_is_learning_disabled = 3 [(cisco_field).name="ARPIsLearningDisabled"];
-}
-
-message im_cmd_ip_info_st {
-    optional bytes ip_address = 1 [(cisco_field).name="IPAddress"];
-    optional uint32 subnet_mask_length = 2 [(cisco_field).name="SubnetMaskLength"];
-}
-
-message im_cmd_mac_addr_st {
-    optional bytes address = 1 [(cisco_field).name="Address"];
-}
-
-message im_cmd_if_stats {
-    optional string stats_type = 1 [(cisco_field).name="StatsType"];
-    optional ifstatsbag_generic full_interface_stats = 2 [(cisco_field).name="FullInterfaceStats"];
-    optional ifstatsbag_basic basic_interface_stats = 3 [(cisco_field).name="BasicInterfaceStats"];
-}
-
-message im_cmd_carrier_delay_st {
-    optional uint32 carrier_delay_up = 1 [(cisco_field).name="CarrierDelayUp"];
-    optional uint32 carrier_delay_down = 2 [(cisco_field).name="CarrierDelayDown"];
-}
-
-message im_cmd_fr_info {
-    optional string fr_encapsulation_type = 1 [(cisco_field).name="FREncapsulationType"];
-    optional string lmi_type = 2 [(cisco_field).name="LMIType"];
-    optional uint32 lmidlci = 3 [(cisco_field).name="LMIDLCI"];
-    optional bool is_nni = 4 [(cisco_field).name="IsNNI"];
-    optional bool is_dte = 5 [(cisco_field).name="IsDTE"];
-    optional bool is_lmi_up = 6 [(cisco_field).name="IsLMIUp"];
-    optional bool is_lmi_nni_dce_up = 7 [(cisco_field).name="IsLMI_NNI_DCEUp"];
-    optional bool is_lmi_enabled = 8 [(cisco_field).name="IsLMIEnabled"];
-    optional uint32 enquiries_received = 9 [(cisco_field).name="EnquiriesReceived"];
-    optional uint32 enquiries_sent = 10 [(cisco_field).name="EnquiriesSent"];
-    optional uint32 status_received = 11 [(cisco_field).name="StatusReceived"];
-    optional uint32 status_sent = 12 [(cisco_field).name="StatusSent"];
-    optional uint32 update_status_received = 13 [(cisco_field).name="UpdateStatusReceived"];
-    optional uint32 update_status_sent = 14 [(cisco_field).name="UpdateStatusSent"];
-}
-
-message im_cmd_encaps_info {
-    optional string encapsulation_type = 1 [(cisco_field).name="EncapsulationType"];
-    optional im_cmd_fr_info frame_relay_information = 2 [(cisco_field).name="FrameRelayInformation"];
-    optional vlan_intf_generic dot1_q_information = 3 [(cisco_field).name="DOT1QInformation"];
-    optional ppp_show_int_info ppp_information = 4 [(cisco_field).name="PPPInformation"];
-}
-
-message im_cmd_srp_info {
-    optional srp_all_info srp_information = 1 [(cisco_field).name="SRPInformation"];
-    optional ifstatsbag_srp srp_statistics = 2 [(cisco_field).name="SRPStatistics"];
-}
-
-message im_cmd_tunnel_info {
-    optional string source_name = 1 [(cisco_field).name="SourceName"];
-    optional bytes source_ipv4_address = 2 [(cisco_field).name="SourceIPv4Address"];
-    optional bytes destination_ipv4_address = 3 [(cisco_field).name="DestinationIPv4Address"];
-    optional string tunnel_type = 4 [(cisco_field).name="TunnelType"];
-    optional uint32 key = 5 [(cisco_field).name="Key"];
-    optional uint32 ttl = 6 [(cisco_field).name="TTL"];
-}
-
-message im_cmd_bundle_info {
-    repeated bm_member_data member_list = 1 [(cisco_field).name="MemberList"];
-}
-
-message im_cmd_intf_type_info {
-    optional string interface_type_info = 1 [(cisco_field).name="InterfaceTypeInfo"];
-    optional im_cmd_srp_info srp_information = 2 [(cisco_field).name="SRPInformation"];
-    optional im_cmd_tunnel_info tunnel_information = 3 [(cisco_field).name="TunnelInformation"];
-    optional im_cmd_bundle_info bundle_information = 4 [(cisco_field).name="BundleInformation"];
-    optional serial_interface serial_information = 5 [(cisco_field).name="SerialInformation"];
-    optional im_sonet_pos_info_interface sonet_pos_information = 6 [(cisco_field).name="SonetPOSInformation"];
-    optional im_cmd_tunl_gre_info tunnel_gre_information = 7 [(cisco_field).name="TunnelGREInformation"];
-    optional pwhe_ether_interface_info pseudowire_head_end_information = 8 [(cisco_field).name="PseudowireHeadEndInformation"];
-    optional cem_interface cem_information = 9 [(cisco_field).name="CEMInformation"];
-    optional im_cmd_gcc_per_port_info gcc_information = 10 [(cisco_field).name="GCCInformation"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"im_cmd_info\", \"v_maj\": 1, \"version\": 1.0, \"bytecode\": \"$268={InterfaceHandle}D%h{InterfaceType}I%i{HardwareTypeString}64s{State}[im_state_type_]e{LineState}[im_state_type_]e{Encapsulation}I%c{EncapsulationTypeString}32s{MTU}D{IsL2TransportEnabled}b{StateTransitionCount}D{LastStateTransitionTime}D{IsDampeningEnabled}b{DampeningInformation}p($256){Speed}p(D){CRCLength}p(D){IsScrambleEnabled}p(b){Duplexity}p([im_attr_duplex_enum]e){MediaType}p([im_attr_media_type_enum]e){LinkType}p([im_attr_link_type_enum]e){InFlowControl}p([im_attr_flow_control_enum]e){OutFlowControl}p([im_attr_flow_control_enum]e){MACAddress}p($259){BurnedInAddress}p($259){CarrierDelay}p($261){Bandwidth}D{MaxBandwidth}D{Keepalive}p(D){IsL2Looped}b{ParentInterfaceName}D%h{LoopbackConfiguration}p([im_cmd_loopback_enum]e){Description}s{ARPInformation}p($257){IPInformation}p($258){IsMaintenanceEnabled}p(b){IsDataInverted}p(b){TransportMode}p([im_attr_transport_mode_enum]e){EncapsulationInformation}p($263){InterfaceTypeInformation}p($267){DataRates}p($68){InterfaceStatistics}p($260){L2InterfaceStatistics}p($90){NVOptical}p($254);$66={PacketsReceived}H{BytesReceived}H{PacketsSent}H{BytesSent}H{MulticastPacketsReceived}H{BroadcastPacketsReceived}H{MulticastPacketsSent}H{BroadcastPacketsSent}H{OutputDrops}D{OutputQueueDrops}D{InputDrops}D{InputQueueDrops}D{RuntPacketsReceived}D{GiantPacketsReceived}D{ThrottledPacketsReceived}D{ParityPacketsReceived}D{UnknownProtocolPacketsReceived}D{InputErrors}D{CRCErrors}D{InputOverruns}D{FramingErrorsReceived}D{InputIgnoredPackets}D{InputAborts}D{OutputErrors}D{OutputUnderruns}D{OutputBufferFailures}D{OutputBuffersSwappedOut}D{Applique}D{Resets}D{CarrierTransitions}D{AvailabilityFlag}D{LastDataTime}D{SecondsSinceLastClearCounters}D{LastDiscontinuityTime}D{SecondsSincePacketReceived}D{SecondsSincePacketSent}D;$67={PacketsReceived}H{BytesReceived}H{PacketsSent}H{BytesSent}H{InputDrops}D{InputQueueDrops}D{InputErrors}D{UnknownProtocolPacketsReceived}D{OutputDrops}D{OutputQueueDrops}D{OutputErrors}D{LastDataTime}D{SecondsSinceLastClearCounters}D{LastDiscontinuityTime}D{SecondsSincePacketReceived}D{SecondsSincePacketSent}D;$68={InputDataRate}H{InputPacketRate}H{OutputDataRate}H{OutputPacketRate}H{PeakInputDataRate}H{PeakInputPacketRate}H{PeakOutputDataRate}H{PeakOutputPacketRate}H{Bandwidth}D{LoadInterval}D{OutputLoad}C{InputLoad}C{Reliability}C;$72={ErrorPacketsReceived}D{CRCErrors}D{InputInsufficientResourceEvents}D{MACAbortsReceived}D{MACRuntPacketsReceived}D{MACGiantPacketsReceived}D{FramerRuntPacketsReceived}D{FramerGiantPacketsReceived}D{FramerAbortsReceived}D;$74={valid}PD{tx_bit_rate_wrapped}PD{tx_pkt_rate_wrapped}PD{BitRateSent}D{PacketRateSent}D{BitRateReceived}D{PacketRateReceived}D;$76={DataRateInterval}D{SideADataRate}$74{SideBDataRate}$74{SideAErrors}$72{SideBErrors}$72;$83=?(<id_type,stats_id_type_enum>,0:{Unused}D,1:{InterfaceHandle}D%h,3:{NodeID}D%n,5:{Feature_ID}D,4:{ID}D);$86={type}[stats_counter_type_enum]e{count}D{data}y;$88={key}y{block_array}a($86);$90={stats_type}D{stats_id}$83{contents}[stats_type_contents_enum]e{block_array}a($86){element_array}a($88);$91={NCPState}[ppp_fsm_state_type]e{NCPIdentifier}[ncp_ident]e;$92={LCPState}[ppp_fsm_state_type]e{IsLoopbackDetected}d{KeepalivePeriod}D{IsMPBundleMember}d{IsMultilinkOpen}d{NCPInfoArray}a($91);$146={ReasonType}[bm_state_reason_target_type]e{Severity}[bm_severity_type]e;$147={Address}6x%m;$161={MuxState}[bm_muxstate]e{Error}D{MemberMuxStateReason}[bm_mbr_state_reason_type]e{MemberMuxStateReasonData}$146{MemberState}[bmd_member_state_enum]e{MuxStateReason}[bm_muxreason]e;$162={Bandwidth}D{MemberMuxData}$161{PortPriority}I{PortNumber}I{UnderlyingLinkID}I{LinkOrderNumber}I{InterfaceName}D%h{ICCPNode}D{MemberType}[bmd_member_type_enum]e{MemberName}s{MACAddress}p($147);$206={OuterTag}I{SecondTag}I;$207={VLAN_ID_Low}I{VLAN_ID_High}I;$209={Ethertype}[efp_tag_etype]e{VLANRanges}a($207){Priority}[efp_tag_priority]e;$211={Ethertype}[efp_tag_etype]e{VLAN_ID}I;$214={LocalTrafficTags}a($211);$216=6x%m;$217={TagsToMatch}a($209){PayloadEthertype}[efp_payload_etype]e{TagsPopped}I{Pushes}a($211){LocalTrafficStack}p($214){IsExactMatch}d{IsNativeVLAN}d{IsNativePreserving}d{SourceMACMatch}p($216){DestinationMACMatch}p($216);$219=p($217);$220=?(<VLANEncapsulation,vlan_encaps>,0:v,1:{Tag}I,2:{Stack}$206,3:{OuterTag}I,4:{NativeTag}I,5:{Dot1adTag}I,6:{Dot1adNativeTag}I,7:{ServiceInstanceDetails}$219,8:{Dot1adDot1qStack}$206,9:{Dot1adOuterTag}I);$221={EncapsulationDetails}$220;$222={HopCount}I{MACAddress}s{IPv4Address}N{IsWrapped}d{IsSRRSupported}d{NodeName}s;$223={TopologyTimer}D{NextTopologyPacketDelay}D{TimeSinceLastTopologyPacketReceived}D{TimeSinceLastTopologyChange}D{NumberOfNodesOnRing}I{RingNodeList}a($222);$224={IsAdminDown}d{LocalInformation}a($223);$225={type}[srp_mgmt_failure_et]e{ReportedState}[srp_mgmt_failure_state_et]e{DebouncedState}[srp_mgmt_failure_state_et]e{CurrentState}[srp_mgmt_failure_state_et]e{StableTime}H{DebouncedDelay}D;$226={MACAddress}s{WrapState}[srp_mgmt_ips_wrap_state]e{PacketSentTimer}D{SendTimerTimeRemaining}D{WTRTimerRemaining}D{SelfDetectedRequest}[srp_mgmt_ips_req_type]e{RemoteRequest}[srp_mgmt_ips_req_type]e{AssertedFailures}a($225){RXNeighborMACAddress}s{RXMessageType}[srp_mgmt_ips_req_type]e{RXPathType}[srp_mgmt_ips_path_ind]e{RX_TTL}D{RXPacketTest}d{TXNeighborMACAddress}s{TXMessageType}[srp_mgmt_ips_req_type]e{TXPathType}[srp_mgmt_ips_path_ind]e{TX_TTL}D{TXPacketTest}d{DelayKeepAliveTrigger}D;$227={MACAddress}s{IsInterCardBusEnabled}d{WTRTimerPeriod}D{SideA}$226{SideB}$226;$228={IsAdminDown}d{LocalInformation}a($227);$229={NodeName}s{SRREntryExits}d{MACAddress}s{OuterFailure}[srp_mgmt_srr_failure_type]e{InnerFailure}[srp_mgmt_srr_failure_type]e{IsLastAnnounceReceived}d{LastAnnounceReceivedTime}D;$230={VersionNumber}D{IsWrongVersionReceived}d{LastWrongVersionReceiveTime}D{MACAddress}s{NodeState}[srp_mgmt_srr_node_state]e{IsOuterRingInUse}d{IsInnerRingInUse}d{IsAnnounce}d{OuterFailType}[srp_mgmt_srr_failure_type]e{InnerFailType}[srp_mgmt_srr_failure_type]e{PacketSendTimer}D{NextSRRPacketSendTime}D{SingleRingBW}D{WTRTime}D{WTRTimerRemainingOuterRing}D{WTRTimerRemainingInnerRing}D{NodesOnRing}a($229){NodesNotOnRing}a($229);$231={IsAdminDown}d{IsSRREnabled}d{SRRDetailedInfo}a($230);$232={MinPriorityValue}I;$233={IsAdminDown}d{RateLimitDetailedInfo}a($232);$236={IPSInfo}$228{TopologyInfo}$224{SRRInfo}$231{RateLimitInfo}$233;$247=16x%s;$248=?(<AFI,tunl_pfi_af_id_type>,0:v,2:{IPV4}N,10:{IPV6}$247);$249={SourceName}s{SourceIPAddress}$248{DestinationIPAddress}$248{TunnelTOS}D{TunnelTTL}D{Key}D{KeepalivePeriod}I{KeepaliveMaximumRetry}C{TunnelMode}[TunnelGREMode]e{KeepaliveState}[TunnelKA_DFState]e{DFBitState}[TunnelKA_DFState]e{KeyBitState}[TunnelKeyState]e;$250={Timeslots}s;$251={APSState}[sonet_aps_et]e;$252={InterfaceListName}s{L2Overhead}D{InternalLabel}D;$253={Timeslots}s{Payload}I{DejitterBuffer}I{Framing}d;$254={Controller}s;$255={DerivedMode}[GCC_DER_STATE]e{SecState}[GCC_SEC_STATE]e;$256={Penalty}D{IsSuppressedEnabled}b{SecondsRemaining}D{HalfLife}D{ReuseThreshold}D{SuppressThreshold}D{MaximumSuppressTime}D{RestartPenalty}D;$257={ARPTimeout}D{ARPTypeName}s{ARPIsLearningDisabled}b;$258={IPAddress}N{SubnetMaskLength}D;$259={Address}6x%m;$260=?(<StatsType,im_cmd_stats_enum>,1:{FullInterfaceStats}$66,2:{BasicInterfaceStats}$67);$261={CarrierDelayUp}D{CarrierDelayDown}D;$262={FREncapsulationType}[im_cmd_fr_type_enum]e{LMIType}[im_cmd_lmi_type_enum]e{LMIDLCI}D{IsNNI}b{IsDTE}b{IsLMIUp}b{IsLMI_NNI_DCEUp}b{IsLMIEnabled}b{EnquiriesReceived}D{EnquiriesSent}D{StatusReceived}D{StatusSent}D{UpdateStatusReceived}D{UpdateStatusSent}D;$263=?(<EncapsulationType,im_cmd_encaps_enum>,0:{FrameRelayInformation}$262,1:{DOT1QInformation}$221,2:{PPPInformation}$92);$264={SRPInformation}p($236){SRPStatistics}p($76);$265={SourceName}s{SourceIPv4Address}N{DestinationIPv4Address}N{TunnelType}s{Key}p(D){TTL}p(D);$266={MemberList}a($162);$267=?(<InterfaceTypeInfo,im_cmd_intf_type_enum>,0:{SRPInformation}$264,1:{TunnelInformation}$265,2:{BundleInformation}$266,3:{SerialInformation}$250,4:{SonetPOSInformation}$251,5:{TunnelGREInformation}$249,6:{PseudowireHeadEndInformation}$252,7:{CEMInformation}$253,8:{GCCInformation}$255);\", \"schema_names\": [[\"RootOper.Interfaces.Interface(InterfaceName)\", \"\"]], \"subtypes\": {\"256\": \"im_cmd_damp_st\", \"257\": \"im_cmd_arp_info_st\", \"258\": \"im_cmd_ip_info_st\", \"259\": \"im_cmd_mac_addr_st\", \"260\": \"im_cmd_if_stats\", \"214\": \"efp_tag_local_traffic_stack\", \"262\": \"im_cmd_fr_info\", \"263\": \"im_cmd_encaps_info\", \"264\": \"im_cmd_srp_info\", \"265\": \"im_cmd_tunnel_info\", \"266\": \"im_cmd_bundle_info\", \"267\": \"im_cmd_intf_type_info\", \"88\": \"stats_bag_element_st\", \"146\": \"bm_mbr_state_reason_data_type\", \"147\": \"bm_mac_addr_st\", \"261\": \"im_cmd_carrier_delay_st\", \"161\": \"bm_mux_data\", \"162\": \"bm_member_data\", \"219\": \"efp_description_p_type\", \"220\": \"vlan_tag_stack_type\", \"66\": \"ifstatsbag_generic\", \"67\": \"ifstatsbag_basic\", \"68\": \"statsdbag_datarate\", \"72\": \"ifstats_srp_per_side_errors_st\", \"74\": \"ifstats_srp_per_side_data_rate_st\", \"76\": \"ifstatsbag_srp\", \"206\": \"vlan_double_tag_stack\", \"207\": \"efp_range\", \"209\": \"efp_tag_match\", \"211\": \"efp_vlan_tag\", \"86\": \"stats_bag_block_st\", \"216\": \"MacAddressType\", \"217\": \"efp_description\", \"90\": \"stats_data\", \"91\": \"ppp_show_int_ncp_info\", \"92\": \"ppp_show_int_info\", \"221\": \"vlan_intf_generic\", \"222\": \"srp_topology_node_data\", \"223\": \"srp_topology_map\", \"224\": \"srp_topology_info\", \"225\": \"srp_failure_info\", \"226\": \"srp_ips_side_detail\", \"227\": \"srp_ips_detail\", \"228\": \"srp_ips_info\", \"229\": \"srr_node_data\", \"230\": \"srp_srr_detail\", \"231\": \"srp_srr_info\", \"232\": \"srp_rate_limit_detail\", \"233\": \"srp_rate_limit_info\", \"236\": \"srp_all_info\", \"83\": \"stats_bag_id_td\", \"247\": \"tunl_pfi_in6_addr_t\", \"248\": \"pfi_ip_addr_union\", \"249\": \"im_cmd_tunl_gre_info\", \"250\": \"serial_interface\", \"251\": \"im_sonet_pos_info_interface\", \"252\": \"pwhe_ether_interface_info\", \"253\": \"cem_interface\", \"254\": \"nv_optical_interface_info\", \"255\": \"im_cmd_gcc_per_port_info\"}, \"enums\": {\"GCC_SEC_STATE\": {\"0\": \"Normal\", \"1\": \"Maintainance\", \"2\": \"AIS\"}, \"im_cmd_fr_type_enum\": {\"0\": \"FrameRelayCisco\", \"1\": \"FrameRelayIETF\"}, \"srp_mgmt_ips_wrap_state\": {\"0\": \"IdleWrapState\", \"1\": \"WrappedState\", \"2\": \"LockedOutWrapState\", \"3\": \"UnknownWrapState\"}, \"im_attr_media_type_enum\": {\"0\": \"IM_ATTR_MEDIA_OTHER\", \"1\": \"IM_ATTR_MEDIA_UNKNOWN\", \"2\": \"IM_ATTR_MEDIA_AUI\", \"3\": \"IM_ATTR_MEDIA_10BASE5\", \"4\": \"IM_ATTR_MEDIA_FOIRL\", \"5\": \"IM_ATTR_MEDIA_10BASE2\", \"6\": \"IM_ATTR_MEDIA_10BROAD36\", \"7\": \"IM_ATTR_MEDIA_10BASE_T\", \"8\": \"IM_ATTR_MEDIA_10BASE_THD\", \"9\": \"IM_ATTR_MEDIA_10BASE_TFD\", \"10\": \"IM_ATTR_MEDIA_10BASE_FP\", \"11\": \"IM_ATTR_MEDIA_10BASE_FB\", \"12\": \"IM_ATTR_MEDIA_10BASE_FL\", \"13\": \"IM_ATTR_MEDIA_10BASE_FLHD\", \"14\": \"IM_ATTR_MEDIA_10BASE_FLFD\", \"15\": \"IM_ATTR_MEDIA_100BASE_T4\", \"16\": \"IM_ATTR_MEDIA_100BASE_TX\", \"17\": \"IM_ATTR_MEDIA_100BASE_TXHD\", \"18\": \"IM_ATTR_MEDIA_100BASE_TXFD\", \"19\": \"IM_ATTR_MEDIA_100BASE_FX\", \"20\": \"IM_ATTR_MEDIA_100BASE_FXHD\", \"21\": \"IM_ATTR_MEDIA_100BASE_FXFD\", \"22\": \"IM_ATTR_MEDIA_100BASE_EX\", \"23\": \"IM_ATTR_MEDIA_100BASE_EXHD\", \"24\": \"IM_ATTR_MEDIA_100BASE_EXFD\", \"25\": \"IM_ATTR_MEDIA_100BASE_T2\", \"26\": \"IM_ATTR_MEDIA_100BASE_T2HD\", \"27\": \"IM_ATTR_MEDIA_100BASE_T2FD\", \"28\": \"IM_ATTR_MEDIA_1000BASE_X\", \"29\": \"IM_ATTR_MEDIA_1000BASE_XHDX\", \"30\": \"IM_ATTR_MEDIA_1000BASE_XFD\", \"31\": \"IM_ATTR_MEDIA_1000BASE_LX\", \"32\": \"IM_ATTR_MEDIA_1000BASE_LXHD\", \"33\": \"IM_ATTR_MEDIA_1000BASE_LXFDX\", \"34\": \"IM_ATTR_MEDIA_1000BASE_SX\", \"35\": \"IM_ATTR_MEDIA_1000BASE_SXHD\", \"36\": \"IM_ATTR_MEDIA_1000BASE_SXFD\", \"37\": \"IM_ATTR_MEDIA_1000BASE_CX\", \"38\": \"IM_ATTR_MEDIA_1000BASE_CXHDX\", \"39\": \"IM_ATTR_MEDIA_1000BASE_CXFD\", \"40\": \"IM_ATTR_MEDIA_1000BASE_T\", \"41\": \"IM_ATTR_MEDIA_1000BASE_THD\", \"42\": \"IM_ATTR_MEDIA_1000BASE_TFD\", \"43\": \"IM_ATTR_MEDIA_10GBASE_X\", \"44\": \"IM_ATTR_MEDIA_10GBASE_LX4\", \"45\": \"IM_ATTR_MEDIA_10GBASE_R\", \"46\": \"IM_ATTR_MEDIA_10GBASE_ER\", \"47\": \"IM_ATTR_MEDIA_10GBASE_LR\", \"48\": \"IM_ATTR_MEDIA_10GBASE_SR\", \"49\": \"IM_ATTR_MEDIA_10GBASE_W\", \"50\": \"IM_ATTR_MEDIA_10GBASE_EW\", \"51\": \"IM_ATTR_MEDIA_10GBASE_LW\", \"52\": \"IM_ATTR_MEDIA_10GBASE_SW\", \"53\": \"IM_ATTR_MEDIA_10GBASE_ZR\", \"54\": \"IM_ATTR_MEDIA_802_9A\", \"55\": \"IM_ATTR_MEDIA_RJ45\", \"56\": \"IM_ATTR_MEDIA_1000BASE_ZX\", \"57\": \"IM_ATTR_MEDIA_1000BASE_CWDM\", \"58\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1470\", \"59\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1490\", \"60\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1510\", \"61\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1530\", \"62\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1550\", \"63\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1570\", \"64\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1590\", \"65\": \"IM_ATTR_MEDIA_1000BASE_CWDM_1610\", \"66\": \"IM_ATTR_MEDIA_10GBASE_DWDM\", \"67\": \"IM_ATTR_MEDIA_100GBASE_LR4\", \"68\": \"IM_ATTR_MEDIA_1000BASE_DWDM\", \"69\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1533\", \"70\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1537\", \"71\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1541\", \"72\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1545\", \"73\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1549\", \"74\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1553\", \"75\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1557\", \"76\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1561\", \"77\": \"IM_ATTR_MEDIA_40GBASE_LR4\", \"78\": \"IM_ATTR_MEDIA_40GBASE_ER4\", \"79\": \"IM_ATTR_MEDIA_100GBASE_ER4\", \"80\": \"IM_ATTR_MEDIA_1000BASE_EX\", \"81\": \"IM_ATTR_MEDIA_1000BASE_BX10_D\", \"82\": \"IM_ATTR_MEDIA_1000BASE_BX10_U\", \"83\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1561_42\", \"84\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1560_61\", \"85\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1559_79\", \"86\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1558_98\", \"87\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1558_17\", \"88\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1557_36\", \"89\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1556_55\", \"90\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1555_75\", \"91\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1554_94\", \"92\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1554_13\", \"93\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1553_33\", \"94\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1552_52\", \"95\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1551_72\", \"96\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1550_92\", \"97\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1550_12\", \"98\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1549_32\", \"99\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1548_51\", \"100\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1547_72\", \"101\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1546_92\", \"102\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1546_12\", \"103\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1545_32\", \"104\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1544_53\", \"105\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1543_73\", \"106\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1542_94\", \"107\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1542_14\", \"108\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1541_35\", \"109\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1540_56\", \"110\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1539_77\", \"111\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1538_98\", \"112\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1538_19\", \"113\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1537_40\", \"114\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1536_61\", \"115\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1535_82\", \"116\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1535_04\", \"117\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1534_25\", \"118\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1533_47\", \"119\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1532_68\", \"120\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1531_90\", \"121\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1531_12\", \"122\": \"IM_ATTR_MEDIA_1000BASE_DWDM_1530_33\", \"123\": \"IM_ATTR_MEDIA_1000BASE_DWDM_TUNABLE\", \"124\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1561_42\", \"125\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1560_61\", \"126\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1559_79\", \"127\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1558_98\", \"128\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1558_17\", \"129\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1557_36\", \"130\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1556_55\", \"131\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1555_75\", \"132\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1554_94\", \"133\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1554_13\", \"134\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1553_33\", \"135\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1552_52\", \"136\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1551_72\", \"137\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1550_92\", \"138\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1550_12\", \"139\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1549_32\", \"140\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1548_51\", \"141\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1547_72\", \"142\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1546_92\", \"143\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1546_12\", \"144\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1545_32\", \"145\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1544_53\", \"146\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1543_73\", \"147\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1542_94\", \"148\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1542_14\", \"149\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1541_35\", \"150\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1540_56\", \"151\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1539_77\", \"152\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1538_98\", \"153\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1538_19\", \"154\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1537_40\", \"155\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1536_61\", \"156\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1535_82\", \"157\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1535_04\", \"158\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1534_25\", \"159\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1533_47\", \"160\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1532_68\", \"161\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1531_90\", \"162\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1531_12\", \"163\": \"IM_ATTR_MEDIA_10GBASE_DWDM_1530_33\", \"164\": \"IM_ATTR_MEDIA_10GBASE_DWDM_TUNABLE\", \"165\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1561_42\", \"166\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1560_61\", \"167\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1559_79\", \"168\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1558_98\", \"169\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1558_17\", \"170\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1557_36\", \"171\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1556_55\", \"172\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1555_75\", \"173\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1554_94\", \"174\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1554_13\", \"175\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1553_33\", \"176\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1552_52\", \"177\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1551_72\", \"178\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1550_92\", \"179\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1550_12\", \"180\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1549_32\", \"181\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1548_51\", \"182\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1547_72\", \"183\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1546_92\", \"184\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1546_12\", \"185\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1545_32\", \"186\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1544_53\", \"187\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1543_73\", \"188\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1542_94\", \"189\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1542_14\", \"190\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1541_35\", \"191\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1540_56\", \"192\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1539_77\", \"193\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1538_98\", \"194\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1538_19\", \"195\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1537_40\", \"196\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1536_61\", \"197\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1535_82\", \"198\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1535_04\", \"199\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1534_25\", \"200\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1533_47\", \"201\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1532_68\", \"202\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1531_90\", \"203\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1531_12\", \"204\": \"IM_ATTR_MEDIA_40GBASE_DWDM_1530_33\", \"205\": \"IM_ATTR_MEDIA_40GBASE_DWDM_TUNABLE\", \"206\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1561_42\", \"207\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1560_61\", \"208\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1559_79\", \"209\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1558_98\", \"210\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1558_17\", \"211\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1557_36\", \"212\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1556_55\", \"213\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1555_75\", \"214\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1554_94\", \"215\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1554_13\", \"216\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1553_33\", \"217\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1552_52\", \"218\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1551_72\", \"219\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1550_92\", \"220\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1550_12\", \"221\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1549_32\", \"222\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1548_51\", \"223\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1547_72\", \"224\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1546_92\", \"225\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1546_12\", \"226\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1545_32\", \"227\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1544_53\", \"228\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1543_73\", \"229\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1542_94\", \"230\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1542_14\", \"231\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1541_35\", \"232\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1540_56\", \"233\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1539_77\", \"234\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1538_98\", \"235\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1538_19\", \"236\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1537_40\", \"237\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1536_61\", \"238\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1535_82\", \"239\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1535_04\", \"240\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1534_25\", \"241\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1533_47\", \"242\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1532_68\", \"243\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1531_90\", \"244\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1531_12\", \"245\": \"IM_ATTR_MEDIA_100GBASE_DWDM_1530_33\", \"246\": \"IM_ATTR_MEDIA_100GBASE_DWDM_TUNABLE\", \"247\": \"IM_ATTR_MEDIA_40GBASE_KR4\", \"248\": \"IM_ATTR_MEDIA_40GBASE_CR4\", \"249\": \"IM_ATTR_MEDIA_40GBASE_SR4\", \"250\": \"IM_ATTR_MEDIA_40GBASE_FR\", \"251\": \"IM_ATTR_MEDIA_100GBASE_CR10\", \"252\": \"IM_ATTR_MEDIA_100GBASE_SR10\", \"253\": \"IM_ATTR_MEDIA_40GBASE_CSR4\", \"254\": \"IM_ATTR_MEDIA_10GBASE_CWDM\", \"255\": \"IM_ATTR_MEDIA_10GBASE_CWDM_TUNABLE\", \"256\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1470\", \"257\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1490\", \"258\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1510\", \"259\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1530\", \"260\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1550\", \"261\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1570\", \"262\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1590\", \"263\": \"IM_ATTR_MEDIA_10GBASE_CWDM_1610\", \"264\": \"IM_ATTR_MEDIA_40GBASE_CWDM\", \"265\": \"IM_ATTR_MEDIA_40GBASE_CWDM_TUNABLE\", \"266\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1470\", \"267\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1490\", \"268\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1510\", \"269\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1530\", \"270\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1550\", \"271\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1570\", \"272\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1590\", \"273\": \"IM_ATTR_MEDIA_40GBASE_CWDM_1610\", \"274\": \"IM_ATTR_MEDIA_100GBASE_CWDM\", \"275\": \"IM_ATTR_MEDIA_100GBASE_CWDM_TUNABLE\", \"276\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1470\", \"277\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1490\", \"278\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1510\", \"279\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1530\", \"280\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1550\", \"281\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1570\", \"282\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1590\", \"283\": \"IM_ATTR_MEDIA_100GBASE_CWDM_1610\", \"284\": \"IM_ATTR_MEDIA_40GBASE_ELPB\", \"285\": \"IM_ATTR_MEDIA_100GBASE_ELPB\", \"286\": \"IM_ATTR_MEDIA_100GBASE_LR10\", \"287\": \"IM_ATTR_MEDIA_40GBASE_T\", \"288\": \"IM_ATTR_MEDIA_100GBASE_KP4\", \"289\": \"IM_ATTR_MEDIA_100GBASE_KR4\", \"290\": \"IM_ATTR_MEDIA_10GBASE_LRM\", \"291\": \"IM_ATTR_MEDIA_10GBASE_CX4\", \"292\": \"IM_ATTR_MEDIA_10GBASE_T\", \"293\": \"IM_ATTR_MEDIA_10GBASE_KX4\", \"294\": \"IM_ATTR_MEDIA_10GBASE_KR\", \"295\": \"IM_ATTR_MEDIA_10GBASE_PR\", \"296\": \"IM_ATTR_MEDIA_100BASE_LX\", \"297\": \"IM_ATTR_MEDIA_100BASE_ZX\", \"298\": \"IM_ATTR_MEDIA_1000BASE_BX_D\", \"299\": \"IM_ATTR_MEDIA_1000BASE_BX_U\", \"300\": \"IM_ATTR_MEDIA_1000BASE_BX20_D\", \"301\": \"IM_ATTR_MEDIA_1000BASE_BX20_U\", \"302\": \"IM_ATTR_MEDIA_1000BASE_BX40_D\", \"303\": \"IM_ATTR_MEDIA_1000BASE_BX40_DA\", \"304\": \"IM_ATTR_MEDIA_1000BASE_BX40_U\", \"305\": \"IM_ATTR_MEDIA_1000BASE_BX80_D\", \"306\": \"IM_ATTR_MEDIA_1000BASE_BX80_U\", \"307\": \"IM_ATTR_MEDIA_1000BASE_BX120_D\", \"308\": \"IM_ATTR_MEDIA_1000BASE_BX120_U\", \"309\": \"IM_ATTR_MEDIA_10GBASE_BX_D\", \"310\": \"IM_ATTR_MEDIA_10GBASE_BX_U\", \"311\": \"IM_ATTR_MEDIA_10GBASE_BX10_D\", \"312\": \"IM_ATTR_MEDIA_10GBASE_BX10_U\", \"313\": \"IM_ATTR_MEDIA_10GBASE_BX20_D\", \"314\": \"IM_ATTR_MEDIA_10GBASE_BX20_U\", \"315\": \"IM_ATTR_MEDIA_10GBASE_BX40_D\", \"316\": \"IM_ATTR_MEDIA_10GBASE_BX40_U\", \"317\": \"IM_ATTR_MEDIA_10GBASE_BX80_D\", \"318\": \"IM_ATTR_MEDIA_10GBASE_BX80_U\", \"319\": \"IM_ATTR_MEDIA_10GBASE_BX120_D\", \"320\": \"IM_ATTR_MEDIA_10GBASE_BX120_U\", \"321\": \"IM_ATTR_MEDIA_1000BASE_DR_LX\", \"322\": \"IM_ATTR_MEDIA_100GBASE_ER4L\", \"323\": \"IM_ATTR_MEDIA_100GBASE_SR4\", \"324\": \"IM_ATTR_MEDIA_40GBASE_SR_BD\"}, \"efp_tag_priority\": {\"0\": \"PRIORITY0\", \"1\": \"PRIORITY1\", \"2\": \"PRIORITY2\", \"3\": \"PRIORITY3\", \"4\": \"PRIORITY4\", \"5\": \"PRIORITY5\", \"6\": \"PRIORITY6\", \"7\": \"PRIORITY7\", \"8\": \"PRIORITY_ANY\"}, \"im_cmd_intf_type_enum\": {\"0\": \"SRP\", \"1\": \"Tunnel\", \"2\": \"Bundle\", \"3\": \"Serial\", \"4\": \"SonetPOS\", \"5\": \"TunnelGRE\", \"6\": \"PseudowireHeadEnd\", \"7\": \"CEM\", \"8\": \"GCC\"}, \"TunnelKeyState\": {\"0\": \"Absent\", \"1\": \"Present\"}, \"sonet_aps_et\": {\"0\": \"NotConfigured\", \"1\": \"WorkingActive\", \"2\": \"ProtectActive\", \"3\": \"WorkingInactive\", \"4\": \"ProtectInactive\"}, \"bm_severity_type\": {\"0\": \"Ok\", \"1\": \"Information\", \"2\": \"Misconfiguration\", \"3\": \"Warning\", \"5\": \"Error\"}, \"stats_type_contents_enum\": {\"100\": \"STATS_TYPE_SINGLE\", \"101\": \"STATS_TYPE_VARIABLE\"}, \"im_state_type_\": {\"0\": \"IM_STATE_NOTREADY\", \"1\": \"IM_STATE_ADMINDOWN\", \"2\": \"IM_STATE_DOWN\", \"3\": \"IM_STATE_UP\", \"4\": \"IM_STATE_SHUTDOWN\", \"5\": \"IM_STATE_ERRDISABLE\", \"6\": \"IM_STATE_DOWN_IMMEDIATE\", \"7\": \"IM_STATE_DOWN_IMMEDIATE_ADMIN\", \"8\": \"IM_STATE_DOWN_GRACEFUL\", \"9\": \"IM_STATE_BEGIN_SHUTDOWN\", \"10\": \"IM_STATE_END_SHUTDOWN\", \"11\": \"IM_STATE_BEGIN_ERROR_DISABLE\", \"12\": \"IM_STATE_END_ERROR_DISABLE\", \"13\": \"IM_STATE_BEGIN_DOWN_GRACEFUL\", \"14\": \"IM_STATE_RESET\", \"15\": \"IM_STATE_OPERATIONAL\", \"16\": \"IM_STATE_NOT_OPERATIONAL\", \"17\": \"IM_STATE_UNKNOWN\", \"18\": \"IM_STATE_LAST\"}, \"bm_muxreason\": {\"0\": \"BM_MUXREASON_NO_REASON\", \"1\": \"BM_MUXREASON_LINK_DOWN\", \"2\": \"BM_MUXREASON_LINK_DELETED\", \"3\": \"BM_MUXREASON_DUPLEX\", \"4\": \"BM_MUXREASON_BANDWIDTH\", \"5\": \"BM_MUXREASON_LOOPBACK\", \"6\": \"BM_MUXREASON_ACTIVITY_TYPE\", \"7\": \"BM_MUXREASON_LINK_LIMIT\", \"8\": \"BM_MUXREASON_SHARED\", \"9\": \"BM_MUXREASON_LAGID\", \"10\": \"BM_MUXREASON_NO_BUNDLE\", \"11\": \"BM_MUXREASON_NO_PRIMARY\", \"12\": \"BM_MUXREASON_BUNDLE_DOWN\", \"13\": \"BM_MUXREASON_INDIVIDUAL\", \"14\": \"BM_MUXREASON_DEFAULTED\", \"15\": \"BM_MUXREASON_INSYNC\", \"16\": \"BM_MUXREASON_COLLECTING\", \"17\": \"BM_MUXREASON_ACTIVE_LINK_LIMIT\", \"18\": \"BM_MUXREASON_DISTRIBUTING\", \"19\": \"BM_MUXREASON_COUNT\"}, \"GCC_DER_STATE\": {\"0\": \"InService\", \"1\": \"OutOfService\", \"2\": \"Maintainance\", \"3\": \"AIS\"}, \"srp_mgmt_failure_state_et\": {\"0\": \"IdleFailureState\", \"1\": \"WaitToRestoreFailureState\", \"2\": \"ManualSwitchFailureState\", \"3\": \"SignalDegradeFailureState\", \"4\": \"SignalFailFailureState\", \"5\": \"ForcedSwitchFailureState\", \"6\": \"ShutdownFailureState\", \"7\": \"InvalidFailureState\", \"8\": \"UnknownFailureState\"}, \"ncp_ident\": {\"1\": \"CDPCP\", \"2\": \"IPCP\", \"3\": \"IPCPIW\", \"4\": \"IPV6CP\", \"5\": \"MPLSCP\", \"6\": \"OSICP\"}, \"TunnelKA_DFState\": {\"0\": \"Disable\", \"1\": \"Enable\"}, \"im_cmd_encaps_enum\": {\"0\": \"FrameRelay\", \"1\": \"VLAN\", \"2\": \"PPP\"}, \"bm_muxstate\": {\"1\": \"DETACHED\", \"2\": \"WAITING\", \"3\": \"ATTACHED\", \"4\": \"COLLECTING\", \"5\": \"DISTRIBUTING\", \"6\": \"COLLECTINGDISTRIBUTING\"}, \"ppp_fsm_state_type\": {\"0\": \"PPP_FSM_STATE_INITIAL_0\", \"1\": \"PPP_FSM_STATE_STARTING_1\", \"2\": \"PPP_FSM_STATE_CLOSED_2\", \"3\": \"PPP_FSM_STATE_STOPPED_3\", \"4\": \"PPP_FSM_STATE_CLOSING_4\", \"5\": \"PPP_FSM_STATE_STOPPING_5\", \"6\": \"PPP_FSM_STATE_REQ_SENT_6\", \"7\": \"PPP_FSM_STATE_ACK_RCVD_7\", \"8\": \"PPP_FSM_STATE_ACK_SENT_8\", \"9\": \"PPP_FSM_STATE_OPENED_9\"}, \"im_attr_transport_mode_enum\": {\"0\": \"IM_ATTR_TRANSPORT_MODE_UNKNOWN\", \"1\": \"IM_ATTR_TRANSPORT_MODE_LAN\", \"2\": \"IM_ATTR_TRANSPORT_MODE_WAN\", \"3\": \"IM_ATTR_TRANSPORT_MODE_OTN_BT_OPU1E\", \"4\": \"IM_ATTR_TRANSPORT_MODE_OTN_BT_OPU2E\", \"5\": \"IM_ATTR_TRANSPORT_MODE_OTN_OPU3\", \"6\": \"IM_ATTR_TRANSPORT_MODE_OTN_OPU4\"}, \"srp_mgmt_srr_failure_type\": {\"0\": \"IdleSRRFailure\", \"1\": \"WaitToRestoreSRRFailure\", \"2\": \"SignalFailSRRFailure\", \"3\": \"ForcedSwitchSRRFailure\", \"4\": \"UnknownSRRFailure\"}, \"srp_mgmt_ips_req_type\": {\"0\": \"IdleIPSRequest\", \"1\": \"WaitToRestoreIPSRequest\", \"2\": \"ManualSwitchIPSRequest\", \"3\": \"SignalDegradeIPSRequest\", \"4\": \"SignalFailIPSRequest\", \"5\": \"ForcedSwitchIPSRequest\", \"6\": \"UnknownIPSRequest\"}, \"bm_state_reason_target_type\": {\"0\": \"MemberReason\", \"1\": \"BundleReason\"}, \"srp_mgmt_failure_et\": {\"0\": \"HardwareMissingFailure\", \"1\": \"Layer1AdminStateFailure\", \"2\": \"Layer1ErrorFailure\", \"3\": \"KeepaliveMissedFailure\", \"4\": \"LinkQualityDegradedFailure\", \"5\": \"MateProblemFailure\", \"6\": \"SideMismatchFailure\", \"7\": \"UnknownFailure\"}, \"im_attr_link_type_enum\": {\"0\": \"IM_ATTR_LINK_TYPE_AUTO\", \"1\": \"IM_ATTR_LINK_TYPE_FORCE\"}, \"bmd_member_state_enum\": {\"1\": \"BMD_MBR_STATE_CONFIGURED\", \"2\": \"BMD_MBR_STATE_STANDBY\", \"3\": \"BMD_MBR_STATE_HOT_STANDBY\", \"4\": \"BMD_MBR_STATE_NEGOTIATING\", \"5\": \"BMD_MBR_STATE_BFD_RUNNING\", \"6\": \"BMD_MBR_STATE_ACTIVE\"}, \"bm_mbr_state_reason_type\": {\"0\": \"BM_MBR_STATE_REASON_UNKNOWN\", \"1\": \"BM_MBR_STATE_REASON_UNSELECTABLE_UNKNOWN\", \"2\": \"BM_MBR_STATE_REASON_LINK_DOWN\", \"3\": \"BM_MBR_STATE_REASON_LINK_DELETING\", \"4\": \"BM_MBR_STATE_REASON_CREATING\", \"5\": \"BM_MBR_STATE_REASON_BUNDLE_CREATING\", \"6\": \"BM_MBR_STATE_REASON_BUNDLE_DELETING\", \"7\": \"BM_MBR_STATE_REASON_BUNDLE_ADMIN_DOWN\", \"8\": \"BM_MBR_STATE_REASON_REPLICATING\", \"9\": \"BM_MBR_STATE_REASON_BANDWIDTH\", \"10\": \"BM_MBR_STATE_REASON_LOOPBACK\", \"11\": \"BM_MBR_STATE_REASON_ACTIVITY_TYPE\", \"12\": \"BM_MBR_STATE_REASON_BUNDLE_SHUTDOWN\", \"13\": \"BM_MBR_STATE_REASON_MIN_SELECTED\", \"14\": \"BM_MBR_STATE_REASON_MAX_SELECTED\", \"15\": \"BM_MBR_STATE_REASON_LINK_LIMIT\", \"16\": \"BM_MBR_STATE_REASON_ACTIVE_LIMIT\", \"17\": \"BM_MBR_STATE_REASON_STANDBY_UNKNOWN\", \"18\": \"BM_MBR_STATE_REASON_EXPIRED\", \"19\": \"BM_MBR_STATE_REASON_DEFAULTED\", \"20\": \"BM_MBR_STATE_REASON_ACTOR_NOTAGG\", \"21\": \"BM_MBR_STATE_REASON_PARTNER_NOTAGG\", \"22\": \"BM_MBR_STATE_REASON_LAGID\", \"23\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_CFGD\", \"24\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_READY\", \"25\": \"BM_MBR_STATE_REASON_PARTNER_OOD\", \"26\": \"BM_MBR_STATE_REASON_PARTNER_NOT_INSYNC\", \"27\": \"BM_MBR_STATE_REASON_FOREIGN_PARTNER_OOS\", \"28\": \"BM_MBR_STATE_REASON_ATTACH_UNKNOWN\", \"29\": \"BM_MBR_STATE_REASON_PARTNER_NOT_COLLECTING\", \"30\": \"BM_MBR_STATE_REASON_COLLECT_UNKNOWN\", \"31\": \"BM_MBR_STATE_REASON_STANDBY_FOREIGN\", \"32\": \"BM_MBR_STATE_REASON_BFD_STARTING\", \"33\": \"BM_MBR_STATE_REASON_BFD_DOWN\", \"34\": \"BM_MBR_STATE_REASON_BFD_NBR_UNCONFIG\", \"35\": \"BM_MBR_STATE_REASON_MLACP\", \"36\": \"BM_MBR_STATE_REASON_PE_ISOLATED\", \"37\": \"BM_MBR_STATE_REASON_FORCED_SWITCHOVER\", \"38\": \"BM_MBR_STATE_REASON_ERRDIS_UNKNOWN\", \"39\": \"BM_MBR_STATE_REASON_MLACP_NO_MBR_STATE_INFO\", \"40\": \"BM_MBR_STATE_REASON_ACTIVE\", \"41\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_STATE_INFO\", \"42\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_CONFIG_INFO\", \"43\": \"BM_MBR_STATE_REASON_MLACP_NO_BDL_SYNC\", \"44\": \"BM_MBR_STATE_REASON_MLACP_BDL_HAS_NO_PEER\", \"45\": \"BM_MBR_STATE_REASON_MLACP_NAK\", \"46\": \"BM_MBR_STATE_REASON_MLACP_TRANSPORT_UNAVAILABLE\", \"47\": \"BM_MBR_STATE_REASON_MLACP_NOT_CONFIGURED\", \"48\": \"BM_MBR_STATE_REASON_RECOVERY_TIMER\", \"49\": \"BM_MBR_STATE_REASON_MLACP_STANDBY\", \"50\": \"BM_MBR_STATE_REASON_MAXIMIZED_OUT\", \"51\": \"BM_MBR_STATE_REASON_MLACP_PEER_SELECTED\", \"52\": \"BM_MBR_STATE_REASON_MLACP_CONNECT_TIMER_RUNNING\", \"53\": \"BM_MBR_STATE_REASON_BUNDLE_NOT_MLACP\", \"54\": \"BM_MBR_STATE_REASON_NO_LON\", \"55\": \"BM_MBR_STATE_REASON_CUMUL_REL_BW_LIMIT\", \"56\": \"BM_MBR_STATE_REASON_NO_MAC\", \"57\": \"BM_MBR_STATE_REASON_NO_SYSTEM_ID\", \"58\": \"BM_MBR_STATE_REASON_LINK_SHUTDOWN\", \"59\": \"BM_MBR_STATE_REASON_ACTIVITY_MLACP\", \"60\": \"BM_MBR_STATE_REASON_ACTIVITY_ICCP\", \"61\": \"BM_MBR_STATE_REASON_BUNDLE_ICPE_MLACP\", \"62\": \"BM_MBR_STATE_REASON_NO_LINK_NUM\", \"63\": \"BM_MBR_STATE_REASON_STANDBY_PEER_HIGHER_PRIO\", \"64\": \"BM_MBR_STATE_REASON_RED_STATE_STANDBY\", \"65\": \"BM_MBR_STATE_REASON_OTHER_RED_STATE_STANDBY\", \"66\": \"BM_MBR_STATE_REASON_HOLDING\", \"67\": \"BM_MBR_STATE_REASON_BUNDLE_ERROR_DISABLED\", \"68\": \"BM_MBR_STATE_REASON_BUNDLE_EFD_DISABLED\", \"69\": \"BM_MBR_STATE_REASON_SINGLETON_PE_ISOLATED\", \"70\": \"BM_MBR_STATE_REASON_COUNT\"}, \"im_attr_duplex_enum\": {\"0\": \"IM_ATTR_DUPLEX_UNKNOWN\", \"1\": \"IM_ATTR_DUPLEX_HALF\", \"2\": \"IM_ATTR_DUPLEX_FULL\"}, \"srp_mgmt_srr_node_state\": {\"0\": \"IdleSRRState\", \"1\": \"DiscoverySRRState\", \"2\": \"UnknownSRRState\"}, \"stats_counter_type_enum\": {\"0\": \"STATS_COUNTER_RATE\", \"1\": \"STATS_COUNTER_UINT32\", \"2\": \"STATS_COUNTER_UINT64\", \"3\": \"STATS_COUNTER_GENERIC\", \"4\": \"STATS_COUNTER_PROTO\", \"5\": \"STATS_COUNTER_SRP\", \"6\": \"STATS_COUNTER_IPV4_PREC\", \"7\": \"STATS_COUNTER_IPV4_DSCP\", \"8\": \"STATS_COUNTER_MPLS_EXP\", \"9\": \"STATS_COUNTER_IPV4_BGPPA\", \"10\": \"STATS_COUNTER_SRC_BGPPA\", \"11\": \"STATS_COUNTER_BASIC\", \"12\": \"STATS_COUNTER_COMP_GENERIC\", \"13\": \"STATS_COUNTER_COMP_PROTO\", \"14\": \"STATS_COUNTER_COMP_BASIC\", \"15\": \"STATS_COUNTER_ACCOUNTING\", \"16\": \"STATS_COUNTER_COMP_ACCOUNTING\", \"17\": \"STATS_COUNTER_FLOW\", \"18\": \"STATS_COUNTER_COMP_FLOW\"}, \"im_cmd_loopback_enum\": {\"0\": \"NoLoopback\", \"1\": \"InternalLoopback\", \"2\": \"ExternalLoopback\", \"3\": \"LineLoopback\"}, \"tunl_pfi_af_id_type\": {\"0\": \"TUNL_PFI_AF_ID_NONE\", \"2\": \"TUNL_PFI_AF_ID_IPV4\", \"10\": \"TUNL_PFI_AF_ID_IPV6\"}, \"efp_payload_etype\": {\"0\": \"PayloadEthertypeAny\", \"1\": \"PayloadEthertypeIP\", \"2\": \"PayloadEthertypePPPoE\"}, \"stats_id_type_enum\": {\"0\": \"STATS_ID_TYPE_UNKNOWN\", \"1\": \"STATS_ID_TYPE_IFHANDLE\", \"2\": \"STATS_ID_TYPE_SPARE\", \"3\": \"STATS_ID_TYPE_NODE\", \"4\": \"STATS_ID_TYPE_OTHER\", \"5\": \"STATS_ID_TYPE_FEATURE\", \"6\": \"STATS_ID_TYPE_MAX\"}, \"im_cmd_stats_enum\": {\"1\": \"Full\", \"2\": \"Basic\"}, \"TunnelGREMode\": {\"0\": \"Unknown\", \"1\": \"GREoIPv4\", \"2\": \"GREoIPv6\", \"3\": \"MGREoIPv4\", \"4\": \"MGREoIPv6\", \"5\": \"IPv4\", \"6\": \"IPv6\"}, \"vlan_encaps\": {\"0\": \"NoEncapsulation\", \"1\": \"Dot1Q\", \"2\": \"QinQ\", \"3\": \"QinAny\", \"4\": \"Dot1QNative\", \"5\": \"Dot1ad\", \"6\": \"Dot1adNative\", \"7\": \"ServiceInstance\", \"8\": \"Dot1adDot1Q\", \"9\": \"Dot1adAny\"}, \"im_cmd_lmi_type_enum\": {\"0\": \"LMITypeAuto\", \"1\": \"LMITypeANSI\", \"2\": \"LMITypeCCITT\", \"3\": \"LMITypeCisco\"}, \"im_attr_flow_control_enum\": {\"0\": \"IM_ATTR_FLOW_CONTROL_OFF\", \"1\": \"IM_ATTR_FLOW_CONTROL_ON\", \"2\": \"IM_ATTR_FLOW_CONTROL_NOTSUP\"}, \"bmd_member_type_enum\": {\"0\": \"BMD_MBR_LOCAL\", \"1\": \"BMD_MBR_FOREIGN\", \"2\": \"BMD_MBR_UNKNOWN\"}, \"srp_mgmt_ips_path_ind\": {\"0\": \"ShortPath\", \"1\": \"LongPath\", \"2\": \"UnknownPath\"}, \"efp_tag_etype\": {\"33024\": \"DOT1Q\", \"34984\": \"DOT1AD\", \"0\": \"UNTAGGED\"}}, \"schema_path\": \"RootOper.Interfaces.Interface\", \"v_min\": 6}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_headsignallingcounters.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_headsignallingcounters.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_headsignallingcounters.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_headsignallingcounters.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,105 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message te_stats_bag_vif_t {
-    option (cisco_msg).schema_path = "RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters";
-
-    optional string c_type = 1 [(cisco_field).path_element="RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(CType)"];
-    optional uint32 tunnel_id = 2 [(cisco_field).path_element="RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(TunnelID)"];
-    optional string tunnel_name = 50 [(cisco_field).name="TunnelName"];
-    optional string tunnel_sig_name = 51 [(cisco_field).name="TunnelSigName"];
-    optional uint32 tunnel_id_ = 52 [(cisco_field).name="TunnelID"];
-    optional uint32 lsp_id = 53 [(cisco_field).name="LSP_ID"];
-    optional te_stats_sig_t statistics = 54 [(cisco_field).name="Statistics"];
-    repeated te_stats_bag_dest_t destination_statistics = 55 [(cisco_field).name="DestinationStatistics"];
-}
-
-message te_stats_sig_t {
-    optional uint32 tx_event_unknown = 1 [(cisco_field).name="TXEventUnknown"];
-    optional uint32 tx_path_create_event = 2 [(cisco_field).name="TXPathCreateEvent"];
-    optional uint32 tx_path_change_event = 3 [(cisco_field).name="TXPathChangeEvent"];
-    optional uint32 tx_path_delete_event = 4 [(cisco_field).name="TXPathDeleteEvent"];
-    optional uint32 tx_path_error_event = 5 [(cisco_field).name="TXPathErrorEvent"];
-    optional uint32 tx_resv_create_event = 6 [(cisco_field).name="TXResvCreateEvent"];
-    optional uint32 tx_resv_change_event = 7 [(cisco_field).name="TXResvChangeEvent"];
-    optional uint32 tx_resv_delete_event = 8 [(cisco_field).name="TXResvDeleteEvent"];
-    optional uint32 tx_resv_error_event = 9 [(cisco_field).name="TXResvErrorEvent"];
-    optional uint32 tx_path_reeval_query_event = 10 [(cisco_field).name="TXPathReevalQueryEvent"];
-    optional uint32 rx_event_unknown = 11 [(cisco_field).name="RXEventUnknown"];
-    optional uint32 rx_path_create_event = 12 [(cisco_field).name="RXPathCreateEvent"];
-    optional uint32 rx_path_change_event = 13 [(cisco_field).name="RXPathChangeEvent"];
-    optional uint32 rx_path_delete_event = 14 [(cisco_field).name="RXPathDeleteEvent"];
-    optional uint32 rx_path_error_event = 15 [(cisco_field).name="RXPathErrorEvent"];
-    optional uint32 rx_resv_create_event = 16 [(cisco_field).name="RXResvCreateEvent"];
-    optional uint32 rx_resv_change_event = 17 [(cisco_field).name="RXResvChangeEvent"];
-    optional uint32 rx_resv_delete_event = 18 [(cisco_field).name="RXResvDeleteEvent"];
-    optional uint32 rx_resv_error_event = 19 [(cisco_field).name="RXResvErrorEvent"];
-    optional uint32 rx_path_reeval_query_event = 20 [(cisco_field).name="RXPathReevalQueryEvent"];
-    optional uint32 tx_backup_assign_event = 21 [(cisco_field).name="TXBackupAssignEvent"];
-    optional uint32 rx_backup_assign_err_event = 22 [(cisco_field).name="RXBackupAssignErrEvent"];
-    optional uint32 events_total_count = 23 [(cisco_field).name="EventsTotalCount"];
-    optional uint32 events_count = 24 [(cisco_field).name="EventsCount"];
-}
-
-message te_stats_bag_s2l_t {
-    optional bytes sub_group_originator = 1 [(cisco_field).name="SubGroupOriginator"];
-    optional uint32 sub_group_id = 2 [(cisco_field).name="SubGroupID"];
-    optional bytes destination_address = 3 [(cisco_field).name="DestinationAddress"];
-    optional te_stats_sig_t statistics = 4 [(cisco_field).name="Statistics"];
-}
-
-message te_stats_bag_dest_t {
-    optional bytes destination_address = 1 [(cisco_field).name="DestinationAddress"];
-    optional te_stats_sig_t statistics = 2 [(cisco_field).name="Statistics"];
-    repeated te_stats_bag_s2l_t s2_l_statistics = 3 [(cisco_field).name="S2LStatistics"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"te_stats_bag_vif_t\", \"v_maj\": 25, \"version\": 1.0, \"bytecode\": \"$566={TunnelName}s{TunnelSigName}s{TunnelID}I{LSP_ID}I{Statistics}$558{DestinationStatistics}a($565);$558={TXEventUnknown}D{TXPathCreateEvent}D{TXPathChangeEvent}D{TXPathDeleteEvent}D{TXPathErrorEvent}D{TXResvCreateEvent}D{TXResvChangeEvent}D{TXResvDeleteEvent}D{TXResvErrorEvent}D{TXPathReevalQueryEvent}D{RXEventUnknown}D{RXPathCreateEvent}D{RXPathChangeEvent}D{RXPathDeleteEvent}D{RXPathErrorEvent}D{RXResvCreateEvent}D{RXResvChangeEvent}D{RXResvDeleteEvent}D{RXResvErrorEvent}D{RXPathReevalQueryEvent}D{TXBackupAssignEvent}D{RXBackupAssignErrEvent}D{EventsTotalCount}D{EventsCount}D;$563={SubGroupOriginator}N{SubGroupID}I{DestinationAddress}N{Statistics}$558;$565={DestinationAddress}N{Statistics}$558{S2LStatistics}a($563);\", \"schema_names\": [[\"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(CType)\", \"\"], [\"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(TunnelID)\", 1]], \"subtypes\": {\"563\": \"te_stats_bag_s2l_t\", \"565\": \"te_stats_bag_dest_t\", \"558\": \"te_stats_sig_t\"}, \"enums\": {}, \"schema_path\": \"RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters\", \"v_min\": 8}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelautobandwidth.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelautobandwidth.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelautobandwidth.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelautobandwidth.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,75 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message mpls_te_tunnels_autobw_brief {
-    option (cisco_msg).schema_path = "RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth";
-
-    optional string tunnel_name = 1 [(cisco_field).path_element="RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth(TunnelName)"];
-    optional string tunnel_name_ = 50 [(cisco_field).name="TunnelName"];
-    optional string signaled_name = 51 [(cisco_field).name="SignaledName"];
-    optional uint32 tunnel_lsp_id = 52 [(cisco_field).name="TunnelLSP_ID"];
-    optional mpls_te_tunnels_autobw_status auto_bandwidth_status = 53 [(cisco_field).name="AutoBandwidthStatus"];
-    optional uint32 bandwidth_applications = 54 [(cisco_field).name="BandwidthApplications"];
-    optional uint32 last_bandwidth_applied = 55 [(cisco_field).name="LastBandwidthApplied"];
-    optional uint32 tunnel_requested_bandwidth = 56 [(cisco_field).name="TunnelRequestedBandwidth"];
-    optional uint32 signalled_bandwith = 57 [(cisco_field).name="SignalledBandwith"];
-    optional uint32 highest_bandwidth = 58 [(cisco_field).name="HighestBandwidth"];
-    optional uint32 last_sample_bandwidth = 59 [(cisco_field).name="LastSampleBandwidth"];
-    optional uint32 samples_collected = 60 [(cisco_field).name="SamplesCollected"];
-    optional uint32 time_left_application = 61 [(cisco_field).name="TimeLeftApplication"];
-}
-
-message mpls_te_tunnels_autobw_status {
-    optional bool is_auto_bandwidth_enabled = 1 [(cisco_field).name="IsAutoBandwidthEnabled"];
-    optional uint32 reactivation_time = 2 [(cisco_field).name="ReactivationTime"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"mpls_te_tunnels_autobw_brief\", \"v_maj\": 25, \"version\": 1.0, \"bytecode\": \"$432={TunnelName}s{SignaledName}s{TunnelLSP_ID}D{AutoBandwidthStatus}$429{BandwidthApplications}D{LastBandwidthApplied}D{TunnelRequestedBandwidth}D{SignalledBandwith}D{HighestBandwidth}D{LastSampleBandwidth}D{SamplesCollected}D{TimeLeftApplication}D;$429={IsAutoBandwidthEnabled}b{ReactivationTime}D;\", \"schema_names\": [[\"RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth(TunnelName)\", \"\"]], \"subtypes\": {\"429\": \"mpls_te_tunnels_autobw_status\"}, \"enums\": {}, \"schema_path\": \"RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth\", \"v_min\": 8}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelhead.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelhead.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelhead.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/mpls_te_tunnelhead.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,1556 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message mpls_te_p2mp_tunnel_bag {
-    option (cisco_msg).schema_path = "RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead";
-
-    optional string tunnel_name = 1 [(cisco_field).path_element="RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(TunnelName)"];
-    optional bool role_standby = 50 [(cisco_field).name="RoleStandby"];
-    optional uint32 tunnel_interface_name = 51 [(cisco_field).name="TunnelInterfaceName"];
-    optional mpls_te_p2mp_tun_cfg_bag config = 52 [(cisco_field).name="Config"];
-    optional string admin_state = 53 [(cisco_field).name="AdminState"];
-    optional string operational_state = 54 [(cisco_field).name="OperationalState"];
-    optional uint32 operational_state_changes = 55 [(cisco_field).name="OperationalStateChanges"];
-    optional string signaled_name = 56 [(cisco_field).name="SignaledName"];
-    optional string fail_reason = 57 [(cisco_field).name="FailReason"];
-    optional uint32 destination_up_count = 58 [(cisco_field).name="DestinationUpCount"];
-    optional uint32 destination_disabled_count = 59 [(cisco_field).name="DestinationDisabledCount"];
-    optional uint32 destination_down_count = 60 [(cisco_field).name="DestinationDownCount"];
-    repeated mpls_te_p2mp_dest destinations = 61 [(cisco_field).name="Destinations"];
-    optional mpls_te_p2mp_lsp tunnel_current_lsp = 62 [(cisco_field).name="TunnelCurrentLSP"];
-    optional uint32 re_opt_hold_down_timer_remaining = 69 [(cisco_field).name="ReOptHoldDownTimerRemaining"];
-    optional uint32 bandwidth_requested = 70 [(cisco_field).name="BandwidthRequested"];
-    optional string bandwidth_type = 71 [(cisco_field).name="BandwidthType"];
-    optional uint32 current_lsp_bandwidth_requested = 72 [(cisco_field).name="CurrentLSPBandwidthRequested"];
-    optional string current_lsp_bandwidth_requested_type = 73 [(cisco_field).name="CurrentLSPBandwidthRequestedType"];
-    optional uint32 standby_lsp_bandwidth_requested = 74 [(cisco_field).name="StandbyLSPBandwidthRequested"];
-    optional string standby_lsp_bandwidth_requested_type = 75 [(cisco_field).name="StandbyLSPBandwidthRequestedType"];
-    optional uint32 reopt_lsp_bandwidth_requested = 76 [(cisco_field).name="ReoptLSPBandwidthRequested"];
-    optional string reopt_lsp_bandwidth_requested_type = 77 [(cisco_field).name="ReoptLSPBandwidthRequestedType"];
-    optional uint32 standby_reopt_lsp_bandwidth_requested = 78 [(cisco_field).name="StandbyReoptLSPBandwidthRequested"];
-    optional string standby_reopt_lsp_bandwidth_requested_type = 79 [(cisco_field).name="StandbyReoptLSPBandwidthRequestedType"];
-    optional bool is_node_protected = 80 [(cisco_field).name="IsNodeProtected"];
-    optional bool is_bandwidth_protect = 81 [(cisco_field).name="IsBandwidthProtect"];
-    optional bool tunnel_recovering = 82 [(cisco_field).name="TunnelRecovering"];
-    optional bool reroute_pending = 83 [(cisco_field).name="ReroutePending"];
-    optional bool affinity_failure_reopt_disabled = 84 [(cisco_field).name="AffinityFailureReoptDisabled"];
-    optional uint32 affinity_failure_reopt_time_remained = 85 [(cisco_field).name="AffinityFailureReoptTimeRemained"];
-    optional uint32 affinity_failure_delayed_tear_time_remained = 86 [(cisco_field).name="AffinityFailureDelayedTearTimeRemained"];
-    optional uint32 invalidation_time_remained = 87 [(cisco_field).name="InvalidationTimeRemained"];
-    optional bool drop_mode = 88 [(cisco_field).name="DropMode"];
-    optional bool auto_route = 89 [(cisco_field).name="AutoRoute"];
-    optional bool forwarding_adjacency = 90 [(cisco_field).name="ForwardingAdjacency"];
-    optional uint32 load_share_factor = 91 [(cisco_field).name="LoadShareFactor"];
-    optional string load_share_type = 92 [(cisco_field).name="LoadShareType"];
-    optional uint32 create_time = 93 [(cisco_field).name="CreateTime"];
-    optional uint32 uptime = 94 [(cisco_field).name="Uptime"];
-    optional string metric_type = 95 [(cisco_field).name="MetricType"];
-    optional uint32 tiebreaker_type = 96 [(cisco_field).name="TiebreakerType"];
-    optional string tiebreaker_qualifier = 97 [(cisco_field).name="TiebreakerQualifier"];
-    optional string metric_qualifier = 98 [(cisco_field).name="MetricQualifier"];
-    optional bool is_hop_limit_ignore = 99 [(cisco_field).name="IsHopLimitIgnore"];
-    optional string hop_limit_ignored_reason = 100 [(cisco_field).name="HopLimitIgnoredReason"];
-    optional string outbound_frr_state = 101 [(cisco_field).name="OutboundFRRState"];
-    optional string area_id = 102 [(cisco_field).name="AreaID"];
-    optional mpls_te_p2p_info_bag p2_p_info = 103 [(cisco_field).name="P2PInfo"];
-    optional string pce_fail_reason = 104 [(cisco_field).name="PCEFailReason"];
-    optional uint32 snmp_index = 105 [(cisco_field).name="SNMPIndex"];
-    optional mpls_te_tunnels_history_bag history = 106 [(cisco_field).name="History"];
-    optional mpls_te_pp_info path_protection = 107 [(cisco_field).name="PathProtection"];
-    optional bool is_inter_area_tunnel = 108 [(cisco_field).name="IsInterAreaTunnel"];
-    optional mpls_te_autobackup_info auto_backup = 109 [(cisco_field).name="AutoBackup"];
-    optional bool is_auto_backup = 110 [(cisco_field).name="IsAutoBackup"];
-    optional mpls_te_automesh_info auto_mesh = 111 [(cisco_field).name="AutoMesh"];
-    optional bool is_auto_pcc = 112 [(cisco_field).name="IsAutoPCC"];
-    optional mpls_te_autopcc_info auto_pcc = 113 [(cisco_field).name="AutoPCC"];
-    optional bool is_pce_delegated = 114 [(cisco_field).name="IsPCEDelegated"];
-    optional mpls_te_pce_delegation_info pce_delegation = 115 [(cisco_field).name="PCEDelegation"];
-    optional string tunnel_attribute_set_name = 116 [(cisco_field).name="TunnelAttributeSetName"];
-    optional string tunnel_attribute_set_type = 117 [(cisco_field).name="TunnelAttributeSetType"];
-    optional mpls_te_soft_preemption_tunnel_info soft_preemption = 118 [(cisco_field).name="SoftPreemption"];
-    optional hasi_m_object_ctx master_context = 119 [(cisco_field).name="MasterContext"];
-    optional hasi_s_object_ctx slave_context = 120 [(cisco_field).name="SlaveContext"];
-    optional mpls_te_mgmt_wdm_uni_tunnel_info wdm_uni_tunnel = 121 [(cisco_field).name="WDM_UNITunnel"];
-    optional mpls_te_transport_tunnel_info transport_tunnel_info = 122 [(cisco_field).name="TransportTunnelInfo"];
-    optional mpls_te_tunnel_bfd_info bfd_info = 123 [(cisco_field).name="BFDInfo"];
-    optional mpls_te_tunnel_otn_bidir_info otn_bidir = 124 [(cisco_field).name="OTNBidir"];
-    optional mpls_te_tunnel_bidir_info bidir = 125 [(cisco_field).name="Bidir"];
-    optional string xro_attribute_set_name = 126 [(cisco_field).name="XROAttributeSetName"];
-    optional mpls_te_attribute_set xro_attribute_set = 127 [(cisco_field).name="XROAttributeSet"];
-    optional te_vif_convergence_info te_tunnel_convergence = 128 [(cisco_field).name="TETunnelConvergence"];
-    optional te_service_info service_info = 129 [(cisco_field).name="ServiceInfo"];
-    optional bool is_passive = 130 [(cisco_field).name="IsPassive"];
-    optional string passive_tunnel_name = 131 [(cisco_field).name="PassiveTunnelName"];
-    optional mpls_te_tunnel_flex_info flex_info = 132 [(cisco_field).name="FlexInfo"];
-    optional bool binding_label_exists = 133 [(cisco_field).name="BindingLabelExists"];
-    optional uint32 binding_label = 134 [(cisco_field).name="BindingLabel"];
-    optional uint32 last_hop_ifindex = 135 [(cisco_field).name="LastHopIfindex"];
-}
-
-message rsvp_ng_api_stats_entry_bag {
-    optional uint64 count = 1 [(cisco_field).name="Count"];
-}
-
-message rsvp_ng_api_stats_bag {
-    optional string ctx_event_type = 1 [(cisco_field).name="CTXEventType"];
-    optional string ctrl_event_type = 2 [(cisco_field).name="CtrlEventType"];
-    optional rsvp_ng_api_stats_entry_bag scheduled = 3 [(cisco_field).name="Scheduled"];
-    optional rsvp_ng_api_stats_entry_bag tx = 4 [(cisco_field).name="Tx"];
-    optional rsvp_ng_api_stats_entry_bag rx = 5 [(cisco_field).name="Rx"];
-    optional rsvp_ng_api_stats_entry_bag drop_tx = 6 [(cisco_field).name="DropTx"];
-    optional rsvp_ng_api_stats_entry_bag drop_rx = 7 [(cisco_field).name="DropRx"];
-    optional rsvp_ng_api_stats_entry_bag postponed_tx = 8 [(cisco_field).name="PostponedTx"];
-}
-
-message rsvp_ng_api_ctx_event_bag {
-    optional string type = 1 [(cisco_field).name="Type"];
-    optional uint64 producer_summary_replay_id = 2 [(cisco_field).name="ProducerSummaryReplayID"];
-    optional bool is_sent = 3 [(cisco_field).name="IsSent"];
-    optional uint32 age = 4 [(cisco_field).name="Age"];
-    optional string filter_reason = 5 [(cisco_field).name="FilterReason"];
-}
-
-message rsvp_ng_api_ctx_history {
-    optional uint32 timestamp = 1 [(cisco_field).name="Timestamp"];
-    optional string event_type = 2 [(cisco_field).name="EventType"];
-    repeated uint32 event_data = 3 [(cisco_field).name="EventData"];
-}
-
-message rsvp_ng_api_ctx_bag {
-    optional uint64 producer_summary_replay_id = 1 [(cisco_field).name="ProducerSummaryReplayID"];
-    optional uint32 producer_summary_replay_base_id = 2 [(cisco_field).name="ProducerSummaryReplayBaseID"];
-    optional uint64 consumer_summary_replay_id = 3 [(cisco_field).name="ConsumerSummaryReplayID"];
-    optional uint32 consumer_summary_replay_base_id = 4 [(cisco_field).name="ConsumerSummaryReplayBaseID"];
-    optional uint32 flags = 5 [(cisco_field).name="Flags"];
-    optional string origin = 6 [(cisco_field).name="Origin"];
-    repeated rsvp_ng_api_stats_bag statistics = 7 [(cisco_field).name="Statistics"];
-    repeated rsvp_ng_api_ctx_event_bag events = 8 [(cisco_field).name="Events"];
-    repeated rsvp_ng_api_ctx_history history = 9 [(cisco_field).name="history"];
-    optional uint64 slave_producer_summary_replay_id = 10 [(cisco_field).name="SlaveProducerSummaryReplayID"];
-    optional uint64 slave_consumer_summary_replay_id = 11 [(cisco_field).name="SlaveConsumerSummaryReplayID"];
-}
-
-message rsvp_mgmt_ero_ipv4_subobj {
-    optional bool is_strict_route = 1 [(cisco_field).name="IsStrictRoute"];
-    optional bytes ero_address = 2 [(cisco_field).name="EROAddress"];
-    optional uint32 prefix_length = 3 [(cisco_field).name="PrefixLength"];
-}
-
-message rsvp_mgmt_ero_unnum_subobj {
-    optional bool is_strict_route = 1 [(cisco_field).name="IsStrictRoute"];
-    optional uint32 ero_interface_id = 2 [(cisco_field).name="EROInterfaceID"];
-    optional bytes ero_router_id = 3 [(cisco_field).name="ERORouterID"];
-}
-
-message rsvp_mgmt_ero_subobj {
-    optional string ero_type = 1 [(cisco_field).name="EROType"];
-    optional rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2 [(cisco_field).name="IPV4EROSubObject"];
-    optional rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3 [(cisco_field).name="UnnumberedEROSubObject"];
-}
-
-message rsvp_mgmt_rro_ipv4_subobj_flags {
-    optional bool is_protection_available = 1 [(cisco_field).name="IsProtectionAvailable"];
-    optional bool is_protection_in_use = 2 [(cisco_field).name="IsProtectionInUse"];
-    optional bool is_bandwidth_protected = 3 [(cisco_field).name="IsBandwidthProtected"];
-    optional bool is_node_protection_available = 4 [(cisco_field).name="IsNodeProtectionAvailable"];
-    optional bool is_node_id = 5 [(cisco_field).name="IsNodeID"];
-}
-
-message rsvp_mgmt_rro_label_subobj_flags {
-    optional bool is_global_label = 1 [(cisco_field).name="IsGlobalLabel"];
-}
-
-message rsvp_mgmt_rro_unnumbered_subobj_flags {
-    optional bool is_protection_available = 1 [(cisco_field).name="IsProtectionAvailable"];
-    optional bool is_protection_in_use = 2 [(cisco_field).name="IsProtectionInUse"];
-    optional bool is_bandwidth_protected = 3 [(cisco_field).name="IsBandwidthProtected"];
-    optional bool is_node_protection_available = 4 [(cisco_field).name="IsNodeProtectionAvailable"];
-    optional bool is_node_id = 5 [(cisco_field).name="IsNodeID"];
-}
-
-message rsvp_mgmt_rro_ipv4_subobj {
-    optional rsvp_mgmt_rro_ipv4_subobj_flags flags = 1 [(cisco_field).name="Flags"];
-    optional bytes rro_address = 2 [(cisco_field).name="RROAddress"];
-}
-
-message rsvp_mgmt_rro_label_subobj {
-    optional rsvp_mgmt_rro_label_subobj_flags flags = 1 [(cisco_field).name="Flags"];
-    optional uint32 label = 2 [(cisco_field).name="Label"];
-    optional bool is_label_variable_length = 3 [(cisco_field).name="IsLabelVariableLength"];
-    repeated uint32 variable_length_label = 4 [(cisco_field).name="VariableLengthLabel"];
-}
-
-message rsvp_mgmt_rro_unnumbered_subobj {
-    optional rsvp_mgmt_rro_unnumbered_subobj_flags flags = 1 [(cisco_field).name="Flags"];
-    optional bytes interface_address = 2 [(cisco_field).name="InterfaceAddress"];
-    optional uint32 interface_id = 3 [(cisco_field).name="InterfaceID"];
-}
-
-message rsvp_mgmt_rro_srlg_subobj {
-    repeated uint32 srl_gs = 1 [(cisco_field).name="SRLGs"];
-}
-
-message rsvp_mgmt_rro_subobj {
-    optional string rro_type = 1 [(cisco_field).name="RROType"];
-    optional rsvp_mgmt_rro_ipv4_subobj ipv4_rro_sub_object = 2 [(cisco_field).name="IPV4RROSubObject"];
-    optional rsvp_mgmt_rro_label_subobj label_rro_sub_object = 3 [(cisco_field).name="LabelRROSubObject"];
-    optional rsvp_mgmt_rro_unnumbered_subobj unnumbered_rro_sub_object = 4 [(cisco_field).name="UnnumberedRROSubObject"];
-    optional rsvp_mgmt_rro_srlg_subobj srlg_rro_sub_object = 5 [(cisco_field).name="SRLG_RROSubObject"];
-}
-
-message te_s2l_fec_t {
-    optional uint32 s2_l_fec_subgroup_id = 1 [(cisco_field).name="S2L_FECSubgroupID"];
-    optional uint32 s2_l_fec_lsp_id = 2 [(cisco_field).name="S2L_FEC_LSP_ID"];
-    optional uint32 s2_l_fec_tunnel_id = 3 [(cisco_field).name="S2L_FECTunnelID"];
-    optional bytes s2_l_fec_extended_tunnel_id = 4 [(cisco_field).name="S2L_FECExtendedTunnelID"];
-    optional bytes s2_l_fec_source = 5 [(cisco_field).name="S2L_FECSource"];
-    optional bytes s2_l_fec_dest = 6 [(cisco_field).name="S2L_FECDest"];
-    optional uint32 s2_l_fec_p2_mp_id = 7 [(cisco_field).name="S2L_FEC_P2MP_ID"];
-    optional bytes s2_l_fec_subgroup_originator = 8 [(cisco_field).name="S2L_FECSubgroupOriginator"];
-    optional string s2_l_fec_c_type = 9 [(cisco_field).name="S2L_FEC_CType"];
-    optional uint32 s2_l_fec_vrf = 10 [(cisco_field).name="S2L_FEC_VRF"];
-}
-
-message te_addr_type_ipv4_unnum {
-    optional bytes router_id = 1 [(cisco_field).name="RouterID"];
-    optional uint32 interface_index = 2 [(cisco_field).name="InterfaceIndex"];
-}
-
-message addr {
-    optional string type = 1 [(cisco_field).name="Type"];
-    optional bytes ipv4_address = 2 [(cisco_field).name="IPv4Address"];
-    optional te_addr_type_ipv4_unnum ipv4_unnumbered_address = 3 [(cisco_field).name="IPv4UnnumberedAddress"];
-}
-
-message te_addr_t_ {
-    optional addr te_addr = 1 [(cisco_field).name="TEAddr"];
-}
-
-message mpls_te_tunnel_egress_static_uni_info {
-    optional te_addr_t_ egress_port = 1 [(cisco_field).name="EgressPort"];
-    optional string local_termination = 2 [(cisco_field).name="LocalTermination"];
-    optional string remote_uni_type = 3 [(cisco_field).name="RemoteUniType"];
-    optional te_addr_t_ term_egress_port = 4 [(cisco_field).name="TermEgressPort"];
-}
-
-message te_lsp_fec_ctype_data_t {
-    optional string fec_c_type = 1 [(cisco_field).name="FEC_CType"];
-    optional bytes p2_p_lsp_destination = 2 [(cisco_field).name="P2P_LSPDestination"];
-    optional uint32 fec_destination_p2_mp_id = 3 [(cisco_field).name="FECDestinationP2MP_ID"];
-}
-
-message te_lsp_fec_t {
-    optional uint32 fec_lsp_id = 1 [(cisco_field).name="FEC_LSP_ID"];
-    optional uint32 fec_tunnel_id = 2 [(cisco_field).name="FECTunnelID"];
-    optional bytes fec_extended_tunnel_id = 3 [(cisco_field).name="FECExtendedTunnelID"];
-    optional bytes fec_source = 4 [(cisco_field).name="FECSource"];
-    optional te_lsp_fec_ctype_data_t fec_destination_info = 5 [(cisco_field).name="FECDestinationInfo"];
-    optional uint32 fec_vrf = 6 [(cisco_field).name="FEC_VRF"];
-}
-
-message affinity_name_bag {
-    optional uint32 constraint_type = 1 [(cisco_field).name="ConstraintType"];
-    optional uint32 constraint_value = 2 [(cisco_field).name="ConstraintValue"];
-    optional uint32 forward_ref_value = 3 [(cisco_field).name="ForwardRefValue"];
-    repeated uint32 constraint_extended_value = 4 [(cisco_field).name="ConstraintExtendedValue"];
-    repeated uint32 extended_forward_ref_value = 5 [(cisco_field).name="ExtendedForwardRefValue"];
-}
-
-message mpls_te_tunnels_affinity_info {
-    optional uint32 affinity_bits = 1 [(cisco_field).name="AffinityBits"];
-    optional uint32 affinity_mask = 2 [(cisco_field).name="AffinityMask"];
-    repeated affinity_name_bag named_affinities = 3 [(cisco_field).name="NamedAffinities"];
-}
-
-message mpls_srlg_info {
-    optional uint32 shared_risk_group = 1 [(cisco_field).name="SharedRiskGroup"];
-    optional string srlg_name = 2 [(cisco_field).name="SRLGName"];
-}
-
-message mpls_te_bfd_lsp_counters {
-    optional uint32 session_create_events = 1 [(cisco_field).name="SessionCreateEvents"];
-    optional uint32 session_up_events = 2 [(cisco_field).name="SessionUpEvents"];
-    optional uint32 session_creation_failed_events = 3 [(cisco_field).name="SessionCreationFailedEvents"];
-    optional uint32 session_down_events = 4 [(cisco_field).name="SessionDownEvents"];
-    optional uint32 session_admin_down_events = 5 [(cisco_field).name="SessionAdminDownEvents"];
-    optional uint32 session_gracefully_delete_events = 6 [(cisco_field).name="SessionGracefullyDeleteEvents"];
-    optional uint32 session_non_gracefully_delete_events = 7 [(cisco_field).name="SessionNonGracefullyDeleteEvents"];
-    optional uint32 session_create_timeout_events = 8 [(cisco_field).name="SessionCreateTimeoutEvents"];
-    optional uint32 session_replay_events = 9 [(cisco_field).name="SessionReplayEvents"];
-}
-
-message te_xro_subobj_ipv4 {
-    optional bytes address = 1 [(cisco_field).name="Address"];
-    optional uint32 prefix_len = 2 [(cisco_field).name="PrefixLen"];
-    optional string attribute = 3 [(cisco_field).name="Attribute"];
-    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
-}
-
-message te_xro_subobj_ipv6 {
-    optional bytes address = 1 [(cisco_field).name="Address"];
-    optional uint32 prefix_len = 2 [(cisco_field).name="PrefixLen"];
-    optional string attribute = 3 [(cisco_field).name="Attribute"];
-    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
-}
-
-message te_xro_subobj_unnum {
-    optional bytes te_router_id = 1 [(cisco_field).name="TERouterID"];
-    optional uint32 interface_id = 2 [(cisco_field).name="InterfaceID"];
-    optional string attribute = 3 [(cisco_field).name="Attribute"];
-    optional string exclusion_type = 4 [(cisco_field).name="ExclusionType"];
-}
-
-message te_xro_subobj_as {
-    optional uint32 as_number = 1 [(cisco_field).name="ASNumber"];
-}
-
-message te_xro_subobj_srlg {
-    optional uint32 srlg_id = 1 [(cisco_field).name="SRLG_ID"];
-    optional string exclusion_type = 2 [(cisco_field).name="ExclusionType"];
-}
-
-message te_xro_subobj_p2p_lsp {
-    optional te_lsp_fec_t fec = 1 [(cisco_field).name="FEC"];
-    optional bool ignore_lsp_id = 2 [(cisco_field).name="IgnoreLSP_ID"];
-    optional bool processing_node_exception = 3 [(cisco_field).name="ProcessingNodeException"];
-    optional bool penultimate_node_exception = 4 [(cisco_field).name="PenultimateNodeException"];
-    optional bool destination_node_exception = 5 [(cisco_field).name="DestinationNodeException"];
-    optional string exclusion_type = 6 [(cisco_field).name="ExclusionType"];
-}
-
-message te_xro_subobj {
-    optional string type = 1 [(cisco_field).name="Type"];
-    optional te_xro_subobj_ipv4 ipv4_subobject = 2 [(cisco_field).name="IPv4Subobject"];
-    optional te_xro_subobj_ipv6 ipv6_subobject = 3 [(cisco_field).name="IPv6Subobject"];
-    optional te_xro_subobj_unnum unnumbered_subobject = 4 [(cisco_field).name="UnnumberedSubobject"];
-    optional te_xro_subobj_as as_subobject = 5 [(cisco_field).name="ASSubobject"];
-    optional te_xro_subobj_srlg srlg_subobject = 6 [(cisco_field).name="SRLGSubobject"];
-    optional te_xro_subobj_p2p_lsp lsp_subobject = 7 [(cisco_field).name="LSPSubobject"];
-}
-
-message te_xro {
-    repeated te_xro_subobj xro_subobjects = 1 [(cisco_field).name="XROSubobjects"];
-}
-
-message hasi_id_event {
-    optional uint64 local_id = 1 [(cisco_field).name="LocalID"];
-    optional uint64 remore_id = 2 [(cisco_field).name="RemoreID"];
-    optional uint32 time = 3 [(cisco_field).name="Time"];
-    optional uint64 count = 4 [(cisco_field).name="Count"];
-}
-
-message hasi_s_obj_id_events {
-    optional hasi_id_event create = 1 [(cisco_field).name="Create"];
-    optional hasi_id_event updates = 2 [(cisco_field).name="Updates"];
-    optional hasi_id_event application_syncs = 3 [(cisco_field).name="ApplicationSyncs"];
-    optional hasi_id_event application_naks = 4 [(cisco_field).name="ApplicationNaks"];
-    optional hasi_id_event summary_replay_syncs = 5 [(cisco_field).name="SummaryReplaySyncs"];
-    optional hasi_id_event summary_replay_naks = 6 [(cisco_field).name="SummaryReplayNaks"];
-    optional hasi_id_event cache_nak_retries = 7 [(cisco_field).name="CacheNakRetries"];
-}
-
-message hasi_s_object_ctx {
-    optional uint64 object_sync_id = 1 [(cisco_field).name="ObjectSyncID"];
-    optional uint32 object_type = 2 [(cisco_field).name="ObjectType"];
-    optional hasi_s_obj_id_events object_id_events = 3 [(cisco_field).name="ObjectIdEvents"];
-}
-
-message hasi_m_id_events {
-    optional hasi_id_event application_syncs = 1 [(cisco_field).name="ApplicationSyncs"];
-    optional hasi_id_event implicit_deletes = 2 [(cisco_field).name="ImplicitDeletes"];
-    optional hasi_id_event application_naks = 3 [(cisco_field).name="ApplicationNaks"];
-    optional hasi_id_event summary_replay_syncs = 4 [(cisco_field).name="SummaryReplaySyncs"];
-    optional hasi_id_event summary_replay_naks = 5 [(cisco_field).name="SummaryReplayNaks"];
-}
-
-message hasi_m_object_slave_info {
-    optional uint32 slave_id = 1 [(cisco_field).name="SlaveId"];
-    optional hasi_m_id_events id_events = 2 [(cisco_field).name="IdEvents"];
-}
-
-message hasi_m_object_ctx {
-    optional uint64 object_sync_id = 1 [(cisco_field).name="ObjectSyncID"];
-    optional uint32 object_type = 2 [(cisco_field).name="ObjectType"];
-    optional uint32 queue = 3 [(cisco_field).name="Queue"];
-    optional uint64 create_id = 4 [(cisco_field).name="CreateID"];
-    optional uint32 create_time = 5 [(cisco_field).name="CreateTime"];
-    optional uint32 update_time = 6 [(cisco_field).name="UpdateTime"];
-    optional uint32 delete_time = 7 [(cisco_field).name="DeleteTime"];
-    optional uint32 delete_ctx_lenght = 8 [(cisco_field).name="DeleteCtxLenght"];
-    repeated hasi_m_object_slave_info slave_information = 9 [(cisco_field).name="SlaveInformation"];
-    optional bool has_history = 10 [(cisco_field).name="HasHistory"];
-    optional hasi_s_obj_id_events pre_active_history = 11 [(cisco_field).name="PreActiveHistory"];
-}
-
-message te_serv_p2mp_auto_tun {
-    optional uint32 context = 1 [(cisco_field).name="Context"];
-    optional string client = 2 [(cisco_field).name="Client"];
-    optional bytes source = 3 [(cisco_field).name="Source"];
-    optional string attribute_set_name = 4 [(cisco_field).name="AttributeSetName"];
-    optional bool attribute_set_resloved = 5 [(cisco_field).name="AttributeSetResloved"];
-    repeated uint32 egress_information = 6 [(cisco_field).name="EgressInformation"];
-    optional uint32 state = 7 [(cisco_field).name="State"];
-    optional uint32 result = 8 [(cisco_field).name="Result"];
-    optional uint64 updated = 9 [(cisco_field).name="Updated"];
-    optional bool needs_replay = 10 [(cisco_field).name="NeedsReplay"];
-}
-
-message te_serv_p2p_auto_tun {
-    optional uint32 context = 1 [(cisco_field).name="Context"];
-    optional string protocol_tyoe = 2 [(cisco_field).name="ProtocolTyoe"];
-    optional string client_instance_name = 3 [(cisco_field).name="ClientInstanceName"];
-    optional bytes next_hop = 4 [(cisco_field).name="NextHop"];
-    optional string explicit_path = 5 [(cisco_field).name="ExplicitPath"];
-    optional string attribute_set_name = 6 [(cisco_field).name="AttributeSetName"];
-    optional bool attribute_set_resolved = 7 [(cisco_field).name="AttributeSetResolved"];
-    optional uint64 updated = 8 [(cisco_field).name="Updated"];
-    optional bool needs_replay = 9 [(cisco_field).name="NeedsReplay"];
-    optional bool ipv6_caps_requested = 10 [(cisco_field).name="Ipv6CapsRequested"];
-    optional bool ipv6_caps_enabled = 11 [(cisco_field).name="Ipv6CapsEnabled"];
-}
-
-message te_serv_p2mp_einfo {
-    optional string client = 1 [(cisco_field).name="Client"];
-    optional uint32 state = 2 [(cisco_field).name="State"];
-    optional uint32 result = 3 [(cisco_field).name="Result"];
-    repeated uint32 egress_information = 4 [(cisco_field).name="EgressInformation"];
-    optional uint64 updated = 5 [(cisco_field).name="Updated"];
-    optional bool needs_replay = 6 [(cisco_field).name="NeedsReplay"];
-}
-
-message mpls_te_p2mp_fsm_event_counts {
-    repeated uint32 counts = 1 [(cisco_field).name="Counts"];
-}
-
-message mpls_te_p2mp_fsm_event_stat {
-    optional uint32 event_time = 1 [(cisco_field).name="EventTime"];
-    optional string previous_state = 2 [(cisco_field).name="PreviousState"];
-    optional string next_state = 3 [(cisco_field).name="NextState"];
-    optional string event_id = 4 [(cisco_field).name="EventID"];
-}
-
-message mpls_te_p2mp_fsm_info {
-    optional string s2_l_fsm_state = 1 [(cisco_field).name="S2L_FSMState"];
-    optional uint32 s2_l_flags = 2 [(cisco_field).name="S2LFlags"];
-    optional string deletion_cause = 3 [(cisco_field).name="DeletionCause"];
-    optional string deletion_subcause = 4 [(cisco_field).name="DeletionSubcause"];
-    optional uint32 injected_events = 5 [(cisco_field).name="InjectedEvents"];
-    repeated mpls_te_p2mp_fsm_event_stat event_statistics = 6 [(cisco_field).name="EventStatistics"];
-    optional mpls_te_p2mp_fsm_event_counts event_counts = 7 [(cisco_field).name="EventCounts"];
-    optional bool path_to_be_received = 8 [(cisco_field).name="PathToBeReceived"];
-    optional bool reservation_to_be_received = 9 [(cisco_field).name="ReservationToBeReceived"];
-    optional bool label_to_be_received = 10 [(cisco_field).name="LabelToBeReceived"];
-    optional bool rewrite_to_be_received = 11 [(cisco_field).name="RewriteToBeReceived"];
-    optional bool sync_id_from_rsvp_to_be_received = 12 [(cisco_field).name="sync_id_from_rsvp_to_be_received"];
-    optional bool sync_id_from_master_to_be_received = 13 [(cisco_field).name="sync_id_from_master_to_be_received"];
-    optional bool frr_active_pending = 14 [(cisco_field).name="frr_active_pending"];
-    optional bool config_consistent = 15 [(cisco_field).name="config_consistent"];
-    optional bool missing_vif = 16 [(cisco_field).name="missing_vif"];
-    optional bool signame_diff = 17 [(cisco_field).name="signame_diff"];
-    optional bool frr_diff = 18 [(cisco_field).name="frr_diff"];
-    optional bool frr_np_diff = 19 [(cisco_field).name="frr_np_diff"];
-    optional bool frr_bwp_diff = 20 [(cisco_field).name="frr_bwp_diff"];
-    optional bool record_route_diff = 21 [(cisco_field).name="record_route_diff"];
-    optional bool soft_preemption_diff = 22 [(cisco_field).name="soft_preemption_diff"];
-}
-
-message te_serv_p2mp_einfos {
-    repeated te_serv_p2mp_einfo service_infos = 1 [(cisco_field).name="ServiceInfos"];
-}
-
-message te_service_info {
-    optional string service_type = 1 [(cisco_field).name="ServiceType"];
-    optional te_serv_p2mp_einfos vif_egress_info = 2 [(cisco_field).name="VIFEgressInfo"];
-    optional te_serv_p2mp_einfos s2_l_egress_info = 3 [(cisco_field).name="S2LEgressInfo"];
-    optional te_serv_p2mp_auto_tun vif_auto_tunnel_info = 4 [(cisco_field).name="VIFAutoTunnelInfo"];
-    optional te_serv_p2p_auto_tun vif_auto_tunnel_p2_p_info = 5 [(cisco_field).name="VIFAutoTunnelP2PInfo"];
-}
-
-message te_odu_flex_cbr_info {
-    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
-    optional uint32 tolerance = 2 [(cisco_field).name="Tolerance"];
-}
-
-message te_odu_flex_gfp_f_res_info {
-    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
-}
-
-message te_odu_flex_gfp_f_non_res_info {
-    optional uint32 bit_rate = 1 [(cisco_field).name="BitRate"];
-}
-
-message te_odu_v3_bw {
-    optional string odu_level = 1 [(cisco_field).name="ODULevel"];
-    optional te_odu_flex_cbr_info odu_flex_cbr = 2 [(cisco_field).name="ODUFlexCBR"];
-    optional te_odu_flex_gfp_f_res_info odu_flex_gfp_f_res = 3 [(cisco_field).name="ODUFlexGFP_FRes"];
-    optional te_odu_flex_gfp_f_non_res_info odu_flex_gfp_f_non_res = 4 [(cisco_field).name="ODUFlexGFP_FNonRes"];
-}
-
-message mpls_te_logging_attributes {
-    optional bool lsp_state = 1 [(cisco_field).name="LSPState"];
-    optional bool s2_l_state = 2 [(cisco_field).name="S2LState"];
-    optional bool lsp_re_route = 3 [(cisco_field).name="LSPReRoute"];
-    optional bool lsp_re_opt = 4 [(cisco_field).name="LSPReOpt"];
-    optional bool lsp_insufficient_bw = 5 [(cisco_field).name="LSPInsufficientBW"];
-    optional bool lsp_bandwidth_change = 6 [(cisco_field).name="LSPBandwidthChange"];
-    optional bool lsp_pcalc_failure_logging_enabled = 7 [(cisco_field).name="LSP_PCALCFailureLoggingEnabled"];
-    optional bool all_logging_enabled = 8 [(cisco_field).name="AllLoggingEnabled"];
-}
-
-message mpls_te_attribute_set_auto_mesh {
-    optional uint32 configured_bandwidth = 1 [(cisco_field).name="ConfiguredBandwidth"];
-    optional uint32 dste_class_type = 2 [(cisco_field).name="DSTEClassType"];
-    optional bool is_bandwidth_configured = 3 [(cisco_field).name="IsBandwidthConfigured"];
-    optional uint32 setup_priority = 4 [(cisco_field).name="SetupPriority"];
-    optional uint32 hold_priority = 5 [(cisco_field).name="HoldPriority"];
-    optional bool is_priority_configured = 6 [(cisco_field).name="IsPriorityConfigured"];
-    optional uint32 policy_class = 7 [(cisco_field).name="PolicyClass"];
-    repeated uint32 policy_classes = 8 [(cisco_field).name="PolicyClasses"];
-    optional bool is_policyclass_configured = 9 [(cisco_field).name="IsPolicyclassConfigured"];
-    optional uint32 forward_class = 10 [(cisco_field).name="ForwardClass"];
-    optional mpls_te_tunnels_affinity_info affinity = 11 [(cisco_field).name="Affinity"];
-    optional bool is_affinity_configured = 12 [(cisco_field).name="IsAffinityConfigured"];
-    optional bool fast_reroute = 13 [(cisco_field).name="FastReroute"];
-    optional bool frr_node_protection = 14 [(cisco_field).name="FRRNodeProtection"];
-    optional bool frr_bandwidth_protection = 15 [(cisco_field).name="FRRBandwidthProtection"];
-    optional bool record_route = 16 [(cisco_field).name="RecordRoute"];
-    optional bool auto_bandwidth_collect = 17 [(cisco_field).name="AutoBandwidthCollect"];
-    optional bool auto_route_announce = 18 [(cisco_field).name="AutoRouteAnnounce"];
-    optional bool soft_preemption_configured = 19 [(cisco_field).name="SoftPreemptionConfigured"];
-    optional mpls_te_logging_attributes logging = 20 [(cisco_field).name="Logging"];
-    optional uint32 bandwidth = 21 [(cisco_field).name="bandwidth"];
-    optional uint32 load_share = 22 [(cisco_field).name="LoadShare"];
-    optional bool is_interface_bw_configured = 23 [(cisco_field).name="IsInterfaceBWConfigured"];
-    repeated uint32 mesh_group_id = 24 [(cisco_field).name="MeshGroupID"];
-    repeated uint32 tunnel_id = 25 [(cisco_field).name="TunnelID"];
-}
-
-message mpls_te_protected_if_name_str {
-    optional string protected_interface = 1 [(cisco_field).name="ProtectedInterface"];
-}
-
-message mpls_te_attribute_set_sig_name {
-    optional string name = 1 [(cisco_field).name="Name"];
-    optional string source_type = 2 [(cisco_field).name="SourceType"];
-    optional string protected_interface_type = 3 [(cisco_field).name="ProtectedInterfaceType"];
-    optional bool is_mp_addresses = 4 [(cisco_field).name="IsMPAddresses"];
-}
-
-message mpls_te_attribute_set_auto_backup {
-    optional bool is_signalled_name_configured = 1 [(cisco_field).name="IsSignalledNameConfigured"];
-    optional mpls_te_attribute_set_sig_name signalled_name = 2 [(cisco_field).name="SignalledName"];
-    optional uint32 setup_priority = 3 [(cisco_field).name="SetupPriority"];
-    optional uint32 hold_priority = 4 [(cisco_field).name="HoldPriority"];
-    optional bool is_priority_configured = 5 [(cisco_field).name="IsPriorityConfigured"];
-    optional uint32 policy_class = 6 [(cisco_field).name="PolicyClass"];
-    repeated uint32 policy_classes = 7 [(cisco_field).name="PolicyClasses"];
-    optional bool is_policyclass_configured = 8 [(cisco_field).name="IsPolicyclassConfigured"];
-    optional mpls_te_tunnels_affinity_info affinity = 9 [(cisco_field).name="Affinity"];
-    optional bool is_affinity_configured = 10 [(cisco_field).name="IsAffinityConfigured"];
-    optional bool record_route = 11 [(cisco_field).name="RecordRoute"];
-    optional mpls_te_logging_attributes logging = 12 [(cisco_field).name="Logging"];
-    repeated mpls_te_protected_if_name_str protected_interfaces = 13 [(cisco_field).name="ProtectedInterfaces"];
-    repeated uint32 tunnel_id = 14 [(cisco_field).name="TunnelID"];
-}
-
-message mpls_te_attribute_set_version {
-    optional string attribute_type = 1 [(cisco_field).name="AttributeType"];
-    optional uint32 generation = 2 [(cisco_field).name="Generation"];
-    optional bool is_default = 3 [(cisco_field).name="IsDefault"];
-}
-
-message mpls_te_attribute_set_path_option {
-    optional uint32 configured_bandwidth = 1 [(cisco_field).name="ConfiguredBandwidth"];
-    optional uint32 cost_limit = 2 [(cisco_field).name="CostLimit"];
-    optional uint32 dste_class_type = 3 [(cisco_field).name="DSTEClassType"];
-    optional string bandwidth_type = 4 [(cisco_field).name="BandwidthType"];
-    optional bool is_bandwidth_configured = 5 [(cisco_field).name="IsBandwidthConfigured"];
-    optional bool is_cost_limit_configured = 6 [(cisco_field).name="IsCostLimitConfigured"];
-    optional mpls_te_tunnels_affinity_info affinity = 7 [(cisco_field).name="Affinity"];
-    optional bool is_affinity_configured = 8 [(cisco_field).name="IsAffinityConfigured"];
-    repeated uint32 tunnel_id = 9 [(cisco_field).name="TunnelID"];
-    optional uint32 generation = 10 [(cisco_field).name="Generation"];
-    repeated mpls_te_attribute_set_version version_info = 11 [(cisco_field).name="VersionInfo"];
-    optional uint32 path_invalidation_timeout = 12 [(cisco_field).name="PathInvalidationTimeout"];
-    optional uint32 path_invalidation_action = 13 [(cisco_field).name="PathInvalidationAction"];
-    optional bool is_path_invalidation_timeout_configured = 14 [(cisco_field).name="IsPathInvalidationTimeoutConfigured"];
-    optional bool is_path_invalidation_action_configured = 15 [(cisco_field).name="IsPathInvalidationActionConfigured"];
-    optional string exclude_list_name = 16 [(cisco_field).name="ExcludeListName"];
-    optional bool is_exclude_list_name_configured = 17 [(cisco_field).name="IsExcludeListNameConfigured"];
-}
-
-message mpls_te_attribute_set_xro {
-    optional te_xro xro = 1 [(cisco_field).name="XRO"];
-}
-
-message mpls_te_attribute_set_p2mp_te {
-    optional bool fast_reroute = 1 [(cisco_field).name="FastReroute"];
-    optional bool frr_bandwidth_protection = 2 [(cisco_field).name="FRRBandwidthProtection"];
-    optional uint32 setup_priority = 3 [(cisco_field).name="SetupPriority"];
-    optional uint32 hold_priority = 4 [(cisco_field).name="HoldPriority"];
-    optional bool is_priority_configured = 5 [(cisco_field).name="IsPriorityConfigured"];
-    optional uint32 configured_bandwidth = 6 [(cisco_field).name="ConfiguredBandwidth"];
-    optional uint32 dste_class_type = 7 [(cisco_field).name="DSTEClassType"];
-    optional bool is_bandwidth_configured = 8 [(cisco_field).name="IsBandwidthConfigured"];
-    repeated uint32 tunnel_id = 9 [(cisco_field).name="TunnelID"];
-    optional mpls_te_tunnels_affinity_info affinity = 10 [(cisco_field).name="Affinity"];
-    optional bool is_affinity_configured = 11 [(cisco_field).name="IsAffinityConfigured"];
-}
-
-message mpls_te_attribute_set_aps_pp {
-    optional string snc_mode = 1 [(cisco_field).name="SNCMode"];
-    optional uint32 tcm_id = 2 [(cisco_field).name="TCMId"];
-    optional string protection_type = 3 [(cisco_field).name="ProtectionType"];
-    optional string protection_mode = 4 [(cisco_field).name="ProtectionMode"];
-    optional uint32 wait_to_restore_time = 5 [(cisco_field).name="WaitToRestoreTime"];
-    optional uint32 hold_off_time = 6 [(cisco_field).name="HoldOffTime"];
-    optional string path_prot_profile_type = 7 [(cisco_field).name="PathProtProfileType"];
-}
-
-message mpls_te_attribute_set_sr_prepend_entry {
-    optional string type = 1 [(cisco_field).name="Type"];
-    optional uint32 index = 2 [(cisco_field).name="Index"];
-    optional uint32 next_label = 3 [(cisco_field).name="NextLabel"];
-}
-
-message mpls_te_attribute_set_sr_prepend_list {
-    repeated mpls_te_attribute_set_sr_prepend_entry prepend_entries = 1 [(cisco_field).name="PrependEntries"];
-}
-
-message mpls_te_attribute_set_p2p_te {
-    repeated uint32 tunnel_id = 1 [(cisco_field).name="TunnelID"];
-    optional mpls_te_tunnels_affinity_info affinity = 2 [(cisco_field).name="Affinity"];
-    optional bool is_affinity_configured = 3 [(cisco_field).name="IsAffinityConfigured"];
-    optional string path_selection_segment_routing_adjacency_protection = 4 [(cisco_field).name="PathSelectionSegmentRoutingAdjacencyProtection"];
-    optional bool is_path_selection_segment_routing_adjacency_protection_configured = 5 [(cisco_field).name="IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured"];
-    optional uint32 path_invalidation_timeout = 6 [(cisco_field).name="PathInvalidationTimeout"];
-    optional string path_selection_invalidation_action = 7 [(cisco_field).name="PathSelectionInvalidationAction"];
-    optional bool is_path_invalidation_timeout_configured = 8 [(cisco_field).name="IsPathInvalidationTimeoutConfigured"];
-    optional bool is_path_invalidation_action_configured = 9 [(cisco_field).name="IsPathInvalidationActionConfigured"];
-    optional string path_selection_metric = 10 [(cisco_field).name="PathSelectionMetric"];
-    optional bool is_path_selection_metric_configured = 11 [(cisco_field).name="IsPathSelectionMetricConfigured"];
-    optional uint32 path_selection_segment_routing_margin = 12 [(cisco_field).name="PathSelectionSegmentRoutingMargin"];
-    optional bool is_path_selection_segment_routing_margin_relative = 13 [(cisco_field).name="IsPathSelectionSegmentRoutingMarginRelative"];
-    optional bool is_path_selection_segment_routing_margin_configured = 14 [(cisco_field).name="IsPathSelectionSegmentRoutingMarginConfigured"];
-    optional uint32 path_selection_segment_routing_segment_limit = 15 [(cisco_field).name="PathSelectionSegmentRoutingSegmentLimit"];
-    optional bool is_path_selection_segment_routing_segment_limit_configured = 16 [(cisco_field).name="IsPathSelectionSegmentRoutingSegmentLimitConfigured"];
-    optional bool is_path_select_configured = 17 [(cisco_field).name="IsPathSelectConfigured"];
-    optional mpls_te_logging_attributes logging = 18 [(cisco_field).name="Logging"];
-    optional mpls_te_attribute_set_sr_prepend_list prepend_list = 19 [(cisco_field).name="PrependList"];
-    optional bool is_prepend_list_configured = 20 [(cisco_field).name="IsPrependListConfigured"];
-}
-
-message mpls_te_attribute_set_union {
-    optional string tunnel_attribute_set_type = 1 [(cisco_field).name="TunnelAttributeSetType"];
-    optional mpls_te_attribute_set_path_option attribute_set_path_option = 2 [(cisco_field).name="AttributeSetPathOption"];
-    optional mpls_te_attribute_set_auto_backup attribute_set_autobackup = 3 [(cisco_field).name="AttributeSetAutobackup"];
-    optional mpls_te_attribute_set_auto_mesh attribute_set_automesh = 4 [(cisco_field).name="AttributeSetAutomesh"];
-    optional mpls_te_attribute_set_xro attribute_set_xro = 5 [(cisco_field).name="AttributeSetXRO"];
-    optional mpls_te_attribute_set_p2mp_te attribute_set_p2_mpte = 6 [(cisco_field).name="AttributeSetP2MPTE"];
-    optional mpls_te_attribute_set_aps_pp attribute_set_aps_pp = 7 [(cisco_field).name="AttributeSetAPS_PP"];
-    optional mpls_te_attribute_set_p2p_te attribute_set_p2_p_te = 8 [(cisco_field).name="AttributeSetP2P_TE"];
-}
-
-message mpls_te_attribute_set {
-    optional string tunnel_attribute_set_name = 1 [(cisco_field).name="TunnelAttributeSetName"];
-    optional uint32 tunnel_attribute_set_name_crc32 = 2 [(cisco_field).name="TunnelAttributeSetNameCRC32"];
-    optional mpls_te_attribute_set_union attribute_set_union = 3 [(cisco_field).name="AttributeSetUnion"];
-}
-
-message mpls_te_mgmt_wdm_fixed_grid_label {
-    optional bool label_set = 1 [(cisco_field).name="LabelSet"];
-    optional string grid = 2 [(cisco_field).name="Grid"];
-    optional string channel_spacing = 3 [(cisco_field).name="ChannelSpacing"];
-    optional uint32 identifier = 4 [(cisco_field).name="Identifier"];
-    optional sint32 channel = 5 [(cisco_field).name="Channel"];
-}
-
-message mpls_te_mgmt_g709_otn_fixed_size_label {
-    optional uint32 tpn = 1 [(cisco_field).name="TPN"];
-    optional uint32 bit_map_length = 2 [(cisco_field).name="BitMapLength"];
-    repeated uint32 bit_map = 3 [(cisco_field).name="BitMap"];
-}
-
-message mpls_te_mgmt_gmpls_label {
-    optional string label_type = 1 [(cisco_field).name="LabelType"];
-    optional mpls_te_mgmt_wdm_fixed_grid_label wdm = 2 [(cisco_field).name="WDM"];
-    optional mpls_te_mgmt_g709_otn_fixed_size_label otn = 3 [(cisco_field).name="OTN"];
-}
-
-message mpls_te_mgmt_gmpls_labels {
-    optional mpls_te_mgmt_gmpls_label path_ingress_label = 1 [(cisco_field).name="PathIngressLabel"];
-    optional mpls_te_mgmt_gmpls_label path_egress_label = 2 [(cisco_field).name="PathEgressLabel"];
-    optional mpls_te_mgmt_gmpls_label resv_ingress_label = 3 [(cisco_field).name="ResvIngressLabel"];
-    optional mpls_te_mgmt_gmpls_label resv_egress_label = 4 [(cisco_field).name="ResvEgressLabel"];
-}
-
-message mpls_te_mgmt_wdm_uni_tunnel_info {
-    optional string tunnel_state = 1 [(cisco_field).name="TunnelState"];
-    optional string tunnel_role = 2 [(cisco_field).name="TunnelRole"];
-    optional uint32 tunnel_id = 3 [(cisco_field).name="TunnelID"];
-    optional uint32 lsp_id = 4 [(cisco_field).name="LSP_ID"];
-    optional bytes local_optical_router_id = 5 [(cisco_field).name="LocalOpticalRouterID"];
-    optional bytes remote_optical_router_id = 6 [(cisco_field).name="RemoteOpticalRouterID"];
-    optional string controlled_interface = 7 [(cisco_field).name="ControlledInterface"];
-    optional bytes source_address = 8 [(cisco_field).name="SourceAddress"];
-    optional bytes destination_address = 9 [(cisco_field).name="DestinationAddress"];
-    optional bytes extended_tunnel_id = 10 [(cisco_field).name="ExtendedTunnelID"];
-    optional string label_origin = 11 [(cisco_field).name="LabelOrigin"];
-    optional bool srlg_discovery = 12 [(cisco_field).name="SRLGDiscovery"];
-}
-
-message mpls_te_tunnel_otn_info {
-    optional te_odu_v3_bw bandwidth_cfg = 1 [(cisco_field).name="BandwidthCfg"];
-}
-
-message mpls_te_s2l_otn_info {
-    optional string incoming_controller = 1 [(cisco_field).name="IncomingController"];
-    optional string incoming_controller_state = 2 [(cisco_field).name="IncomingControllerState"];
-    optional string incoming_sub_controller = 3 [(cisco_field).name="IncomingSubController"];
-    optional string incoming_sub_controller_state = 4 [(cisco_field).name="IncomingSubControllerState"];
-    optional string outgoing_controller = 5 [(cisco_field).name="OutgoingController"];
-    optional string outgoing_controller_state = 6 [(cisco_field).name="OutgoingControllerState"];
-    optional string outgoing_sub_controller = 7 [(cisco_field).name="OutgoingSubController"];
-    optional string outgoing_sub_controller_state = 8 [(cisco_field).name="OutgoingSubControllerState"];
-    optional te_odu_v3_bw bandwidth = 9 [(cisco_field).name="Bandwidth"];
-    optional mpls_te_mgmt_gmpls_labels labels = 10 [(cisco_field).name="Labels"];
-    optional uint32 cross_connect_id = 11 [(cisco_field).name="CrossConnectID"];
-    optional bool is_connected = 12 [(cisco_field).name="IsConnected"];
-    optional uint32 uptime = 13 [(cisco_field).name="Uptime"];
-    optional uint32 outgoing_controller_ifhandle = 14 [(cisco_field).name="OutgoingControllerIfhandle"];
-    optional uint32 outgoing_sub_controller_ifhandle = 15 [(cisco_field).name="OutgoingSubControllerIfhandle"];
-    optional uint32 incoming_controller_ifhandle = 16 [(cisco_field).name="IncomingControllerIfhandle"];
-    optional uint32 incoming_sub_controller_ifhandle = 17 [(cisco_field).name="IncomingSubControllerIfhandle"];
-    optional uint32 gpid = 18 [(cisco_field).name="GPID"];
-}
-
-message te_pvt_prot_obj_t {
-    optional bool s_bit = 1 [(cisco_field).name="sBit"];
-    optional bool p_bit = 2 [(cisco_field).name="pBit"];
-    optional bool n_bit = 3 [(cisco_field).name="nBit"];
-    optional bool o_bit = 4 [(cisco_field).name="oBit"];
-    optional string protect_type = 5 [(cisco_field).name="ProtectType"];
-    optional bool is_wtr_present = 6 [(cisco_field).name="IsWTRPresent"];
-    optional uint32 wtr_timeout = 7 [(cisco_field).name="WTRTimeout"];
-    optional bool is_ho_present = 8 [(cisco_field).name="IsHOPresent"];
-    optional uint32 ho_timeout = 9 [(cisco_field).name="HOTimeout"];
-    optional bool is_snc_mode_present = 10 [(cisco_field).name="IsSNCModePresent"];
-    optional string snc_mode = 11 [(cisco_field).name="snc_mode"];
-    optional uint32 tcm_id = 12 [(cisco_field).name="tcm_id"];
-    optional string path_prot_profile_type = 13 [(cisco_field).name="path_prot_profile_type"];
-}
-
-message mpls_te_s2l_aps_info {
-    optional te_pvt_prot_obj_t protection_info = 1 [(cisco_field).name="ProtectionInfo"];
-}
-
-message mpls_te_otn_s2l_info {
-    optional mpls_te_s2l_otn_info otn = 1 [(cisco_field).name="Otn"];
-    optional mpls_te_s2l_aps_info aps = 2 [(cisco_field).name="Aps"];
-}
-
-message mpls_te_tunnel_static_uni_info {
-    optional string client_port = 1 [(cisco_field).name="ClientPort"];
-    optional uint32 client_if_handle = 2 [(cisco_field).name="ClientIfHandle"];
-    optional string client_odu_name = 3 [(cisco_field).name="ClientOduName"];
-    optional uint32 client_odu_if_handle = 4 [(cisco_field).name="ClientOduIfHandle"];
-    optional uint32 cross_connect_id = 5 [(cisco_field).name="CrossConnectID"];
-    optional bool is_connected = 6 [(cisco_field).name="IsConnected"];
-    optional uint32 uptime = 7 [(cisco_field).name="Uptime"];
-    optional string local_termination = 8 [(cisco_field).name="LocalTermination"];
-    optional string static_uni_type = 9 [(cisco_field).name="StaticUniType"];
-    optional string term_client_port = 10 [(cisco_field).name="TermClientPort"];
-    optional uint32 term_client_if_handle = 11 [(cisco_field).name="TermClientIfHandle"];
-}
-
-message mpls_te_transport_tunnel_info {
-    optional mpls_te_tunnel_otn_info otn = 1 [(cisco_field).name="OTN"];
-    optional mpls_te_tunnel_static_uni_info static_uni = 2 [(cisco_field).name="StaticUni"];
-    optional mpls_te_tunnel_egress_static_uni_info egress_static_uni = 3 [(cisco_field).name="EgressStaticUni"];
-}
-
-message mpls_te_tunnel_aps_info {
-    optional mpls_te_attribute_set_aps_pp protection_profile = 1 [(cisco_field).name="ProtectionProfile"];
-    optional string active_lsp = 2 [(cisco_field).name="ActiveLSP"];
-    optional string diversity_type = 3 [(cisco_field).name="DiversityType"];
-}
-
-message mpls_te_tunnel_restoration_info {
-    optional string revert_option = 1 [(cisco_field).name="RevertOption"];
-    optional string diverse_lsp = 2 [(cisco_field).name="DiverseLSP"];
-    optional string diversity_type = 3 [(cisco_field).name="DiversityType"];
-}
-
-message mpls_te_tunnel_otn_bidir_info {
-    optional mpls_te_tunnel_aps_info aps = 1 [(cisco_field).name="Aps"];
-    optional mpls_te_tunnel_restoration_info restoration = 2 [(cisco_field).name="Restoration"];
-}
-
-message te_s2l_sr_path_hop {
-    optional string sid_type = 1 [(cisco_field).name="SIDType"];
-    optional bool has_ip_addresses = 2 [(cisco_field).name="HasIPAddresses"];
-    optional bytes local_addr = 3 [(cisco_field).name="LocalAddr"];
-    optional bytes remote_addr = 4 [(cisco_field).name="RemoteAddr"];
-    optional bool has_mpls_label = 5 [(cisco_field).name="HasMPLSLabel"];
-    optional uint32 mpls_label_value = 6 [(cisco_field).name="MPLSLabelValue"];
-    optional bool has_entropy_label = 7 [(cisco_field).name="HasEntropyLabel"];
-}
-
-message te_pp_sw_log_entry_bag {
-    optional uint32 path_protection_switchover_event_index = 1 [(cisco_field).name="PathProtectionSwitchoverEventIndex"];
-    optional uint32 path_protection_tunnel_id = 2 [(cisco_field).name="PathProtectionTunnelID"];
-    optional uint32 from_lsp_id = 3 [(cisco_field).name="FromLSP_ID"];
-    optional uint32 to_lsp_id = 4 [(cisco_field).name="ToLSP_ID"];
-    optional uint32 date_of_error_detection = 5 [(cisco_field).name="DateOfErrorDetection"];
-    optional uint32 date_of_error_detection_millisec = 6 [(cisco_field).name="DateOfErrorDetectionMillisec"];
-    optional uint32 switchover_duration_millisec = 7 [(cisco_field).name="SwitchoverDurationMillisec"];
-    optional string path_protection_switchover_reason = 8 [(cisco_field).name="PathProtectionSwitchoverReason"];
-}
-
-message mpls_te_p2mp_pcalc_error {
-    optional string error_message = 1 [(cisco_field).name="ErrorMessage"];
-    optional string lsp_mode = 2 [(cisco_field).name="LSPMode"];
-    optional uint32 log_time = 3 [(cisco_field).name="LogTime"];
-}
-
-message mpls_te_p2mp_sig_error {
-    optional uint32 error_node = 1 [(cisco_field).name="ErrorNode"];
-    optional uint32 error = 2 [(cisco_field).name="Error"];
-    optional uint32 sub_code = 3 [(cisco_field).name="SubCode"];
-    optional string lsp_mode = 4 [(cisco_field).name="LSPMode"];
-    optional uint32 log_time = 5 [(cisco_field).name="LogTime"];
-    optional uint32 signalling_lsp_id = 6 [(cisco_field).name="SignallingLSP_ID"];
-    optional string error_message = 7 [(cisco_field).name="ErrorMessage"];
-    optional bool reverse_lsp = 8 [(cisco_field).name="ReverseLSP"];
-}
-
-message mpls_te_p2mp_path_option {
-    optional uint32 option_index = 1 [(cisco_field).name="OptionIndex"];
-    optional string path_option_type = 2 [(cisco_field).name="PathOptionType"];
-    optional string explicit_path_name = 3 [(cisco_field).name="ExplicitPathName"];
-    optional uint32 explicit_path_id = 4 [(cisco_field).name="ExplicitPathID"];
-    optional uint32 holddown_duration = 5 [(cisco_field).name="HolddownDuration"];
-    optional bytes pce_address = 6 [(cisco_field).name="PCEAddress"];
-    optional string path_option_area_id = 7 [(cisco_field).name="PathOptionAreaID"];
-    optional bool is_strict_explicit_path = 8 [(cisco_field).name="IsStrictExplicitPath"];
-    optional bool is_helddown = 9 [(cisco_field).name="IsHelddown"];
-    optional bool is_lockdown = 10 [(cisco_field).name="IsLockdown"];
-    optional bool is_verbatim = 11 [(cisco_field).name="IsVerbatim"];
-    optional bool is_disabled = 12 [(cisco_field).name="IsDisabled"];
-    optional bool has_attribute_set = 13 [(cisco_field).name="HasAttributeSet"];
-    optional mpls_te_attribute_set attribute_set = 14 [(cisco_field).name="AttributeSet"];
-    optional bool attribute_set_found = 15 [(cisco_field).name="AttributeSetFound"];
-    repeated mpls_te_p2mp_pcalc_error path_calculation_error = 16 [(cisco_field).name="PathCalculationError"];
-    repeated mpls_te_p2mp_pcalc_error remerge_error = 17 [(cisco_field).name="RemergeError"];
-    repeated mpls_te_p2mp_sig_error signalling_error = 18 [(cisco_field).name="SignallingError"];
-    optional bool has_xro_attribute_set = 19 [(cisco_field).name="HasXROAttributeSet"];
-    optional bool xro_attribute_set_found = 20 [(cisco_field).name="XROAttributeSetFound"];
-    optional mpls_te_attribute_set xro_attribute_set = 21 [(cisco_field).name="XROAttributeSet"];
-    optional bool is_segment_routing = 22 [(cisco_field).name="IsSegmentRouting"];
-    optional uint32 protected_by_path_option_index = 23 [(cisco_field).name="ProtectedByPathOptionIndex"];
-    optional uint32 restored_from_path_option_index = 24 [(cisco_field).name="RestoredFromPathOptionIndex"];
-}
-
-message mpls_te_iep_hop_bag {
-    optional uint32 hop_index = 1 [(cisco_field).name="HopIndex"];
-    optional string iep_hop_type = 2 [(cisco_field).name="IEPHopType"];
-    optional bytes iep_hop_address = 3 [(cisco_field).name="IEPHopAddress"];
-}
-
-message mpls_te_iep_bag {
-    optional uint32 path_option_id = 1 [(cisco_field).name="PathOptionID"];
-    repeated mpls_te_iep_hop_bag iep_hop_list = 2 [(cisco_field).name="IEPHopList"];
-}
-
-message mpls_te_tunnels_autobw_status {
-    optional bool is_auto_bandwidth_enabled = 1 [(cisco_field).name="IsAutoBandwidthEnabled"];
-    optional uint32 reactivation_time = 2 [(cisco_field).name="ReactivationTime"];
-}
-
-message mpls_te_tunnels_autobw_config {
-    optional bool is_auto_bandwidth_collect_only = 1 [(cisco_field).name="IsAutoBandwidthCollectOnly"];
-    optional uint32 minimum_bandwidth = 2 [(cisco_field).name="MinimumBandwidth"];
-    optional uint32 maximum_bandwidth = 3 [(cisco_field).name="MaximumBandwidth"];
-    optional uint32 application_frequency = 4 [(cisco_field).name="ApplicationFrequency"];
-    optional uint32 collection_frequency = 5 [(cisco_field).name="CollectionFrequency"];
-    optional uint32 adjustment_threshold_percent = 6 [(cisco_field).name="AdjustmentThresholdPercent"];
-    optional uint32 adjustment_threshold_value = 7 [(cisco_field).name="AdjustmentThresholdValue"];
-    optional uint32 overflow_threshold_percent = 8 [(cisco_field).name="OverflowThresholdPercent"];
-    optional uint32 overflow_threshold_value = 9 [(cisco_field).name="OverflowThresholdValue"];
-    optional uint32 overflow_threshold_limit = 10 [(cisco_field).name="OverflowThresholdLimit"];
-    optional uint32 underflow_threshold_percent = 11 [(cisco_field).name="UnderflowThresholdPercent"];
-    optional uint32 underflow_threshold_value = 12 [(cisco_field).name="UnderflowThresholdValue"];
-    optional uint32 underflow_threshold_limit = 13 [(cisco_field).name="UnderflowThresholdLimit"];
-}
-
-message mpls_te_tunnels_autobw_oper {
-    optional uint32 last_bandwidth_applied = 1 [(cisco_field).name="LastBandwidthApplied"];
-    optional string bandwidth_pool_type = 2 [(cisco_field).name="BandwidthPoolType"];
-    optional uint32 bandwidth_applications = 3 [(cisco_field).name="BandwidthApplications"];
-    optional string last_application_trigger = 4 [(cisco_field).name="LastApplicationTrigger"];
-    optional uint32 application_jitter = 5 [(cisco_field).name="ApplicationJitter"];
-    optional uint32 time_left_application = 6 [(cisco_field).name="TimeLeftApplication"];
-    optional uint32 samples_collected = 7 [(cisco_field).name="SamplesCollected"];
-    optional uint32 time_left_collection = 8 [(cisco_field).name="TimeLeftCollection"];
-    optional uint32 highest_bandwidth = 9 [(cisco_field).name="HighestBandwidth"];
-    optional uint32 underflow_highest_bandwidth = 10 [(cisco_field).name="UnderflowHighestBandwidth"];
-    optional uint32 threshold_overflows = 11 [(cisco_field).name="ThresholdOverflows"];
-    optional uint32 overflow_early_bw_applications = 12 [(cisco_field).name="OverflowEarlyBWApplications"];
-    optional uint32 threshold_underflows = 13 [(cisco_field).name="ThresholdUnderflows"];
-    optional uint32 underflow_early_bw_applications = 14 [(cisco_field).name="UnderflowEarlyBWApplications"];
-    optional uint32 collect_only_requested_bandwidth = 15 [(cisco_field).name="CollectOnlyRequestedBandwidth"];
-    optional string application_reject_reason = 16 [(cisco_field).name="ApplicationRejectReason"];
-}
-
-message mpls_te_tunnels_tunnel_last_reopt_fail_info {
-    optional string re_opt_last_fail_reason = 1 [(cisco_field).name="ReOptLastFailReason"];
-    optional bytes re_opt_failed_destination = 2 [(cisco_field).name="ReOptFailedDestination"];
-    optional uint32 re_opt_failed_timestamp = 3 [(cisco_field).name="ReOptFailedTimestamp"];
-}
-
-message mpls_te_tunnels_history_current_connected {
-    optional uint32 current_lsp_uptime = 1 [(cisco_field).name="CurrentLSPUptime"];
-    optional uint32 current_uptime = 2 [(cisco_field).name="CurrentUptime"];
-}
-
-message mpls_te_tunnels_history_current {
-    optional mpls_te_tunnels_history_current_connected connected_uptimes = 1 [(cisco_field).name="ConnectedUptimes"];
-    optional uint32 current_setup_timer = 2 [(cisco_field).name="CurrentSetupTimer"];
-    optional string selection_reason = 3 [(cisco_field).name="SelectionReason"];
-    optional string current_setup_last_error = 4 [(cisco_field).name="CurrentSetupLastError"];
-}
-
-message mpls_te_tunnels_history_reopt {
-    optional uint32 reoptimized_setup_uptime = 1 [(cisco_field).name="ReoptimizedSetupUptime"];
-    optional uint32 reoptimized_setup_timer = 2 [(cisco_field).name="ReoptimizedSetupTimer"];
-    optional string reoptimized_setup_last_error = 3 [(cisco_field).name="ReoptimizedSetupLastError"];
-}
-
-message mpls_te_tunnels_history_path_protect {
-    optional uint32 protecting_setup_uptime = 1 [(cisco_field).name="ProtectingSetupUptime"];
-    optional uint32 protecting_setup_timer = 2 [(cisco_field).name="ProtectingSetupTimer"];
-    optional string protecting_setup_last_error = 3 [(cisco_field).name="ProtectingSetupLastError"];
-}
-
-message mpls_te_tunnels_history_previous {
-    optional string previous_path_option = 1 [(cisco_field).name="PreviousPathOption"];
-    optional uint32 previous_tunnel_instance = 2 [(cisco_field).name="PreviousTunnelInstance"];
-    optional string previous_fail_reason = 3 [(cisco_field).name="PreviousFailReason"];
-    optional string previous_setup_last_error = 4 [(cisco_field).name="PreviousSetupLastError"];
-}
-
-message mpls_te_tunnels_history_previous_protect {
-    optional string previous_protect_path_option = 1 [(cisco_field).name="PreviousProtectPathOption"];
-    optional uint32 previous_protect_tunnel_instance = 2 [(cisco_field).name="PreviousProtectTunnelInstance"];
-    optional string previous_protect_fail_reason = 3 [(cisco_field).name="PreviousProtectFailReason"];
-    optional string previous_protect_setup_last_error = 4 [(cisco_field).name="PreviousProtectSetupLastError"];
-}
-
-message mpls_te_tunnels_history_other_setup {
-    optional uint32 path_option_index = 1 [(cisco_field).name="PathOptionIndex"];
-    optional string other_setup_error = 2 [(cisco_field).name="OtherSetupError"];
-}
-
-message mpls_te_tunnels_history_standby_setup {
-    optional uint32 standby_lsp_uptime = 1 [(cisco_field).name="StandbyLSPUptime"];
-    optional uint32 standby_setup_timer = 2 [(cisco_field).name="StandbySetupTimer"];
-}
-
-message mpls_te_tunnels_history_bag {
-    optional mpls_te_tunnels_history_current current_setup = 1 [(cisco_field).name="CurrentSetup"];
-    optional mpls_te_tunnels_history_reopt reopt_setup = 2 [(cisco_field).name="ReoptSetup"];
-    optional mpls_te_tunnels_history_path_protect gmpls_path_protect_setup = 3 [(cisco_field).name="GMPLSPathProtectSetup"];
-    optional mpls_te_tunnels_history_previous previous_setup = 4 [(cisco_field).name="PreviousSetup"];
-    optional mpls_te_tunnels_history_previous_protect previous_gmpls_path_protect_setup = 5 [(cisco_field).name="PreviousGMPLSPathProtectSetup"];
-    optional mpls_te_tunnels_history_other_setup gmpls_other_setup = 6 [(cisco_field).name="GMPLSOtherSetup"];
-    optional mpls_te_tunnels_history_other_setup gmpls_other_protect_setup = 7 [(cisco_field).name="GMPLSOtherProtectSetup"];
-    optional mpls_te_tunnels_history_standby_setup standby_setup = 8 [(cisco_field).name="StandbySetup"];
-    optional mpls_te_tunnels_history_reopt standby_reopt_setup = 9 [(cisco_field).name="StandbyReoptSetup"];
-    optional mpls_te_tunnels_tunnel_last_reopt_fail_info last_re_opt_fail = 10 [(cisco_field).name="LastReOptFail"];
-    optional mpls_te_tunnels_tunnel_last_reopt_fail_info last_stdby_re_opt_fail = 11 [(cisco_field).name="LastStdbyReOptFail"];
-}
-
-message mpls_te_tunnels_reverse_ero_error_bag {
-    optional uint32 reverse_lsp_id = 1 [(cisco_field).name="ReverseLSP_ID"];
-    optional bool path_reject_reason_bw = 2 [(cisco_field).name="PathRejectReasonBW"];
-    optional bool path_reject_reason_affinity = 3 [(cisco_field).name="PathRejectReasonAffinity"];
-    optional bool path_reject_reason_ip_addr = 4 [(cisco_field).name="PathRejectReasonIPAddr"];
-    optional bool path_reject_reason_reverse_link = 5 [(cisco_field).name="PathRejectReasonReverseLink"];
-    optional bool path_reject_reason_ixcd = 6 [(cisco_field).name="PathRejectReasonIXCD"];
-    optional bool path_reject_reason_holddown = 7 [(cisco_field).name="PathRejectReasonHolddown"];
-    optional bool path_reject_reason_exclude_node = 8 [(cisco_field).name="PathRejectReasonExcludeNode"];
-    optional bool path_reject_reason_exclude_link = 9 [(cisco_field).name="PathRejectReasonExcludeLink"];
-    optional bool path_reject_reason_exclude_srlg = 10 [(cisco_field).name="PathRejectReasonExcludeSRLG"];
-    optional bool path_reject_reason_hop_limit = 11 [(cisco_field).name="PathRejectReasonHopLimit"];
-    optional bool path_reject_reason_node_ol_unknown = 12 [(cisco_field).name="PathRejectReasonNodeOLUnknown"];
-    optional bool path_reject_reason_node_ol_head = 13 [(cisco_field).name="PathRejectReasonNodeOLHead"];
-    optional bool path_reject_reason_node_ol_mid = 14 [(cisco_field).name="PathRejectReasonNodeOLMid"];
-    optional bool path_reject_reason_node_ol_tail = 15 [(cisco_field).name="PathRejectReasonNodeOLTail"];
-    optional bool path_reject_reason_reverse_bw = 16 [(cisco_field).name="PathRejectReasonReverseBW"];
-    optional bool path_reject_reason_node_unreachable = 17 [(cisco_field).name="PathRejectReasonNodeUnreachable"];
-    optional uint32 path_option_index = 18 [(cisco_field).name="PathOptionIndex"];
-    optional string path_option_type = 19 [(cisco_field).name="PathOptionType"];
-    repeated mpls_te_p2mp_pcalc_error path_calculation_error = 20 [(cisco_field).name="PathCalculationError"];
-    optional string ero_reject_reason = 21 [(cisco_field).name="ERORejectReason"];
-}
-
-message mpls_te_interarea_reopt_info {
-    optional uint32 sent_path_queries = 1 [(cisco_field).name="SentPathQueries"];
-    optional uint32 time_since_last_query_sent = 2 [(cisco_field).name="TimeSinceLastQuerySent"];
-    optional uint32 received_preferred_path_errors = 3 [(cisco_field).name="ReceivedPreferredPathErrors"];
-    optional uint32 time_since_last_preferred_path_error = 4 [(cisco_field).name="TimeSinceLastPreferredPathError"];
-    optional uint32 received_preferred_tree_errors = 5 [(cisco_field).name="ReceivedPreferredTreeErrors"];
-    optional uint32 time_since_last_preferred_tree_error = 6 [(cisco_field).name="TimeSinceLastPreferredTreeError"];
-    optional bytes preferred_path_error_node = 7 [(cisco_field).name="PreferredPathErrorNode"];
-    optional bytes preferred_tree_error_node = 8 [(cisco_field).name="PreferredTreeErrorNode"];
-}
-
-message te_mgmt_g709_otn_tspec {
-    optional uint32 signal_type = 1 [(cisco_field).name="SignalType"];
-    optional uint32 nmc_or_tolerance = 2 [(cisco_field).name="NMCOrTolerance"];
-    optional uint32 nvc = 3 [(cisco_field).name="NVC"];
-    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
-    optional uint32 bit_rate = 5 [(cisco_field).name="BitRate"];
-}
-
-message te_mgmt_generic_tspec {
-    optional string t_spec_type = 1 [(cisco_field).name="TSpecType"];
-    optional te_mgmt_g709_otn_tspec otnt_spec = 2 [(cisco_field).name="OTNTSpec"];
-}
-
-message te_mgmt_g709_otn_fspec {
-    optional uint32 signal_type = 1 [(cisco_field).name="SignalType"];
-    optional uint32 nmc_or_tolerance = 2 [(cisco_field).name="NMCOrTolerance"];
-    optional uint32 nvc = 3 [(cisco_field).name="NVC"];
-    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
-    optional uint32 bit_rate = 5 [(cisco_field).name="BitRate"];
-}
-
-message te_mgmt_generic_fspec {
-    optional string f_spec_type = 1 [(cisco_field).name="FSpecType"];
-    optional te_mgmt_g709_otn_fspec otnf_spec = 2 [(cisco_field).name="OTNFSpec"];
-}
-
-message bandwidth_spec_bag {
-    optional uint64 average_rate = 1 [(cisco_field).name="AverageRate"];
-    optional uint64 maximum_burst = 2 [(cisco_field).name="MaximumBurst"];
-    optional uint64 peak_rate = 3 [(cisco_field).name="PeakRate"];
-}
-
-message te_lsp_convergence_info {
-    optional uint64 path_in = 1 [(cisco_field).name="PathIn"];
-    optional uint64 path_out = 2 [(cisco_field).name="PathOut"];
-    optional uint64 resv_in = 3 [(cisco_field).name="ResvIn"];
-    optional uint64 resv_out = 4 [(cisco_field).name="ResvOut"];
-    optional uint64 label_rewrite = 5 [(cisco_field).name="LabelRewrite"];
-    optional uint64 tunnel_rewrite = 6 [(cisco_field).name="TunnelRewrite"];
-}
-
-message mpls_te_soft_preemption_head_counters {
-    optional uint32 soft_preemption_events = 1 [(cisco_field).name="SoftPreemptionEvents"];
-    optional uint32 reopt_completed_ls_ps = 2 [(cisco_field).name="ReoptCompletedLSPs"];
-    optional uint32 torn_down_ls_ps = 3 [(cisco_field).name="TornDownLSPs"];
-    optional uint32 path_protection_switchover_ls_ps = 4 [(cisco_field).name="PathProtectionSwitchoverLSPs"];
-    optional uint32 frr_triggered_ls_ps = 5 [(cisco_field).name="FRRTriggeredLSPs"];
-    optional uint32 time_in_preemption_pending_min = 6 [(cisco_field).name="TimeInPreemptionPendingMin"];
-    optional uint32 time_in_preemption_pending_max = 7 [(cisco_field).name="TimeInPreemptionPendingMax"];
-    optional uint32 time_in_preemption_pending_avg = 8 [(cisco_field).name="TimeInPreemptionPendingAvg"];
-}
-
-message mpls_te_soft_preemption_path_error {
-    optional uint32 timestamp = 1 [(cisco_field).name="Timestamp"];
-    optional bytes preempting_link_address = 2 [(cisco_field).name="PreemptingLinkAddress"];
-}
-
-message mpls_te_soft_preemption_tunnel_info {
-    optional string status = 1 [(cisco_field).name="Status"];
-    repeated mpls_te_soft_preemption_path_error soft_preemption_path_errors = 2 [(cisco_field).name="SoftPreemptionPathErrors"];
-    optional uint32 time_in_preemption_pending = 3 [(cisco_field).name="TimeInPreemptionPending"];
-    optional string preemption_pending_resolution = 4 [(cisco_field).name="PreemptionPendingResolution"];
-    optional mpls_te_soft_preemption_head_counters soft_preemption_counters = 5 [(cisco_field).name="SoftPreemptionCounters"];
-}
-
-message mpls_te_soft_preemption_lsp_info {
-    optional string status = 1 [(cisco_field).name="Status"];
-    optional uint32 soft_preemption_timestamp = 2 [(cisco_field).name="SoftPreemptionTimestamp"];
-    optional string soft_preemption_link = 3 [(cisco_field).name="SoftPreemptionLink"];
-    optional bytes preempting_link_address = 4 [(cisco_field).name="PreemptingLinkAddress"];
-    optional uint32 time_to_hard_preemption = 5 [(cisco_field).name="TimeToHardPreemption"];
-    optional bool fr_rrewrite = 6 [(cisco_field).name="FRRrewrite"];
-    optional string fr_rrewrite_tunnel_name = 7 [(cisco_field).name="FRRrewriteTunnelName"];
-}
-
-message tunnel_hop_info {
-    optional bytes hop_address = 1 [(cisco_field).name="HopAddress"];
-    optional uint32 hop_affinity = 2 [(cisco_field).name="HopAffinity"];
-    repeated uint32 hop_extended_affinity = 3 [(cisco_field).name="HopExtendedAffinity"];
-}
-
-message te_vif_convergence_info {
-    optional bool is_convergence_in_progress = 1 [(cisco_field).name="IsConvergenceInProgress"];
-    optional uint64 frr_trigger_time = 2 [(cisco_field).name="FRRTriggerTime"];
-    optional uint64 pcalc_complete_time = 3 [(cisco_field).name="PCALCCompleteTime"];
-    optional uint64 convergence_complete_time = 4 [(cisco_field).name="ConvergenceCompleteTime"];
-    optional te_lsp_convergence_info convergence_lsp = 5 [(cisco_field).name="ConvergenceLSP"];
-}
-
-message mpls_te_tunnel_bfd_config_info {
-    optional bool bfd_fast_detecting_enabled = 1 [(cisco_field).name="BFDFastDetectingEnabled"];
-    optional uint32 min_interval = 2 [(cisco_field).name="MinInterval"];
-    optional bool min_interval_default = 3 [(cisco_field).name="MinIntervalDefault"];
-    optional uint32 multiplier = 4 [(cisco_field).name="Multiplier"];
-    optional bool multiplier_default = 5 [(cisco_field).name="MultiplierDefault"];
-    optional uint32 bring_up_timeout = 6 [(cisco_field).name="BringUpTimeout"];
-    optional bool bring_up_timeout_default = 7 [(cisco_field).name="BringUpTimeoutDefault"];
-    optional uint32 dampening_initial_wait = 8 [(cisco_field).name="DampeningInitialWait"];
-    optional bool dampening_initial_wait_default = 9 [(cisco_field).name="DampeningInitialWaitDefault"];
-    optional uint32 dampening_max_wait = 10 [(cisco_field).name="DampeningMaxWait"];
-    optional bool dampening_max_wait_default = 11 [(cisco_field).name="DampeningMaxWaitDefault"];
-    optional uint32 dampening_secondary_wait = 12 [(cisco_field).name="DampeningSecondaryWait"];
-    optional bool dampening_secondary_wait_default = 13 [(cisco_field).name="DampeningSecondaryWaitDefault"];
-    optional bool periodic_lsp_ping_disabled = 14 [(cisco_field).name="PeriodicLSPPingDisabled"];
-    optional uint32 periodic_lsp_ping_interval = 15 [(cisco_field).name="PeriodicLSPPingInterval"];
-    optional bool periodic_lsp_ping_interval_default = 16 [(cisco_field).name="PeriodicLSPPingIntervalDefault"];
-    optional string bfd_session_down_action = 17 [(cisco_field).name="BFDSessionDownAction"];
-    optional uint32 bfd_session_down_reopt_timeout = 18 [(cisco_field).name="BFDSessionDownReoptTimeout"];
-    optional string bfd_encap_mode = 19 [(cisco_field).name="BFDEncapMode"];
-}
-
-message mpls_te_tunnel_bidir_config_info {
-    optional uint32 association_type = 1 [(cisco_field).name="AssociationType"];
-    optional uint32 association_id = 2 [(cisco_field).name="AssociationID"];
-    optional bytes association_source = 3 [(cisco_field).name="AssociationSource"];
-    optional uint32 association_global_id = 4 [(cisco_field).name="AssociationGlobalID"];
-    optional bool association_corouted = 5 [(cisco_field).name="AssociationCorouted"];
-}
-
-message mpls_te_p2mp_dest {
-    optional bytes destination_address = 1 [(cisco_field).name="DestinationAddress"];
-    repeated mpls_te_p2mp_path_option path_options = 2 [(cisco_field).name="PathOptions"];
-    optional string destination_state = 3 [(cisco_field).name="DestinationState"];
-    optional uint32 active_path_option_index = 4 [(cisco_field).name="ActivePathOptionIndex"];
-    optional bool path_option_exhausted = 5 [(cisco_field).name="PathOptionExhausted"];
-    optional uint32 uptime = 6 [(cisco_field).name="Uptime"];
-    optional uint32 path_change_time = 7 [(cisco_field).name="PathChangeTime"];
-    optional uint32 total_uptime = 8 [(cisco_field).name="TotalUptime"];
-    optional bool s2_l_exist = 9 [(cisco_field).name="S2LExist"];
-    optional string destination_deletion_cause = 10 [(cisco_field).name="DestinationDeletionCause"];
-    optional string destination_deletion_sub_cause = 11 [(cisco_field).name="DestinationDeletionSubCause"];
-    optional uint32 destination_deletion_timestamp = 12 [(cisco_field).name="DestinationDeletionTimestamp"];
-    optional bool is_inter_area = 13 [(cisco_field).name="IsInterArea"];
-    optional mpls_te_interarea_reopt_info inter_area_reoptimization = 14 [(cisco_field).name="InterAreaReoptimization"];
-}
-
-message mpls_te_bfd_session_info {
-    optional string state = 1 [(cisco_field).name="State"];
-    optional uint32 state_change_time = 2 [(cisco_field).name="StateChangeTime"];
-}
-
-message mpls_te_bfd_deletion_history {
-    optional uint32 lsp_id = 1 [(cisco_field).name="LspID"];
-    optional uint32 deletion_time = 2 [(cisco_field).name="DeletionTime"];
-    optional string deletion_reason = 3 [(cisco_field).name="DeletionReason"];
-    optional uint32 deletion_diagnostic_code = 4 [(cisco_field).name="DeletionDiagnosticCode"];
-}
-
-message mpls_te_head_bfd_info {
-    optional uint32 creation_time = 1 [(cisco_field).name="CreationTime"];
-    optional mpls_te_bfd_session_info session_info = 2 [(cisco_field).name="SessionInfo"];
-    optional mpls_te_bfd_deletion_history deletion_history = 3 [(cisco_field).name="DeletionHistory"];
-}
-
-message mpls_te_tail_bfd_info {
-    optional mpls_te_bfd_session_info session_info = 1 [(cisco_field).name="SessionInfo"];
-    optional uint32 failure_diagnostic_code = 2 [(cisco_field).name="FailureDiagnosticCode"];
-    optional string failure_reason = 3 [(cisco_field).name="FailureReason"];
-    optional uint32 local_discriminator = 4 [(cisco_field).name="LocalDiscriminator"];
-    optional uint32 remote_discriminator = 5 [(cisco_field).name="RemoteDiscriminator"];
-    optional uint32 min_interval = 6 [(cisco_field).name="MinInterval"];
-    optional bool min_interval_default = 7 [(cisco_field).name="MinIntervalDefault"];
-    optional uint32 multiplier = 8 [(cisco_field).name="Multiplier"];
-    optional bool multiplier_default = 9 [(cisco_field).name="MultiplierDefault"];
-}
-
-message mpls_te_s2l_association_object {
-    optional uint32 s2_l_association_type = 1 [(cisco_field).name="S2LAssociationType"];
-    optional string s2_l_association_tie_role = 2 [(cisco_field).name="S2LAssociationTieRole"];
-    optional uint32 s2_l_association_id = 3 [(cisco_field).name="S2LAssociationID"];
-    optional bytes s2_l_association_source = 4 [(cisco_field).name="S2LAssociationSource"];
-    optional uint32 s2_l_global_source = 5 [(cisco_field).name="S2LGlobalSource"];
-    repeated uint32 s2_l_extended_id = 6 [(cisco_field).name="S2LExtendedID"];
-}
-
-message mpls_te_s2l_protection_object {
-    optional bool s2_l_secondary = 1 [(cisco_field).name="S2LSecondary"];
-    optional bool s2_l_protecting = 2 [(cisco_field).name="S2LProtecting"];
-    optional bool s2_l_notification = 3 [(cisco_field).name="S2LNotification"];
-    optional bool s2_l_operational = 4 [(cisco_field).name="S2LOperational"];
-    optional bool enhanced = 5 [(cisco_field).name="Enhanced"];
-    optional bool ded1_plus1 = 6 [(cisco_field).name="Ded1Plus1"];
-    optional bool ded1_to1 = 7 [(cisco_field).name="Ded1To1"];
-    optional bool shared = 8 [(cisco_field).name="Shared"];
-    optional bool link_unprotected = 9 [(cisco_field).name="LinkUnprotected"];
-    optional bool extra_traffic = 10 [(cisco_field).name="ExtraTraffic"];
-    optional bool any = 11 [(cisco_field).name="Any"];
-    optional bool rerouting = 12 [(cisco_field).name="Rerouting"];
-    optional bool rerouting_no_et = 13 [(cisco_field).name="ReroutingNoET"];
-    optional bool one_to_n_protection_et = 14 [(cisco_field).name="OneToNProtectionET"];
-    optional bool one_plus_one_uni = 15 [(cisco_field).name="OnePlusOneUni"];
-    optional bool one_plus_one_bi = 16 [(cisco_field).name="OnePlusOneBi"];
-    optional bool lsp_unprotected = 17 [(cisco_field).name="LSPUnprotected"];
-}
-
-message flex_lockout_t {
-    optional bool is_lockout = 1 [(cisco_field).name="IsLockout"];
-    optional string origination = 2 [(cisco_field).name="Origination"];
-    optional uint32 lockout_timestamp = 3 [(cisco_field).name="LockoutTimestamp"];
-}
-
-message mpls_te_s2l_flex_info {
-    optional bool entry_exists = 1 [(cisco_field).name="EntryExists"];
-    optional uint32 in_label = 2 [(cisco_field).name="InLabel"];
-    optional bool bfd_created = 3 [(cisco_field).name="BfdCreated"];
-    optional bool bfd_up = 4 [(cisco_field).name="BfdUp"];
-    optional bool oam_created = 5 [(cisco_field).name="OamCreated"];
-    optional te_s2l_fec_t flex_fec = 6 [(cisco_field).name="FlexFEC"];
-    optional bytes bfd_next_hop = 7 [(cisco_field).name="BfdNextHop"];
-    optional uint32 bfd_tun_ifh = 8 [(cisco_field).name="BfdTunIfh"];
-    optional uint32 bfd_out_ifh = 9 [(cisco_field).name="BfdOutIfh"];
-    optional uint32 bfd_int_label = 10 [(cisco_field).name="BfdIntLabel"];
-    optional uint32 bfd_egress_label = 11 [(cisco_field).name="BfdEgressLabel"];
-    optional bool fault_ldi_lockout = 12 [(cisco_field).name="FaultLdiLockout"];
-    optional bool fault_ldi = 13 [(cisco_field).name="FaultLdi"];
-    optional bool fault_lkr = 14 [(cisco_field).name="FaultLkr"];
-    optional bool fault_ais = 15 [(cisco_field).name="FaultAis"];
-    optional uint32 fault_time = 16 [(cisco_field).name="FaultTime"];
-    optional flex_lockout_t lockout = 17 [(cisco_field).name="Lockout"];
-}
-
-message te_s2l_srlg_collect_info {
-    optional string srlg_collect_type = 1 [(cisco_field).name="SRLGCollectType"];
-    repeated uint32 discovered_srl_gs = 2 [(cisco_field).name="DiscoveredSRLGs"];
-}
-
-message mpls_te_p2mp_s2l {
-    optional te_s2l_fec_t s2_l_fec = 1 [(cisco_field).name="S2L_FEC"];
-    optional mpls_te_p2mp_path_option active_path_option = 2 [(cisco_field).name="ActivePathOption"];
-    repeated mpls_srlg_info shared_risk_link_groups = 3 [(cisco_field).name="SharedRiskLinkGroups"];
-    optional string pcalc_area = 4 [(cisco_field).name="PCALCArea"];
-    optional bool is_expanded_ero = 5 [(cisco_field).name="IsExpandedERO"];
-    optional uint32 path_reeval_query_mid = 6 [(cisco_field).name="PathReevalQueryMid"];
-    optional uint32 time_since_last_query_received_mid = 7 [(cisco_field).name="TimeSinceLastQueryReceivedMid"];
-    optional uint32 time_since_last_preferred_path_exists_send_mid = 8 [(cisco_field).name="TimeSinceLastPreferredPathExistsSendMid"];
-    optional uint32 time_since_last_preferred_tree_exists_send_mid = 9 [(cisco_field).name="TimeSinceLastPreferredTreeExistsSendMid"];
-    optional string expanded_ero_area_id = 10 [(cisco_field).name="ExpandedEROAreaID"];
-    optional uint32 expanded_ero_affinity_bits = 11 [(cisco_field).name="ExpandedEROAffinityBits"];
-    optional uint32 expanded_ero_affinity_mask = 12 [(cisco_field).name="ExpandedEROAffinityMask"];
-    optional string expanded_ero_metric_type = 13 [(cisco_field).name="ExpandedEROMetricType"];
-    optional uint32 expanded_ero_metric = 14 [(cisco_field).name="ExpandedEROMetric"];
-    optional bool is_expand_timer_running = 15 [(cisco_field).name="IsExpandTimerRunning"];
-    optional uint32 expand_timer_duration = 16 [(cisco_field).name="ExpandTimerDuration"];
-    optional uint32 expand_timer_remain = 17 [(cisco_field).name="ExpandTimerRemain"];
-    optional bytes abr_auto_discovered = 18 [(cisco_field).name="ABRAutoDiscovered"];
-    optional bool is_frr_enabled = 19 [(cisco_field).name="IsFRREnabled"];
-    optional bool is_node_protected = 20 [(cisco_field).name="IsNodeProtected"];
-    optional bool is_bandwidth_protect = 21 [(cisco_field).name="IsBandwidthProtect"];
-    optional bool path_rro_enabled = 22 [(cisco_field).name="PathRROEnabled"];
-    repeated rsvp_mgmt_ero_subobj out_ero = 23 [(cisco_field).name="OutERO"];
-    repeated rsvp_mgmt_ero_subobj in_ero = 24 [(cisco_field).name="InERO"];
-    optional te_xro out_xro = 25 [(cisco_field).name="OutXRO"];
-    optional te_xro in_xro = 26 [(cisco_field).name="InXRO"];
-    repeated rsvp_mgmt_rro_subobj path_rro = 27 [(cisco_field).name="PathRRO"];
-    repeated rsvp_mgmt_rro_subobj resv_rro = 28 [(cisco_field).name="ResvRRO"];
-    repeated tunnel_hop_info path_affinity_array = 29 [(cisco_field).name="PathAffinityArray"];
-    optional bandwidth_spec_bag t_spec = 30 [(cisco_field).name="TSpec"];
-    optional te_mgmt_generic_tspec generic_t_spec = 31 [(cisco_field).name="GenericTSpec"];
-    optional bandwidth_spec_bag f_spec = 32 [(cisco_field).name="FSpec"];
-    optional te_mgmt_generic_fspec generic_f_spec = 33 [(cisco_field).name="GenericFSpec"];
-    optional uint64 weight = 34 [(cisco_field).name="Weight"];
-    optional uint64 reverse_weight = 35 [(cisco_field).name="ReverseWeight"];
-    optional uint32 uptime = 36 [(cisco_field).name="Uptime"];
-    optional string egress_interface = 37 [(cisco_field).name="EgressInterface"];
-    optional string egress_interface_state = 38 [(cisco_field).name="EgressInterfaceState"];
-    optional string egress_interface_brief = 39 [(cisco_field).name="EgressInterfaceBrief"];
-    optional string ingress_interface = 40 [(cisco_field).name="IngressInterface"];
-    optional string ingress_interface_state = 41 [(cisco_field).name="IngressInterfaceState"];
-    optional string ingress_interface_brief = 42 [(cisco_field).name="IngressInterfaceBrief"];
-    optional uint32 egress_interface_handle = 43 [(cisco_field).name="EgressInterfaceHandle"];
-    optional uint32 ingress_interface_handle = 44 [(cisco_field).name="IngressInterfaceHandle"];
-    optional uint32 s2_l_local_label = 45 [(cisco_field).name="S2LLocalLabel"];
-    optional uint32 s2_l_out_label = 46 [(cisco_field).name="S2LOutLabel"];
-    optional string outbound_frr_state = 47 [(cisco_field).name="OutboundFRRState"];
-    optional string frr_out_tunnel_interface = 48 [(cisco_field).name="FRROutTunnelInterface"];
-    optional string role = 49 [(cisco_field).name="Role"];
-    optional string signalling_status = 50 [(cisco_field).name="SignallingStatus"];
-    optional bytes local_router_id = 51 [(cisco_field).name="LocalRouterID"];
-    optional bytes upstream_router_id = 52 [(cisco_field).name="UpstreamRouterID"];
-    optional bytes downstream_router_id = 53 [(cisco_field).name="DownstreamRouterID"];
-    optional bytes next_hop_address = 54 [(cisco_field).name="NextHopAddress"];
-    optional te_addr_t_ next_hop_address_generic = 55 [(cisco_field).name="NextHopAddressGeneric"];
-    optional bytes previous_hop_address = 56 [(cisco_field).name="PreviousHopAddress"];
-    optional te_addr_t_ previous_hop_address_generic = 57 [(cisco_field).name="PreviousHopAddressGeneric"];
-    optional bytes incoming_address = 58 [(cisco_field).name="IncomingAddress"];
-    optional te_addr_t_ incoming_address_generic = 59 [(cisco_field).name="IncomingAddressGeneric"];
-    optional mpls_te_p2mp_fsm_info fsm = 60 [(cisco_field).name="FSM"];
-    optional uint32 backup_tunnel_interface = 61 [(cisco_field).name="BackupTunnelInterface"];
-    optional uint32 node_hop_count = 62 [(cisco_field).name="NodeHopCount"];
-    optional te_lsp_convergence_info s2_l_convergence = 63 [(cisco_field).name="S2LConvergence"];
-    optional mpls_te_soft_preemption_lsp_info soft_preemption = 64 [(cisco_field).name="SoftPreemption"];
-    optional hasi_m_object_ctx master_context = 65 [(cisco_field).name="MasterContext"];
-    optional hasi_s_object_ctx slave_context = 66 [(cisco_field).name="SlaveContext"];
-    optional rsvp_ng_api_ctx_bag rsvp_api_ctx = 67 [(cisco_field).name="RSVPApiCtx"];
-    optional bool is_optical = 68 [(cisco_field).name="IsOptical"];
-    optional mpls_te_mgmt_gmpls_labels gmpls_labels = 69 [(cisco_field).name="GMPLSLabels"];
-    optional te_service_info service_info = 70 [(cisco_field).name="ServiceInfo"];
-    optional mpls_te_otn_s2l_info otn_s2_l = 71 [(cisco_field).name="OTN_S2L"];
-    optional mpls_te_head_bfd_info head_end_bfd_info = 72 [(cisco_field).name="HeadEndBFDInfo"];
-    optional mpls_te_tail_bfd_info tail_end_bfd_info = 73 [(cisco_field).name="TailEndBFDInfo"];
-    optional te_s2l_srlg_collect_info srlg_collection = 74 [(cisco_field).name="SRLGCollection"];
-    optional mpls_te_s2l_association_object association = 75 [(cisco_field).name="Association"];
-    optional mpls_te_s2l_protection_object protection = 76 [(cisco_field).name="Protection"];
-    optional bool s2_l_reverse_ero_obj_present = 77 [(cisco_field).name="S2LReverseEROObjPresent"];
-    repeated rsvp_mgmt_ero_subobj reverse_ero_in = 78 [(cisco_field).name="ReverseEROIn"];
-    optional bool reverse_lsp_present = 79 [(cisco_field).name="ReverseLSPPresent"];
-    optional bool reverse_lsp_connected = 80 [(cisco_field).name="ReverseLSPConnected"];
-    optional te_lsp_fec_t reverse_lsp_fec = 81 [(cisco_field).name="ReverseLSP_FEC"];
-    optional string reverse_lsp_name = 82 [(cisco_field).name="ReverseLSPName"];
-    optional bool s2_l_reverse_t_spec_obj_present = 83 [(cisco_field).name="S2LReverseTSpecObjPresent"];
-    optional bandwidth_spec_bag reverse_t_spec = 84 [(cisco_field).name="ReverseTSpec"];
-    repeated uint32 s2_l_reverse_lsp_sub_objs = 85 [(cisco_field).name="S2LReverseLspSubObjs"];
-    optional mpls_te_s2l_flex_info flex_info = 86 [(cisco_field).name="FlexInfo"];
-    repeated te_s2l_sr_path_hop s2_l_segment_routing_path = 87 [(cisco_field).name="S2LSegmentRoutingPath"];
-    optional bool srdb_check_enabled = 88 [(cisco_field).name="SRDBCheckEnabled"];
-}
-
-message mpls_te_p2mp_lsp {
-    optional string signaled_name = 1 [(cisco_field).name="SignaledName"];
-    optional bool is_frr_failed = 2 [(cisco_field).name="IsFRRFailed"];
-    optional uint32 frr_active_reason = 3 [(cisco_field).name="FRRActiveReason"];
-    optional uint32 lsp_bandwidth = 4 [(cisco_field).name="LSPBandwidth"];
-    optional uint32 lsp_setup_priority = 5 [(cisco_field).name="LSPSetupPriority"];
-    optional uint32 lsp_hold_priority = 6 [(cisco_field).name="LSPHoldPriority"];
-    optional string lsp_bandwidth_type = 7 [(cisco_field).name="LSPBandwidthType"];
-    optional bool dste_class_match = 8 [(cisco_field).name="DSTEClassMatch"];
-    optional uint32 dste_class_index = 9 [(cisco_field).name="DSTEClassIndex"];
-    optional te_lsp_fec_t lsp_fec = 10 [(cisco_field).name="LSP_FEC"];
-    optional string type = 11 [(cisco_field).name="Type"];
-    repeated mpls_te_p2mp_s2l s2_l_list = 12 [(cisco_field).name="S2LList"];
-    optional uint32 uptime = 13 [(cisco_field).name="Uptime"];
-    optional uint32 s2_ls_up = 14 [(cisco_field).name="S2LsUp"];
-    optional uint32 s2_ls_proceeding = 15 [(cisco_field).name="S2LsProceeding"];
-    optional uint32 s2_ls_down = 16 [(cisco_field).name="S2LsDown"];
-    optional string reoptimize_reason = 17 [(cisco_field).name="ReoptimizeReason"];
-    optional string reoptimize_trigger = 18 [(cisco_field).name="ReoptimizeTrigger"];
-    optional uint32 timer_left = 19 [(cisco_field).name="TimerLeft"];
-    optional bool is_passive = 20 [(cisco_field).name="IsPassive"];
-}
-
-message mpls_te_p2p_info_bag {
-    optional mpls_te_tunnels_autobw_status auto_bandwidth_status = 1 [(cisco_field).name="AutoBandwidthStatus"];
-    optional mpls_te_tunnels_autobw_config auto_bandwidth_config = 2 [(cisco_field).name="AutoBandwidthConfig"];
-    optional mpls_te_tunnels_autobw_oper auto_bandwidth_oper = 3 [(cisco_field).name="AutoBandwidthOper"];
-    optional bool is_bidirectional = 4 [(cisco_field).name="IsBidirectional"];
-}
-
-message mpls_te_p2mp_tun_cfg_bag {
-    optional string tunnel_name = 1 [(cisco_field).name="TunnelName"];
-    optional uint32 tunnel_id = 2 [(cisco_field).name="TunnelID"];
-    optional bool is_p2_mp = 3 [(cisco_field).name="IsP2MP"];
-    optional string signaled_name = 4 [(cisco_field).name="SignaledName"];
-    optional uint32 configured_bandwidth = 5 [(cisco_field).name="ConfiguredBandwidth"];
-    optional uint32 interface_configured_bandwidth = 6 [(cisco_field).name="InterfaceConfiguredBandwidth"];
-    optional string bandwidth_type = 7 [(cisco_field).name="BandwidthType"];
-    optional uint32 setup_priority = 8 [(cisco_field).name="SetupPriority"];
-    optional uint32 hold_priority = 9 [(cisco_field).name="HoldPriority"];
-    optional uint32 policy_class = 10 [(cisco_field).name="PolicyClass"];
-    repeated uint32 policy_classes = 11 [(cisco_field).name="PolicyClasses"];
-    optional uint32 forward_class = 12 [(cisco_field).name="ForwardClass"];
-    optional mpls_te_tunnels_affinity_info affinity = 13 [(cisco_field).name="Affinity"];
-    optional uint32 backup_bandwidth = 14 [(cisco_field).name="BackupBandwidth"];
-    optional uint32 backup_bandwidth_flags = 15 [(cisco_field).name="BackupBandwidthFlags"];
-    optional uint32 config_load_share = 16 [(cisco_field).name="ConfigLoadShare"];
-    optional uint32 payload_type = 17 [(cisco_field).name="PayloadType"];
-    optional bool is_in_config = 18 [(cisco_field).name="IsInConfig"];
-    optional bool explicit_null_imposition = 19 [(cisco_field).name="ExplicitNullImposition"];
-    optional bool fast_reroute = 20 [(cisco_field).name="FastReroute"];
-    optional bool is_backup_tunnel = 21 [(cisco_field).name="IsBackupTunnel"];
-    optional bool record_route = 22 [(cisco_field).name="RecordRoute"];
-    optional bool srlg_discovery = 23 [(cisco_field).name="SRLGDiscovery"];
-    optional bool path_protection_enabled = 24 [(cisco_field).name="PathProtectionEnabled"];
-    optional uint32 hop_limit = 25 [(cisco_field).name="HopLimit"];
-    optional uint32 cost_limit = 26 [(cisco_field).name="CostLimit"];
-    optional uint32 cost_limit_global = 27 [(cisco_field).name="CostLimitGlobal"];
-    optional uint32 path_invalidation_timeout_source = 28 [(cisco_field).name="PathInvalidationTimeoutSource"];
-    optional uint32 path_invalidation_timeout = 29 [(cisco_field).name="PathInvalidationTimeout"];
-    optional uint32 path_invalidation_action_source = 30 [(cisco_field).name="PathInvalidationActionSource"];
-    optional uint32 path_invalidation_action = 31 [(cisco_field).name="PathInvalidationAction"];
-    optional bool soft_preempt = 32 [(cisco_field).name="SoftPreempt"];
-    optional mpls_te_tunnel_bidir_config_info bidirectional_config = 33 [(cisco_field).name="BidirectionalConfig"];
-    optional mpls_te_tunnel_bfd_config_info bfd_config = 34 [(cisco_field).name="BFDConfig"];
-    optional bool disable_affinity_failure_reopt = 35 [(cisco_field).name="DisableAffinityFailureReopt"];
-    optional uint32 affinity_failure_reopt_timer = 36 [(cisco_field).name="AffinityFailureReoptTimer"];
-    optional string segment_routing_path_selection = 37 [(cisco_field).name="SegmentRoutingPathSelection"];
-}
-
-message mpls_te_pp_info {
-    optional uint32 time_of_switchover_sec = 1 [(cisco_field).name="TimeOfSwitchoverSec"];
-    optional uint32 switchover_total = 2 [(cisco_field).name="SwitchoverTotal"];
-    optional uint32 switchover_ready = 3 [(cisco_field).name="SwitchoverReady"];
-    optional uint32 standby_reoptimized_number = 4 [(cisco_field).name="StandbyReoptimizedNumber"];
-    optional uint32 switchover_reason = 5 [(cisco_field).name="SwitchoverReason"];
-    optional string diversity_type = 6 [(cisco_field).name="DiversityType"];
-    optional bool is_path_protect_configured = 7 [(cisco_field).name="IsPathProtectConfigured"];
-    optional uint32 path_protection_protected_by_id = 8 [(cisco_field).name="PathProtectionProtectedByID"];
-    optional bool valid_path_protection_path_option_exists = 9 [(cisco_field).name="ValidPathProtectionPathOptionExists"];
-    optional bool is_path_protect_switch_over_underway = 10 [(cisco_field).name="IsPathProtectSwitchOverUnderway"];
-    optional te_pp_sw_log_entry_bag switchover = 11 [(cisco_field).name="Switchover"];
-    optional uint32 reoptimization_time_remaining = 12 [(cisco_field).name="ReoptimizationTimeRemaining"];
-}
-
-message mpls_te_wsrlg_value_bag {
-    optional uint32 srlg = 1 [(cisco_field).name="SRLG"];
-    optional string srlg_name = 2 [(cisco_field).name="SRLGName"];
-    optional uint32 admin_weight = 3 [(cisco_field).name="AdminWeight"];
-}
-
-message mpls_te_wsrlg_hop_bag {
-    optional bytes from_address = 1 [(cisco_field).name="FromAddress"];
-    optional bytes to_address = 2 [(cisco_field).name="ToAddress"];
-    optional uint64 aggregate_admin_weight = 3 [(cisco_field).name="AggregateAdminWeight"];
-    repeated uint32 common_srlg = 4 [(cisco_field).name="CommonSRLG"];
-}
-
-message mpls_te_wsrlg_info_bag {
-    repeated mpls_te_wsrlg_value_bag protected_interface_srlg = 1 [(cisco_field).name="ProtectedInterfaceSRLG"];
-    repeated mpls_te_wsrlg_hop_bag weighted_srlg_hops = 2 [(cisco_field).name="WeightedSRLGHops"];
-}
-
-message mpls_te_autobackup_info {
-    optional uint32 protected_ls_ps = 1 [(cisco_field).name="ProtectedLSPs"];
-    optional uint32 protected_s2_ls = 2 [(cisco_field).name="ProtectedS2Ls"];
-    optional uint32 sharing_families = 3 [(cisco_field).name="SharingFamilies"];
-    optional string ab_protection_type = 4 [(cisco_field).name="ABProtectionType"];
-    optional bool is_using_srlg = 5 [(cisco_field).name="IsUsingSRLG"];
-    optional string srlg_prot_type = 6 [(cisco_field).name="SRLGProtType"];
-    optional string ab_protected_interface = 7 [(cisco_field).name="ABProtectedInterface"];
-    optional mpls_te_wsrlg_info_bag weighted_srlg_info = 8 [(cisco_field).name="WeightedSRLGInfo"];
-    optional bytes protected_address = 9 [(cisco_field).name="ProtectedAddress"];
-    optional string tunnel_attribute_set_name = 10 [(cisco_field).name="TunnelAttributeSetName"];
-    repeated mpls_te_iep_bag iep_list = 11 [(cisco_field).name="IEPList"];
-    optional bool is_unused_removal_timer_running = 12 [(cisco_field).name="IsUnusedRemovalTimerRunning"];
-    optional uint32 unused_removal_remaining_time = 13 [(cisco_field).name="UnusedRemovalRemainingTime"];
-}
-
-message mpls_te_automesh_info {
-    optional uint32 mesh_group_id = 1 [(cisco_field).name="MeshGroupID"];
-    optional string tunnel_destination_list_name = 2 [(cisco_field).name="TunnelDestinationListName"];
-    optional bool is_tunnel_unused_timer_running = 3 [(cisco_field).name="IsTunnelUnusedTimerRunning"];
-    optional uint32 remaining_unused_time = 4 [(cisco_field).name="RemainingUnusedTime"];
-    optional string mesh_group_type = 5 [(cisco_field).name="MeshGroupType"];
-}
-
-message mpls_te_autopcc_info {
-    optional bytes owner_address = 1 [(cisco_field).name="OwnerAddress"];
-    optional bytes creator_address = 2 [(cisco_field).name="CreatorAddress"];
-    optional bool has_creator_id = 3 [(cisco_field).name="HasCreatorID"];
-    optional string creator_id = 4 [(cisco_field).name="CreatorID"];
-    optional uint32 plspid = 5 [(cisco_field).name="PLSPID"];
-    optional string symbolic_name = 6 [(cisco_field).name="SymbolicName"];
-    optional bool operationally_up = 7 [(cisco_field).name="OperationallyUp"];
-}
-
-message mpls_te_pce_delegation_info {
-    optional uint32 plsp_id = 1 [(cisco_field).name="PLSP_ID"];
-    optional string symbolic_name = 2 [(cisco_field).name="SymbolicName"];
-    optional bytes owner_address = 3 [(cisco_field).name="OwnerAddress"];
-    optional bool operationally_up = 4 [(cisco_field).name="OperationallyUp"];
-}
-
-message mpls_te_path_option_dampening_info {
-    optional uint32 option_index = 1 [(cisco_field).name="OptionIndex"];
-    optional uint32 hold_down_time = 2 [(cisco_field).name="HoldDownTime"];
-    optional uint32 remained_time = 3 [(cisco_field).name="RemainedTime"];
-    optional uint32 backoff_count = 4 [(cisco_field).name="BackoffCount"];
-}
-
-message mpls_te_tunnel_bfd_info {
-    optional bool bfd_session_up = 1 [(cisco_field).name="BFDSessionUp"];
-    optional uint32 session_up_time = 2 [(cisco_field).name="SessionUpTime"];
-    optional uint32 failure_diagnostic_code = 3 [(cisco_field).name="FailureDiagnosticCode"];
-    optional string failure_reason = 4 [(cisco_field).name="FailureReason"];
-    optional uint32 minimum_session_up_interval = 5 [(cisco_field).name="MinimumSessionUpInterval"];
-    optional uint32 maximum_session_up_interval = 6 [(cisco_field).name="MaximumSessionUpInterval"];
-    optional mpls_te_bfd_lsp_counters event_counters = 7 [(cisco_field).name="EventCounters"];
-    repeated mpls_te_path_option_dampening_info dampening_info = 8 [(cisco_field).name="DampeningInfo"];
-}
-
-message mpls_te_tunnel_bidir_info {
-    optional uint32 reverse_bandwidth = 1 [(cisco_field).name="ReverseBandwidth"];
-    optional uint32 reverse_bandwidth_standby = 2 [(cisco_field).name="ReverseBandwidthStandby"];
-    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_current = 3 [(cisco_field).name="ReverseEROErrorCurrent"];
-    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_reopt = 4 [(cisco_field).name="ReverseEROErrorReopt"];
-    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_standby = 5 [(cisco_field).name="ReverseEROErrorStandby"];
-    optional mpls_te_tunnels_reverse_ero_error_bag reverse_ero_error_standby_reopt = 6 [(cisco_field).name="ReverseEROErrorStandbyReopt"];
-}
-
-message mpls_te_tunnel_flex_info {
-    optional bool fault_ldi_lockout = 1 [(cisco_field).name="FaultLdiLockout"];
-    optional bool fault_ldi = 2 [(cisco_field).name="FaultLdi"];
-    optional bool fault_lkr = 3 [(cisco_field).name="FaultLkr"];
-    optional bool fault_ais = 4 [(cisco_field).name="FaultAis"];
-    optional uint32 fault_time = 5 [(cisco_field).name="FaultTime"];
-    optional uint32 fault_in_label = 6 [(cisco_field).name="FaultInLabel"];
-    optional bool is_lockout = 7 [(cisco_field).name="IsLockout"];
-    optional uint32 lockout_timestamp = 8 [(cisco_field).name="LockoutTimestamp"];
-    optional uint32 lockout_lsp_id = 9 [(cisco_field).name="LockoutLSP_ID"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"mpls_te_p2mp_tunnel_bag\", \"v_maj\": 25, \"version\": 1.0, \"bytecode\": \"$510={RoleStandby}b{TunnelInterfaceName}D%h{Config}$497{AdminState}[mte_tunnel_admin_state_]e{OperationalState}[mte_tunnel_oper_state_]e{OperationalStateChanges}D{SignaledName}s{FailReason}[mpls_mte_tunnel_fail_reason]e{DestinationUpCount}D{DestinationDisabledCount}D{DestinationDownCount}D{Destinations}a($482){TunnelCurrentLSP}$494{ReoptimizedP2MP_LSP}$494{TunnelStandbyLSP}$494{ReoptimizedStandbyP2MP_LSP}$494{TunnelRestorationLSP}$494{DelayCleanPP_LSP}$494{CleanedLSP}$494{ReOptHoldDownTimerRemaining}D{BandwidthRequested}D{BandwidthType}[mpls_te_bw_pool_type]e{CurrentLSPBandwidthRequested}D{CurrentLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{StandbyLSPBandwidthRequested}D{StandbyLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{ReoptLSPBandwidthRequested}D{ReoptLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{StandbyReoptLSPBandwidthRequested}D{StandbyReoptLSPBandwidthRequestedType}[mpls_te_bw_pool_type]e{IsNodeProtected}b{IsBandwidthProtect}b{TunnelRecovering}b{ReroutePending}b{AffinityFailureReoptDisabled}b{AffinityFailureReoptTimeRemained}D{AffinityFailureDelayedTearTimeRemained}D{InvalidationTimeRemained}D{DropMode}b{AutoRoute}b{ForwardingAdjacency}b{LoadShareFactor}D{LoadShareType}[mpls_te_loadshare_type]e{CreateTime}D{Uptime}D{MetricType}[mpls_te_metric_type]e{TiebreakerType}D{TiebreakerQualifier}[mpls_te_metric_qualifier]e{MetricQualifier}[mpls_te_metric_qualifier]e{IsHopLimitIgnore}b{HopLimitIgnoredReason}[te_hop_limit_ignore_t]e{OutboundFRRState}[mpls_te_frr_state]e{AreaID}s{P2PInfo}$496{PCEFailReason}[mpls_te_pce_fail_reasons]e{SNMPIndex}D{History}$443{PathProtection}$498{IsInterAreaTunnel}b{AutoBackup}$502{IsAutoBackup}b{AutoMesh}p($503){IsAutoPCC}b{AutoPCC}$504{IsPCEDelegated}b{PCEDelegation}$505{TunnelAttributeSetName}s{TunnelAttributeSetType}[tunnel_attribute_set_type_e_]e{SoftPreemption}p($460){MasterContext}p($292){SlaveContext}p($285){WDM_UNITunnel}p($351){TransportTunnelInfo}p($358){BFDInfo}p($507){OTNBidir}p($361){Bidir}p($508){XROAttributeSetName}s{XROAttributeSet}p($345){TETunnelConvergence}$464{ServiceInfo}$318{IsPassive}b{PassiveTunnelName}s{FlexInfo}p($509){BindingLabelExists}b{BindingLabel}D{LastHopIfindex}D;$129={Count}H;$130={CTXEventType}[rsvp_ng_api_ctx_ev_t_]e{CtrlEventType}[rsvp_ng_api_ctrl_ev_t_]e{Scheduled}$129{Tx}$129{Rx}$129{DropTx}$129{DropRx}$129{PostponedTx}$129;$131={Type}[rsvp_ng_api_ctx_ev_t_]e{ProducerSummaryReplayID}H{IsSent}b{Age}D{FilterReason}[rsvp_ng_api_ev_filter_reason_t_]e;$132={Timestamp}D{EventType}[rsvp_ng_api_ctx_hist_event_type_t_]e{EventData}2A(D);$133={ProducerSummaryReplayID}H{ProducerSummaryReplayBaseID}D{ConsumerSummaryReplayID}H{ConsumerSummaryReplayBaseID}D{Flags}D{Origin}[rsvp_ng_api_ctx_origin_t_]e{Statistics}14A($130){Events}a($131){history}a($132){SlaveProducerSummaryReplayID}H{SlaveConsumerSummaryReplayID}H;$170={IsStrictRoute}b{EROAddress}N{PrefixLength}C;$171={IsStrictRoute}b{EROInterfaceID}D{ERORouterID}N;$172=?(<EROType,rsvp_mgmt_ero_subobj_type>,1:{IPV4EROSubObject}$170,4:{UnnumberedEROSubObject}$171);$191={IsProtectionAvailable}b{IsProtectionInUse}b{IsBandwidthProtected}b{IsNodeProtectionAvailable}b{IsNodeID}b;$192={IsGlobalLabel}b;$193={IsProtectionAvailable}b{IsProtectionInUse}b{IsBandwidthProtected}b{IsNodeProtectionAvailable}b{IsNodeID}b;$194={Flags}$191{RROAddress}N;$195={Flags}$192{Label}D{IsLabelVariableLength}b{VariableLengthLabel}a(D);$196={Flags}$193{InterfaceAddress}N{InterfaceID}D;$197={SRLGs}a(D);$198=?(<RROType,rsvp_mgmt_rro_subobj_type>,1:{IPV4RROSubObject}$194,3:{LabelRROSubObject}$195,4:{UnnumberedRROSubObject}$196,34:{SRLG_RROSubObject}$197,?:v);$236={S2L_FECSubgroupID}I{S2L_FEC_LSP_ID}I{S2L_FECTunnelID}I{S2L_FECExtendedTunnelID}N{S2L_FECSource}N{S2L_FECDest}N{S2L_FEC_P2MP_ID}D{S2L_FECSubgroupOriginator}N{S2L_FEC_CType}[mpls_lib_ctype_t]e{S2L_FEC_VRF}D%V;$238={RouterID}N{InterfaceIndex}D;$239=?(<Type,te_addr_type_e>,1:{IPv4Address}N,2:{IPv4UnnumberedAddress}$238,?:v);$240={TEAddr}$239;$242={EgressPort}$240{LocalTermination}[mpls_te_termination_type_t]e{RemoteUniType}[mpls_te_uni_type_t]e{TermEgressPort}$240;$248=?(<FEC_CType,mpls_lib_ctype_t>,7:{P2P_LSPDestination}N,13:{FECDestinationP2MP_ID}D,?:v);$249={FEC_LSP_ID}I{FECTunnelID}I{FECExtendedTunnelID}N{FECSource}N{FECDestinationInfo}$248{FEC_VRF}D%V;$250={ConstraintType}C{ConstraintValue}D{ForwardRefValue}D{ConstraintExtendedValue}a(D){ExtendedForwardRefValue}a(D);$252={AffinityBits}D{AffinityMask}D{NamedAffinities}a($250);$253={SharedRiskGroup}D{SRLGName}s;$256={SessionCreateEvents}D{SessionUpEvents}D{SessionCreationFailedEvents}D{SessionDownEvents}D{SessionAdminDownEvents}D{SessionGracefullyDeleteEvents}D{SessionNonGracefullyDeleteEvents}D{SessionCreateTimeoutEvents}D{SessionReplayEvents}D;$261={Address}N{PrefixLen}C{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$262={Address}16x%s{PrefixLen}C{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$263={TERouterID}N{InterfaceID}D{Attribute}[te_xro_attribute_type]e{ExclusionType}[te_xro_exclusion_type]e;$264={ASNumber}I;$265={SRLG_ID}D{ExclusionType}[te_xro_exclusion_type]e;$266={FEC}$249{IgnoreLSP_ID}b{ProcessingNodeException}b{PenultimateNodeException}b{DestinationNodeException}b{ExclusionType}[te_xro_exclusion_type]e;$267=?(<Type,te_xro_subobj_type>,1:{IPv4Subobject}$261,2:{IPv6Subobject}$262,6:{UnnumberedSubobject}$263,32:{ASSubobject}$264,34:{SRLGSubobject}$265,36:{LSPSubobject}$266,?:v);$268={XROSubobjects}a($267);$280={LocalID}H{RemoreID}H{Time}D{Count}H;$284={Create}$280{Updates}$280{ApplicationSyncs}$280{ApplicationNaks}$280{SummaryReplaySyncs}$280{SummaryReplayNaks}$280{CacheNakRetries}$280;$285={ObjectSyncID}H{ObjectType}D{ObjectIdEvents}$284;$286={ApplicationSyncs}$280{ImplicitDeletes}$280{ApplicationNaks}$280{SummaryReplaySyncs}$280{SummaryReplayNaks}$280;$291={SlaveId}D{IdEvents}$286;$292={ObjectSyncID}H{ObjectType}D{Queue}D{CreateID}H{CreateTime}D{UpdateTime}D{DeleteTime}D{DeleteCtxLenght}D{SlaveInformation}a($291){HasHistory}b{PreActiveHistory}$284;$306={Context}D{Client}[te_serv_tun_client_]e{Source}N{AttributeSetName}s{AttributeSetResloved}b{EgressInformation}a(C){State}D{Result}D{Updated}H{NeedsReplay}b;$307={Context}D{ProtocolTyoe}[te_serv_tun_client_]e{ClientInstanceName}s{NextHop}N{ExplicitPath}s{AttributeSetName}s{AttributeSetResolved}b{Updated}H{NeedsReplay}b{Ipv6CapsRequested}b{Ipv6CapsEnabled}b;$308={Client}[te_serv_tun_client_]e{State}D{Result}D{EgressInformation}a(C){Updated}H{NeedsReplay}b;$309={Counts}51A(D);$310={EventTime}D{PreviousState}[te_s2l_fsm_state_e]e{NextState}[te_s2l_fsm_state_e]e{EventID}[te_s2l_fsm_ev_e_]e;$311={S2L_FSMState}[te_s2l_fsm_state_e]e{S2LFlags}D{DeletionCause}[te_p2mp_s2l_deletion_cause_t]e{DeletionSubcause}[te_p2mp_s2l_deletion_subcause_t]e{InjectedEvents}D{EventStatistics}a($310){EventCounts}$309{PathToBeReceived}b{ReservationToBeReceived}b{LabelToBeReceived}b{RewriteToBeReceived}b{sync_id_from_rsvp_to_be_received}b{sync_id_from_master_to_be_received}b{frr_active_pending}b{config_consistent}b{missing_vif}b{signame_diff}b{frr_diff}b{frr_np_diff}b{frr_bwp_diff}b{record_route_diff}b{soft_preemption_diff}b;$317={ServiceInfos}a($308);$318=?(<ServiceType,te_serv_type_t>,1:{VIFEgressInfo}$317,4:{S2LEgressInfo}$317,2:{VIFAutoTunnelInfo}$306,3:{VIFAutoTunnelP2PInfo}$307,?:v);$323={BitRate}D{Tolerance}I;$324={BitRate}D;$325={BitRate}D;$326=?(<ODULevel,te_odu_level_e>,20:{ODUFlexCBR}$323,21:{ODUFlexGFP_FRes}$324,22:{ODUFlexGFP_FNonRes}$325,?:v);$331={LSPState}b{S2LState}b{LSPReRoute}b{LSPReOpt}b{LSPInsufficientBW}b{LSPBandwidthChange}b{LSP_PCALCFailureLoggingEnabled}b{AllLoggingEnabled}b;$332={ConfiguredBandwidth}D{DSTEClassType}C{IsBandwidthConfigured}b{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{PolicyClass}C{PolicyClasses}a(C){IsPolicyclassConfigured}b{ForwardClass}D{Affinity}$252{IsAffinityConfigured}b{FastReroute}b{FRRNodeProtection}b{FRRBandwidthProtection}b{RecordRoute}b{AutoBandwidthCollect}b{AutoRouteAnnounce}b{SoftPreemptionConfigured}b{Logging}$331{bandwidth}D{LoadShare}D{IsInterfaceBWConfigured}b{MeshGroupID}a(D){TunnelID}a(I);$333={ProtectedInterface}s;$334={Name}s{SourceType}[te_sig_name_append_]e{ProtectedInterfaceType}[te_sig_name_append_]e{IsMPAddresses}b;$335={IsSignalledNameConfigured}b{SignalledName}$334{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{PolicyClass}C{PolicyClasses}a(C){IsPolicyclassConfigured}b{Affinity}$252{IsAffinityConfigured}b{RecordRoute}b{Logging}$331{ProtectedInterfaces}a($333){TunnelID}a(I);$336={AttributeType}s{Generation}D{IsDefault}b;$337={ConfiguredBandwidth}D{CostLimit}D{DSTEClassType}C{BandwidthType}[mpls_te_bw_pool_type]e{IsBandwidthConfigured}b{IsCostLimitConfigured}b{Affinity}$252{IsAffinityConfigured}b{TunnelID}a(I){Generation}D{VersionInfo}a($336){PathInvalidationTimeout}D{PathInvalidationAction}D{IsPathInvalidationTimeoutConfigured}b{IsPathInvalidationActionConfigured}b{ExcludeListName}s{IsExcludeListNameConfigured}b;$338={XRO}$268;$339={FastReroute}b{FRRBandwidthProtection}b{SetupPriority}C{HoldPriority}C{IsPriorityConfigured}b{ConfiguredBandwidth}D{DSTEClassType}C{IsBandwidthConfigured}b{TunnelID}a(I){Affinity}$252{IsAffinityConfigured}b;$340={SNCMode}[te_aps_snc_mode_e]e{TCMId}D{ProtectionType}[te_protect_type_e]e{ProtectionMode}[te_pnr_revert_options_e]e{WaitToRestoreTime}D{HoldOffTime}D{PathProtProfileType}[te_path_prot_profile_type_e]e;$341={Type}[te_attribute_set_sr_prepend_type]e{Index}D{NextLabel}D;$342={PrependEntries}a($341);$343={TunnelID}a(I){Affinity}$252{IsAffinityConfigured}b{PathSelectionSegmentRoutingAdjacencyProtection}[te_s2l_sr_path_selection_type]e{IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured}b{PathInvalidationTimeout}D{PathSelectionInvalidationAction}[te_path_inval_action_type]e{IsPathInvalidationTimeoutConfigured}b{IsPathInvalidationActionConfigured}b{PathSelectionMetric}[mpls_te_metric_type]e{IsPathSelectionMetricConfigured}b{PathSelectionSegmentRoutingMargin}D{IsPathSelectionSegmentRoutingMarginRelative}b{IsPathSelectionSegmentRoutingMarginConfigured}b{PathSelectionSegmentRoutingSegmentLimit}D{IsPathSelectionSegmentRoutingSegmentLimitConfigured}b{IsPathSelectConfigured}b{Logging}$331{PrependList}$342{IsPrependListConfigured}b;$344=?(<TunnelAttributeSetType,tunnel_attribute_set_type_e_>,0:v,1:v,2:{AttributeSetPathOption}$337,4:{AttributeSetAutobackup}$335,5:{AttributeSetAutomesh}$332,6:{AttributeSetXRO}$338,7:{AttributeSetP2MPTE}$339,8:{AttributeSetAPS_PP}$340,9:{AttributeSetP2P_TE}$343);$345={TunnelAttributeSetName}s{TunnelAttributeSetNameCRC32}D{AttributeSetUnion}$344;$346={LabelSet}b{Grid}[gmpls_uni_mgmt_wdm_grid]e{ChannelSpacing}[gmpls_uni_mgmt_dwdm_cs]e{Identifier}I{Channel}i;$347={TPN}I{BitMapLength}I{BitMap}a(C);$348=?(<LabelType,mpls_te_mgmt_gmpls_label_type>,0:v,1:{WDM}$346,2:{OTN}$347,?:v);$350={PathIngressLabel}p($348){PathEgressLabel}p($348){ResvIngressLabel}p($348){ResvEgressLabel}p($348);$351={TunnelState}[mpls_te_tunnel_state]e{TunnelRole}[mpls_te_tunnel_role]e{TunnelID}I{LSP_ID}I{LocalOpticalRouterID}N{RemoteOpticalRouterID}N{ControlledInterface}s{SourceAddress}N{DestinationAddress}N{ExtendedTunnelID}N{LabelOrigin}[mpls_te_mgmt_gmpls_label_origin_type]e{SRLGDiscovery}b;$352={BandwidthCfg}$326;$353={IncomingController}s{IncomingControllerState}[te_controller_state_e]e{IncomingSubController}s{IncomingSubControllerState}[te_controller_state_e]e{OutgoingController}s{OutgoingControllerState}[te_controller_state_e]e{OutgoingSubController}s{OutgoingSubControllerState}[te_controller_state_e]e{Bandwidth}$326{Labels}p($350){CrossConnectID}D{IsConnected}b{Uptime}D{OutgoingControllerIfhandle}D%h{OutgoingSubControllerIfhandle}D%h{IncomingControllerIfhandle}D%h{IncomingSubControllerIfhandle}D%h{GPID}I;$354={sBit}b{pBit}b{nBit}b{oBit}b{ProtectType}[te_protect_type_e]e{IsWTRPresent}b{WTRTimeout}D{IsHOPresent}b{HOTimeout}D{IsSNCModePresent}b{snc_mode}[te_aps_snc_mode_e]e{tcm_id}D{path_prot_profile_type}[te_path_prot_profile_type_e]e;$355={ProtectionInfo}$354;$356={Otn}$353{Aps}$355;$357={ClientPort}s{ClientIfHandle}D%h{ClientOduName}s{ClientOduIfHandle}D%h{CrossConnectID}D{IsConnected}b{Uptime}D{LocalTermination}[mpls_te_termination_type_t]e{StaticUniType}[mpls_te_uni_type_t]e{TermClientPort}s{TermClientIfHandle}D%h;$358={OTN}$352{StaticUni}$357{EgressStaticUni}$242;$359={ProtectionProfile}$340{ActiveLSP}[mpls_te_lsp_mode_]e{DiversityType}[te_pp_diversity_t]e;$360={RevertOption}[te_pnr_revert_options_e]e{DiverseLSP}[mpls_te_lsp_mode_]e{DiversityType}[te_pp_diversity_t]e;$361={Aps}$359{Restoration}$360;$397={SIDType}[te_sr_sid_type]e{HasIPAddresses}b{LocalAddr}N{RemoteAddr}N{HasMPLSLabel}b{MPLSLabelValue}D{HasEntropyLabel}b;$399={PathProtectionSwitchoverEventIndex}D{PathProtectionTunnelID}I{FromLSP_ID}I{ToLSP_ID}I{DateOfErrorDetection}D{DateOfErrorDetectionMillisec}D{SwitchoverDurationMillisec}D{PathProtectionSwitchoverReason}[te_p2mp_s2l_deletion_subcause_t]e;$418={ErrorMessage}s{LSPMode}[mpls_te_lsp_mode_]e{LogTime}D;$420={ErrorNode}D{Error}C{SubCode}I{LSPMode}[mpls_te_lsp_mode_]e{LogTime}D{SignallingLSP_ID}I{ErrorMessage}s{ReverseLSP}b;$421={OptionIndex}D{PathOptionType}[mpls_te_pathoption_type_]e{ExplicitPathName}s{ExplicitPathID}I{HolddownDuration}I{PCEAddress}N{PathOptionAreaID}s{IsStrictExplicitPath}b{IsHelddown}b{IsLockdown}b{IsVerbatim}b{IsDisabled}b{HasAttributeSet}b{AttributeSet}$345{AttributeSetFound}b{PathCalculationError}a($418){RemergeError}a($418){SignallingError}a($420){HasXROAttributeSet}b{XROAttributeSetFound}b{XROAttributeSet}$345{IsSegmentRouting}b{ProtectedByPathOptionIndex}D{RestoredFromPathOptionIndex}D;$423={HopIndex}D{IEPHopType}[mpls_te_iep_hop_type_]e{IEPHopAddress}N;$424={PathOptionID}D{IEPHopList}a($423);$429={IsAutoBandwidthEnabled}b{ReactivationTime}D;$430={IsAutoBandwidthCollectOnly}b{MinimumBandwidth}D{MaximumBandwidth}D{ApplicationFrequency}D{CollectionFrequency}D{AdjustmentThresholdPercent}D{AdjustmentThresholdValue}D{OverflowThresholdPercent}D{OverflowThresholdValue}D{OverflowThresholdLimit}D{UnderflowThresholdPercent}D{UnderflowThresholdValue}D{UnderflowThresholdLimit}D;$431={LastBandwidthApplied}D{BandwidthPoolType}[mpls_te_bw_pool_type]e{BandwidthApplications}D{LastApplicationTrigger}[te_autobw_app_trigger_t]e{ApplicationJitter}D{TimeLeftApplication}D{SamplesCollected}D{TimeLeftCollection}D{HighestBandwidth}D{UnderflowHighestBandwidth}D{ThresholdOverflows}D{OverflowEarlyBWApplications}D{ThresholdUnderflows}D{UnderflowEarlyBWApplications}D{CollectOnlyRequestedBandwidth}D{ApplicationRejectReason}[te_autobw_app_rej_t]e;$434={ReOptLastFailReason}[mpls_te_reopt_decision_reason_]e{ReOptFailedDestination}N{ReOptFailedTimestamp}D;$435={CurrentLSPUptime}D{CurrentUptime}D;$436={ConnectedUptimes}p($435){CurrentSetupTimer}p(D){SelectionReason}s{CurrentSetupLastError}s;$437={ReoptimizedSetupUptime}p(D){ReoptimizedSetupTimer}p(D){ReoptimizedSetupLastError}s;$438={ProtectingSetupUptime}p(D){ProtectingSetupTimer}p(D){ProtectingSetupLastError}s;$439={PreviousPathOption}s{PreviousTunnelInstance}p(D){PreviousFailReason}s{PreviousSetupLastError}s;$440={PreviousProtectPathOption}s{PreviousProtectTunnelInstance}D{PreviousProtectFailReason}s{PreviousProtectSetupLastError}s;$441={PathOptionIndex}D{OtherSetupError}s;$442={StandbyLSPUptime}p(D){StandbySetupTimer}p(D);$443={CurrentSetup}p($436){ReoptSetup}p($437){GMPLSPathProtectSetup}p($438){PreviousSetup}p($439){PreviousGMPLSPathProtectSetup}p($440){GMPLSOtherSetup}p($441){GMPLSOtherProtectSetup}p($441){StandbySetup}p($442){StandbyReoptSetup}p($437){LastReOptFail}$434{LastStdbyReOptFail}$434;$444={ReverseLSP_ID}I{PathRejectReasonBW}b{PathRejectReasonAffinity}b{PathRejectReasonIPAddr}b{PathRejectReasonReverseLink}b{PathRejectReasonIXCD}b{PathRejectReasonHolddown}b{PathRejectReasonExcludeNode}b{PathRejectReasonExcludeLink}b{PathRejectReasonExcludeSRLG}b{PathRejectReasonHopLimit}b{PathRejectReasonNodeOLUnknown}b{PathRejectReasonNodeOLHead}b{PathRejectReasonNodeOLMid}b{PathRejectReasonNodeOLTail}b{PathRejectReasonReverseBW}b{PathRejectReasonNodeUnreachable}b{PathOptionIndex}I{PathOptionType}[mte_path_option_type]e{PathCalculationError}a($418){ERORejectReason}[te_rev_ero_reject_reasons_t]e;$446={SentPathQueries}I{TimeSinceLastQuerySent}D{ReceivedPreferredPathErrors}I{TimeSinceLastPreferredPathError}D{ReceivedPreferredTreeErrors}I{TimeSinceLastPreferredTreeError}D{PreferredPathErrorNode}N{PreferredTreeErrorNode}N;$448={SignalType}C{NMCOrTolerance}I{NVC}I{Multiplier}I{BitRate}D;$449=?(<TSpecType,te_mgmt_generic_tspec_type>,0:{OTNTSpec}$448,?:v);$450={SignalType}C{NMCOrTolerance}I{NVC}I{Multiplier}I{BitRate}D;$451=?(<FSpecType,te_mgmt_generic_fspec_type>,0:{OTNFSpec}$450,?:v);$452={AverageRate}H{MaximumBurst}H{PeakRate}H;$455={PathIn}H{PathOut}H{ResvIn}H{ResvOut}H{LabelRewrite}H{TunnelRewrite}H;$458={SoftPreemptionEvents}D{ReoptCompletedLSPs}D{TornDownLSPs}D{PathProtectionSwitchoverLSPs}D{FRRTriggeredLSPs}D{TimeInPreemptionPendingMin}I{TimeInPreemptionPendingMax}I{TimeInPreemptionPendingAvg}I;$459={Timestamp}D{PreemptingLinkAddress}N;$460={Status}[mpls_te_soft_preemption_state_]e{SoftPreemptionPathErrors}a($459){TimeInPreemptionPending}I{PreemptionPendingResolution}[mpls_te_soft_preemption_resolution_]e{SoftPreemptionCounters}$458;$461={Status}[mpls_te_soft_preemption_state_]e{SoftPreemptionTimestamp}D{SoftPreemptionLink}s{PreemptingLinkAddress}N{TimeToHardPreemption}I{FRRrewrite}b{FRRrewriteTunnelName}s;$463={HopAddress}N{HopAffinity}D{HopExtendedAffinity}a(D);$464={IsConvergenceInProgress}b{FRRTriggerTime}H{PCALCCompleteTime}H{ConvergenceCompleteTime}H{ConvergenceLSP}$455;$466={BFDFastDetectingEnabled}b{MinInterval}D{MinIntervalDefault}b{Multiplier}C{MultiplierDefault}b{BringUpTimeout}I{BringUpTimeoutDefault}b{DampeningInitialWait}D{DampeningInitialWaitDefault}b{DampeningMaxWait}D{DampeningMaxWaitDefault}b{DampeningSecondaryWait}D{DampeningSecondaryWaitDefault}b{PeriodicLSPPingDisabled}b{PeriodicLSPPingInterval}D{PeriodicLSPPingIntervalDefault}b{BFDSessionDownAction}[mpls_te_bfd_session_down_action]e{BFDSessionDownReoptTimeout}D{BFDEncapMode}[te_vif_bfd_encap_mode_t]e;$467={AssociationType}I{AssociationID}p(I){AssociationSource}p(N){AssociationGlobalID}p(D){AssociationCorouted}b;$482={DestinationAddress}N{PathOptions}a($421){DestinationState}[te_destination_state_t_]e{ActivePathOptionIndex}D{PathOptionExhausted}b{Uptime}D{PathChangeTime}D{TotalUptime}D{S2LExist}b{DestinationDeletionCause}[te_p2mp_s2l_deletion_cause_t]e{DestinationDeletionSubCause}[te_p2mp_s2l_deletion_subcause_t]e{DestinationDeletionTimestamp}D{IsInterArea}b{InterAreaReoptimization}$446;$483={State}[te_bfd_lsp_session_state]e{StateChangeTime}D;$484={LspID}I{DeletionTime}D{DeletionReason}s{DeletionDiagnosticCode}D;$485={CreationTime}D{SessionInfo}$483{DeletionHistory}p($484);$486={SessionInfo}$483{FailureDiagnosticCode}D{FailureReason}s{LocalDiscriminator}D{RemoteDiscriminator}D{MinInterval}D{MinIntervalDefault}b{Multiplier}C{MultiplierDefault}b;$487={S2LAssociationType}I{S2LAssociationTieRole}[te_association_tie_role_]e{S2LAssociationID}I{S2LAssociationSource}N{S2LGlobalSource}p(D){S2LExtendedID}a(D);$488={S2LSecondary}b{S2LProtecting}b{S2LNotification}b{S2LOperational}b{Enhanced}b{Ded1Plus1}b{Ded1To1}b{Shared}b{LinkUnprotected}b{ExtraTraffic}b{Any}b{Rerouting}b{ReroutingNoET}b{OneToNProtectionET}b{OnePlusOneUni}b{OnePlusOneBi}b{LSPUnprotected}b;$489={IsLockout}b{Origination}[flex_lsp_lockout_origination_t]e{LockoutTimestamp}D;$490={EntryExists}b{InLabel}D{BfdCreated}b{BfdUp}b{OamCreated}b{FlexFEC}$236{BfdNextHop}N{BfdTunIfh}D%h{BfdOutIfh}D%h{BfdIntLabel}D{BfdEgressLabel}D{FaultLdiLockout}b{FaultLdi}b{FaultLkr}b{FaultAis}b{FaultTime}D{Lockout}$489;$491={SRLGCollectType}[te_srlg_collect_request_t]e{DiscoveredSRLGs}a(D);$492={S2L_FEC}$236{ActivePathOption}$421{SharedRiskLinkGroups}a($253){PCALCArea}s{IsExpandedERO}b{PathReevalQueryMid}D{TimeSinceLastQueryReceivedMid}D{TimeSinceLastPreferredPathExistsSendMid}D{TimeSinceLastPreferredTreeExistsSendMid}D{ExpandedEROAreaID}s{ExpandedEROAffinityBits}D{ExpandedEROAffinityMask}D{ExpandedEROMetricType}[mpls_te_metric_type]e{ExpandedEROMetric}D{IsExpandTimerRunning}b{ExpandTimerDuration}D{ExpandTimerRemain}D{ABRAutoDiscovered}N{IsFRREnabled}b{IsNodeProtected}b{IsBandwidthProtect}b{PathRROEnabled}b{OutERO}a($172){InERO}a($172){OutXRO}$268{InXRO}$268{PathRRO}a($198){ResvRRO}a($198){PathAffinityArray}a($463){TSpec}p($452){GenericTSpec}p($449){FSpec}p($452){GenericFSpec}p($451){Weight}H{ReverseWeight}H{Uptime}D{EgressInterface}s{EgressInterfaceState}[te_controller_state_e]e{EgressInterfaceBrief}s{IngressInterface}s{IngressInterfaceState}[te_controller_state_e]e{IngressInterfaceBrief}s{EgressInterfaceHandle}D{IngressInterfaceHandle}D{S2LLocalLabel}D{S2LOutLabel}D{OutboundFRRState}[mpls_te_frr_state]e{FRROutTunnelInterface}s{Role}[mpls_te_tunnel_role]e{SignallingStatus}[mpls_te_tunnels_signaling_status]e{LocalRouterID}N{UpstreamRouterID}N{DownstreamRouterID}N{NextHopAddress}N{NextHopAddressGeneric}$240{PreviousHopAddress}N{PreviousHopAddressGeneric}$240{IncomingAddress}N{IncomingAddressGeneric}$240{FSM}$311{BackupTunnelInterface}D%h{NodeHopCount}C{S2LConvergence}$455{SoftPreemption}p($461){MasterContext}p($292){SlaveContext}p($285){RSVPApiCtx}$133{IsOptical}b{GMPLSLabels}p($350){ServiceInfo}$318{OTN_S2L}p($356){HeadEndBFDInfo}p($485){TailEndBFDInfo}p($486){SRLGCollection}$491{Association}p($487){Protection}p($488){S2LReverseEROObjPresent}b{ReverseEROIn}a($172){ReverseLSPPresent}b{ReverseLSPConnected}b{ReverseLSP_FEC}$249{ReverseLSPName}s{S2LReverseTSpecObjPresent}b{ReverseTSpec}$452{S2LReverseLspSubObjs}a(C){FlexInfo}p($490){S2LSegmentRoutingPath}a($397){SRDBCheckEnabled}b;$494={SignaledName}s{IsFRRFailed}b{FRRActiveReason}D{LSPBandwidth}D{LSPSetupPriority}C{LSPHoldPriority}C{LSPBandwidthType}[mpls_te_bw_pool_type]e{DSTEClassMatch}b{DSTEClassIndex}C{LSP_FEC}$249{Type}[mpls_te_lsp_type]e{S2LList}a($492){Uptime}D{S2LsUp}D{S2LsProceeding}D{S2LsDown}D{ReoptimizeReason}[mpls_te_reopt_decision_reason_]e{ReoptimizeTrigger}[mte_reopt_trigger_]e{TimerLeft}D{IsPassive}b;$496={AutoBandwidthStatus}$429{AutoBandwidthConfig}$430{AutoBandwidthOper}$431{IsBidirectional}b;$497={TunnelName}s{TunnelID}D{IsP2MP}b{SignaledName}s{ConfiguredBandwidth}D{InterfaceConfiguredBandwidth}D{BandwidthType}[mpls_te_bw_pool_type]e{SetupPriority}C{HoldPriority}C{PolicyClass}C{PolicyClasses}a(C){ForwardClass}D{Affinity}$252{BackupBandwidth}D{BackupBandwidthFlags}C{ConfigLoadShare}D{PayloadType}I{IsInConfig}b{ExplicitNullImposition}b{FastReroute}b{IsBackupTunnel}b{RecordRoute}b{SRLGDiscovery}b{PathProtectionEnabled}b{HopLimit}C{CostLimit}D{CostLimitGlobal}D{PathInvalidationTimeoutSource}D{PathInvalidationTimeout}D{PathInvalidationActionSource}D{PathInvalidationAction}D{SoftPreempt}b{BidirectionalConfig}p($467){BFDConfig}$466{DisableAffinityFailureReopt}b{AffinityFailureReoptTimer}D{SegmentRoutingPathSelection}[te_s2l_sr_path_selection_type]e;$498={TimeOfSwitchoverSec}D{SwitchoverTotal}I{SwitchoverReady}I{StandbyReoptimizedNumber}I{SwitchoverReason}I{DiversityType}[te_pp_diversity_t]e{IsPathProtectConfigured}b{PathProtectionProtectedByID}D{ValidPathProtectionPathOptionExists}b{IsPathProtectSwitchOverUnderway}b{Switchover}$399{ReoptimizationTimeRemaining}D;$499={SRLG}D{SRLGName}s{AdminWeight}D;$500={FromAddress}N{ToAddress}N{AggregateAdminWeight}H{CommonSRLG}a(D);$501={ProtectedInterfaceSRLG}a($499){WeightedSRLGHops}a($500);$502={ProtectedLSPs}D{ProtectedS2Ls}D{SharingFamilies}D{ABProtectionType}[AutoBackupProtectionType]e{IsUsingSRLG}b{SRLGProtType}[AutoBackupSRLGMode]e{ABProtectedInterface}s{WeightedSRLGInfo}p($501){ProtectedAddress}N{TunnelAttributeSetName}s{IEPList}a($424){IsUnusedRemovalTimerRunning}b{UnusedRemovalRemainingTime}D;$503={MeshGroupID}D{TunnelDestinationListName}s{IsTunnelUnusedTimerRunning}b{RemainingUnusedTime}D{MeshGroupType}[te_meshgroup_type_]e;$504={OwnerAddress}N{CreatorAddress}N{HasCreatorID}b{CreatorID}s{PLSPID}D{SymbolicName}s{OperationallyUp}b;$505={PLSP_ID}D{SymbolicName}s{OwnerAddress}N{OperationallyUp}b;$506={OptionIndex}D{HoldDownTime}D{RemainedTime}D{BackoffCount}D;$507={BFDSessionUp}b{SessionUpTime}D{FailureDiagnosticCode}D{FailureReason}s{MinimumSessionUpInterval}D{MaximumSessionUpInterval}D{EventCounters}$256{DampeningInfo}a($506);$508={ReverseBandwidth}D{ReverseBandwidthStandby}D{ReverseEROErrorCurrent}p($444){ReverseEROErrorReopt}p($444){ReverseEROErrorStandby}p($444){ReverseEROErrorStandbyReopt}p($444);$509={FaultLdiLockout}b{FaultLdi}b{FaultLkr}b{FaultAis}b{FaultTime}D{FaultInLabel}D{IsLockout}b{LockoutTimestamp}D{LockoutLSP_ID}I;\", \"schema_names\": [[\"RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(TunnelName)\", \"\"]], \"subtypes\": {\"256\": \"mpls_te_bfd_lsp_counters\", \"261\": \"te_xro_subobj_ipv4\", \"262\": \"te_xro_subobj_ipv6\", \"263\": \"te_xro_subobj_unnum\", \"264\": \"te_xro_subobj_as\", \"265\": \"te_xro_subobj_srlg\", \"266\": \"te_xro_subobj_p2p_lsp\", \"267\": \"te_xro_subobj\", \"268\": \"te_xro\", \"280\": \"hasi_id_event\", \"284\": \"hasi_s_obj_id_events\", \"285\": \"hasi_s_object_ctx\", \"286\": \"hasi_m_id_events\", \"291\": \"hasi_m_object_slave_info\", \"292\": \"hasi_m_object_ctx\", \"306\": \"te_serv_p2mp_auto_tun\", \"307\": \"te_serv_p2p_auto_tun\", \"308\": \"te_serv_p2mp_einfo\", \"309\": \"mpls_te_p2mp_fsm_event_counts\", \"310\": \"mpls_te_p2mp_fsm_event_stat\", \"311\": \"mpls_te_p2mp_fsm_info\", \"317\": \"te_serv_p2mp_einfos\", \"318\": \"te_service_info\", \"323\": \"te_odu_flex_cbr_info\", \"324\": \"te_odu_flex_gfp_f_res_info\", \"325\": \"te_odu_flex_gfp_f_non_res_info\", \"326\": \"te_odu_v3_bw\", \"509\": \"mpls_te_tunnel_flex_info\", \"331\": \"mpls_te_logging_attributes\", \"332\": \"mpls_te_attribute_set_auto_mesh\", \"333\": \"mpls_te_protected_if_name_str\", \"334\": \"mpls_te_attribute_set_sig_name\", \"335\": \"mpls_te_attribute_set_auto_backup\", \"336\": \"mpls_te_attribute_set_version\", \"337\": \"mpls_te_attribute_set_path_option\", \"338\": \"mpls_te_attribute_set_xro\", \"339\": \"mpls_te_attribute_set_p2mp_te\", \"340\": \"mpls_te_attribute_set_aps_pp\", \"341\": \"mpls_te_attribute_set_sr_prepend_entry\", \"342\": \"mpls_te_attribute_set_sr_prepend_list\", \"343\": \"mpls_te_attribute_set_p2p_te\", \"344\": \"mpls_te_attribute_set_union\", \"345\": \"mpls_te_attribute_set\", \"346\": \"mpls_te_mgmt_wdm_fixed_grid_label\", \"347\": \"mpls_te_mgmt_g709_otn_fixed_size_label\", \"348\": \"mpls_te_mgmt_gmpls_label\", \"350\": \"mpls_te_mgmt_gmpls_labels\", \"351\": \"mpls_te_mgmt_wdm_uni_tunnel_info\", \"352\": \"mpls_te_tunnel_otn_info\", \"353\": \"mpls_te_s2l_otn_info\", \"354\": \"te_pvt_prot_obj_t\", \"355\": \"mpls_te_s2l_aps_info\", \"356\": \"mpls_te_otn_s2l_info\", \"357\": \"mpls_te_tunnel_static_uni_info\", \"358\": \"mpls_te_transport_tunnel_info\", \"359\": \"mpls_te_tunnel_aps_info\", \"360\": \"mpls_te_tunnel_restoration_info\", \"361\": \"mpls_te_tunnel_otn_bidir_info\", \"498\": \"mpls_te_pp_info\", \"129\": \"rsvp_ng_api_stats_entry_bag\", \"130\": \"rsvp_ng_api_stats_bag\", \"131\": \"rsvp_ng_api_ctx_event_bag\", \"132\": \"rsvp_ng_api_ctx_history\", \"133\": \"rsvp_ng_api_ctx_bag\", \"449\": \"te_mgmt_generic_tspec\", \"492\": \"mpls_te_p2mp_s2l\", \"397\": \"te_s2l_sr_path_hop\", \"399\": \"te_pp_sw_log_entry_bag\", \"451\": \"te_mgmt_generic_fspec\", \"448\": \"te_mgmt_g709_otn_tspec\", \"494\": \"mpls_te_p2mp_lsp\", \"452\": \"bandwidth_spec_bag\", \"508\": \"mpls_te_tunnel_bidir_info\", \"496\": \"mpls_te_p2p_info_bag\", \"418\": \"mpls_te_p2mp_pcalc_error\", \"420\": \"mpls_te_p2mp_sig_error\", \"421\": \"mpls_te_p2mp_path_option\", \"423\": \"mpls_te_iep_hop_bag\", \"424\": \"mpls_te_iep_bag\", \"170\": \"rsvp_mgmt_ero_ipv4_subobj\", \"171\": \"rsvp_mgmt_ero_unnum_subobj\", \"172\": \"rsvp_mgmt_ero_subobj\", \"429\": \"mpls_te_tunnels_autobw_status\", \"430\": \"mpls_te_tunnels_autobw_config\", \"431\": \"mpls_te_tunnels_autobw_oper\", \"434\": \"mpls_te_tunnels_tunnel_last_reopt_fail_info\", \"435\": \"mpls_te_tunnels_history_current_connected\", \"436\": \"mpls_te_tunnels_history_current\", \"437\": \"mpls_te_tunnels_history_reopt\", \"438\": \"mpls_te_tunnels_history_path_protect\", \"439\": \"mpls_te_tunnels_history_previous\", \"440\": \"mpls_te_tunnels_history_previous_protect\", \"441\": \"mpls_te_tunnels_history_other_setup\", \"442\": \"mpls_te_tunnels_history_standby_setup\", \"443\": \"mpls_te_tunnels_history_bag\", \"444\": \"mpls_te_tunnels_reverse_ero_error_bag\", \"446\": \"mpls_te_interarea_reopt_info\", \"191\": \"rsvp_mgmt_rro_ipv4_subobj_flags\", \"192\": \"rsvp_mgmt_rro_label_subobj_flags\", \"193\": \"rsvp_mgmt_rro_unnumbered_subobj_flags\", \"194\": \"rsvp_mgmt_rro_ipv4_subobj\", \"195\": \"rsvp_mgmt_rro_label_subobj\", \"196\": \"rsvp_mgmt_rro_unnumbered_subobj\", \"197\": \"rsvp_mgmt_rro_srlg_subobj\", \"198\": \"rsvp_mgmt_rro_subobj\", \"455\": \"te_lsp_convergence_info\", \"458\": \"mpls_te_soft_preemption_head_counters\", \"459\": \"mpls_te_soft_preemption_path_error\", \"460\": \"mpls_te_soft_preemption_tunnel_info\", \"461\": \"mpls_te_soft_preemption_lsp_info\", \"463\": \"tunnel_hop_info\", \"450\": \"te_mgmt_g709_otn_fspec\", \"504\": \"mpls_te_autopcc_info\", \"466\": \"mpls_te_tunnel_bfd_config_info\", \"467\": \"mpls_te_tunnel_bidir_config_info\", \"505\": \"mpls_te_pce_delegation_info\", \"506\": \"mpls_te_path_option_dampening_info\", \"464\": \"te_vif_convergence_info\", \"482\": \"mpls_te_p2mp_dest\", \"483\": \"mpls_te_bfd_session_info\", \"484\": \"mpls_te_bfd_deletion_history\", \"485\": \"mpls_te_head_bfd_info\", \"486\": \"mpls_te_tail_bfd_info\", \"487\": \"mpls_te_s2l_association_object\", \"488\": \"mpls_te_s2l_protection_object\", \"489\": \"flex_lockout_t\", \"490\": \"mpls_te_s2l_flex_info\", \"491\": \"te_s2l_srlg_collect_info\", \"236\": \"te_s2l_fec_t\", \"238\": \"te_addr_type_ipv4_unnum\", \"239\": \"addr\", \"240\": \"te_addr_t_\", \"497\": \"mpls_te_p2mp_tun_cfg_bag\", \"242\": \"mpls_te_tunnel_egress_static_uni_info\", \"499\": \"mpls_te_wsrlg_value_bag\", \"500\": \"mpls_te_wsrlg_hop_bag\", \"501\": \"mpls_te_wsrlg_info_bag\", \"502\": \"mpls_te_autobackup_info\", \"503\": \"mpls_te_automesh_info\", \"248\": \"te_lsp_fec_ctype_data_t\", \"249\": \"te_lsp_fec_t\", \"250\": \"affinity_name_bag\", \"507\": \"mpls_te_tunnel_bfd_info\", \"252\": \"mpls_te_tunnels_affinity_info\", \"253\": \"mpls_srlg_info\"}, \"enums\": {\"te_mgmt_generic_fspec_type\": {\"0\": \"TEGenericFSpecTypeG709OTN\"}, \"te_s2l_sr_path_selection_type\": {\"0\": \"TE_S2L_SRPathSelectionAny\", \"1\": \"TE_S2L_SR_PathSelectionAdjUnprotected\", \"2\": \"TE_S2L_SR_PathSelectionAdjProtected\"}, \"te_rev_ero_reject_reasons_t\": {\"0\": \"None\", \"1\": \"BadReverseERO\", \"2\": \"TieRejected\", \"3\": \"StandbyNotRequired\", \"4\": \"AdminState\", \"5\": \"Priority\", \"6\": \"ClassType\", \"7\": \"BadAssociation\"}, \"mpls_te_lsp_type\": {\"0\": \"MPLS_TE_LSP_TypeNotSet\", \"1\": \"MPLS_TE_LSP_TypeP2P\", \"2\": \"MPLS_TE_LSP_TypeP2MP\", \"3\": \"MPLS_TE_LSP_TypeGMPLS_OUNI\", \"4\": \"MPLS_TE_LSP_TypeGMPLS_NNI\", \"5\": \"MPLS_TE_LSP_TypeP2PBidir\", \"6\": \"MPLS_TE_LSP_TypeGMPLSTp\", \"7\": \"MPLS_TE_LSP_TypeGMPLS_NNI_OTN\", \"8\": \"MPLS_TE_LSP_TypeSegmentRoutingP2P\"}, \"te_autobw_app_trigger_t\": {\"0\": \"ApplicationNone\", \"1\": \"ApplicationPeriodic\", \"2\": \"ApplicationManual\", \"3\": \"ApplicationOverflow\", \"4\": \"ApplicationUnderflow\"}, \"mte_tunnel_oper_state_\": {\"0\": \"TunnelStateOperUnknown\", \"1\": \"OperationalDown\", \"2\": \"OperationalUp\"}, \"mte_tunnel_admin_state_\": {\"0\": \"TunnelStateAdminUnknown\", \"1\": \"AdminShutdown\", \"2\": \"AdminUp\"}, \"te_meshgroup_type_\": {\"0\": \"MeshgroupTypeAutomesh\", \"1\": \"MeshgroupTypeOnehop\"}, \"te_bfd_lsp_session_state\": {\"0\": \"BFDOverLSPSessionStateNone\", \"1\": \"BFDOverLSPSessionStateCreated\", \"2\": \"BFDOverLSPSessionStateUp\", \"3\": \"BFDOverLSPSessionStateDown\", \"4\": \"BFDOverLSPSessionStateAdminDown\", \"5\": \"BFDOverLSPSessionStateDeleted\"}, \"rsvp_ng_api_ctrl_ev_t_\": {\"0\": \"RSVP_NG_API_CTRL_PEER_ID\", \"1\": \"RSVP_NG_API_CTRL_RESTART_TIME\", \"2\": \"RSVP_NG_API_CTRL_IDT_DONE\", \"3\": \"RSVP_NG_API_CTRL_IDT_ACK\", \"4\": \"RSVP_NG_API_CTRL_SR_MSG\", \"5\": \"RSVP_NG_API_CTRL_SR_NACK\", \"6\": \"RSVP_NG_API_NUM_CTRL_EVENTS\", \"-1\": \"RSVP_NG_API_CTRL_INVALID\"}, \"mpls_te_metric_type\": {\"0\": \"MetricIGP\", \"1\": \"MetricTE\"}, \"mpls_te_bw_pool_type\": {\"0\": \"TEBandwidthPool0\", \"1\": \"TEBandwidthPool1\", \"2\": \"TEBandwidthAnyPool\"}, \"AutoBackupSRLGMode\": {\"0\": \"SRLGNotSet\", \"1\": \"SRLGStrict\", \"2\": \"SRLGPreferred\", \"3\": \"SRLGWeighted\"}, \"te_xro_attribute_type\": {\"0\": \"Interface\", \"1\": \"Node\", \"2\": \"SRLGs\"}, \"mpls_te_termination_type_t\": {\"0\": \"NONE\", \"1\": \"Ether\"}, \"rsvp_ng_api_ctx_hist_event_type_t_\": {\"0\": \"RSVP_NG_API_HIST_EV_STATS\"}, \"rsvp_ng_api_ctx_ev_t_\": {\"0\": \"RSVP_NG_API_SLAVE_SRID\", \"1\": \"RSVP_NG_API_SLAVE_DESTROYED\", \"2\": \"RSVP_NG_API_PATH\", \"3\": \"RSVP_NG_API_RESV\", \"4\": \"RSVP_NG_API_ASSIGN_BKUP\", \"5\": \"RSVP_NG_API_ASSIGN_BKUP_ERR\", \"6\": \"RSVP_NG_API_RESV_CONFIRM\", \"7\": \"RSVP_NG_API_RESV_ERR\", \"8\": \"RSVP_NG_API_PATH_ERR\", \"9\": \"RSVP_NG_API_PATH_FRR\", \"10\": \"RSVP_NG_API_PATH_DEL\", \"11\": \"RSVP_NG_API_RESV_DEL\", \"12\": \"RSVP_NG_API_LOCKOUT\", \"13\": \"RSVP_NG_API_DESTROYED\", \"14\": \"RSVP_NG_API_NUM_CTX_EVENTS\", \"-1\": \"RSVP_NG_API_INVALID\"}, \"mpls_te_tunnel_state\": {\"0\": \"StateDown\", \"1\": \"StateUp\", \"2\": \"StateDownPolicy\", \"3\": \"StateLockout\"}, \"te_sr_sid_type\": {\"0\": \"SRSIDNotSet\", \"1\": \"SRSIDNode\", \"2\": \"SRSIDAdj\", \"3\": \"SRSIDUnknown\"}, \"te_serv_type_t\": {\"0\": \"ServicesNone\", \"1\": \"P2MPEgressInfoVIF\", \"2\": \"P2MPServicesAutoTunnelVIF\", \"3\": \"P2PServicesAutoTunnelVIF\", \"4\": \"P2MPServicesEgressInfoS2L\", \"5\": \"ServicesCount\"}, \"mpls_mte_tunnel_fail_reason\": {\"0\": \"MTunnelFailReasonUnapplicable\", \"1\": \"MTunnelFailReasonShutdown\", \"2\": \"MTunnelFailReasonNoDestination\", \"3\": \"MTunnelFailReasonNoPathOption\", \"4\": \"MTunnelFailReasonNoSource\", \"5\": \"MTunnelFailReasonCollaboratorDisc\", \"6\": \"MTunnelFailReasonUnmatchedClassTypePriority\", \"7\": \"MTunnelFailReasonInvalidBidirCfg\", \"8\": \"MTunnelFailReasonPOSwitchover\", \"9\": \"MTunnelFailReasonNoTunnelID\", \"10\": \"MTunnelFailReasonNoLink\", \"11\": \"MTunnelFailReasonLinkShutdown\", \"12\": \"MTunnelFailReasonLinkLMPDown\", \"13\": \"MTunnelFailReasonSourceDestinationSame\", \"14\": \"MTunnelFailReasonOTNNoODULevel\", \"15\": \"MTunnelFailReasonBidirAssocIDMissing\", \"16\": \"MTunnelFailReasonBFDGALOnUnidirectional\", \"17\": \"MTunnelFailReasonNoStaticUni\"}, \"te_mgmt_generic_tspec_type\": {\"0\": \"TEGenericTSpecTypeG709OTN\"}, \"rsvp_mgmt_ero_subobj_type\": {\"1\": \"RSVP_MGMT_ERO_TYPE_IPv4\", \"4\": \"RSVP_MGMT_ERO_TYPE_UNNUM\"}, \"mpls_te_soft_preemption_resolution_\": {\"0\": \"SoftPreemptionResolutionNone\", \"1\": \"SoftPreemptionResolutionPending\", \"2\": \"SoftPreemptionResolutionReoptCompleted\", \"3\": \"SoftPreemptionResolutionTeardown\", \"4\": \"SoftPreemptionResolutionFRRTriggered\", \"5\": \"SoftPreemptionResolutionPathProtetionSwitchover\"}, \"te_xro_subobj_type\": {\"32\": \"AS\", \"1\": \"IPv4\", \"2\": \"IPv6\", \"36\": \"P2P_LSP\", \"6\": \"Unnumbered\", \"34\": \"SRLG\"}, \"te_vif_bfd_encap_mode_t\": {\"0\": \"IP\", \"1\": \"GAL\"}, \"mpls_te_lsp_mode_\": {\"0\": \"MPLS_TE_LSP_ModeNotSet\", \"1\": \"MPLS_TE_LSP_ModeCurrent\", \"2\": \"MPLS_TE_LSP_ModeReopt\", \"3\": \"MPLS_TE_LSP_ModeClean\", \"4\": \"MPLS_TE_LSP_ModeStandby\", \"5\": \"MPLS_TE_LSP_ModePPClean\", \"6\": \"MPLS_TE_LSP_ModeRestore\", \"7\": \"MPLS_TE_LSP_ModeReoptStandby\"}, \"rsvp_mgmt_rro_subobj_type\": {\"1\": \"IPv4RROType\", \"34\": \"SRLG_RROType\", \"3\": \"LabelRROType\", \"4\": \"UnnumberedRROType\"}, \"mpls_te_reopt_decision_reason_\": {\"0\": \"DecisionReasonNone\", \"1\": \"NotSuperset\", \"2\": \"Superset\", \"3\": \"LSP_FRRActive\", \"4\": \"BandwidthChange\", \"5\": \"MetricTypeChange\", \"6\": \"BetterPathOptionIndexes\", \"7\": \"InterAreaPreferredPathExists\", \"8\": \"InterAreaPreferredTreeExists\", \"9\": \"WorsePathOptionIndexes\", \"10\": \"BetterCumulativeMetric\", \"11\": \"WorseCumulativeMetric\", \"12\": \"Identical\", \"13\": \"NoS2Ls\", \"14\": \"NoCurrentLSP\", \"15\": \"UserPathOptionSwitchover\", \"16\": \"BetterHops\", \"17\": \"WorseHops\", \"18\": \"PCEForce\", \"19\": \"AffinityChanged\", \"20\": \"CostLimit\", \"21\": \"SigTimeout\", \"22\": \"NotSupersetInstTimerExpired\", \"23\": \"PathVerifictionFailed\", \"24\": \"SoftPreemptionRecovery\", \"25\": \"IepChanged\", \"26\": \"PoChanged\", \"27\": \"DestChanged\", \"28\": \"BetterIGPArea\", \"29\": \"WorseIGPArea\", \"30\": \"BetterBandwidthLoadBalancing\", \"31\": \"WorseBandwidthLoadBalancing\", \"32\": \"BFDSessionDown\", \"33\": \"AutoPCCReopt\", \"34\": \"SREgressPathChanged\", \"35\": \"OverloadBitSet\", \"36\": \"BetterDiversity\", \"37\": \"WorseDiversity\", \"38\": \"LSPDropMode\", \"39\": \"NotUsed\"}, \"mte_path_option_type\": {\"0\": \"None\", \"1\": \"Dynamic\", \"2\": \"Explicit\", \"3\": \"NoERO\", \"4\": \"SegmentRouting\", \"5\": \"POCount\"}, \"te_destination_state_t_\": {\"0\": \"DestinationDisabled\", \"1\": \"DestinationDown\", \"2\": \"DestinationUp\"}, \"mte_reopt_trigger_\": {\"0\": \"NoTrigger\", \"1\": \"TimerTrigger\", \"2\": \"BandwidthChangeTrigger\", \"3\": \"AutoBandwidthOverflowTrigger\", \"4\": \"AutoBandwidthUnderflowTrigger\", \"5\": \"AutoBandwidthAdjustmentTrigger\", \"6\": \"MetricTypeChangeTrigger\", \"7\": \"UserTrigger\", \"8\": \"FRRTrigger\", \"9\": \"RemergeErrorTrigger\", \"10\": \"PreferredPathTrigger\", \"11\": \"PreferredTreeTrigger\", \"12\": \"DueToMaximumMetric\", \"13\": \"PathOptionSwitchoverTrigger\", \"14\": \"PathProtectionSwitchoverTrigger\", \"15\": \"IEPEnableReoptimizationTrigger\", \"16\": \"AffinityPathVerificationFailTrigger\", \"17\": \"CostLimitPathVerificationFailTrigger\", \"18\": \"SoftPreemptionTrigger\", \"19\": \"IepChanged\", \"20\": \"PoChanged\", \"21\": \"DestChanged\", \"22\": \"ReoptTryToForceIt\", \"23\": \"TopologyChangeTrigger\", \"24\": \"ReoptLinkUpEvent\", \"25\": \"BFDSessionDownTrigger\", \"26\": \"ReverseAssocS2LReceivedTrigger\", \"27\": \"GMPLS_UNIMultilayerTrigger\", \"28\": \"GMPLS_UNIUserTrigger\", \"29\": \"PathSelectionTiebreakerChangeTrigger\", \"30\": \"SREgressPathChangeTrigger\", \"31\": \"OverloadBitTrigger\", \"32\": \"PCETrigger\", \"33\": \"LockoutMetricTrigger\", \"34\": \"HigherPriorityPOChangeTrigger\", \"35\": \"TriggerNotUsed\"}, \"te_p2mp_s2l_deletion_subcause_t\": {\"0\": \"NoSubcause\", \"1\": \"CleanupReq\", \"2\": \"InvalidData\", \"3\": \"FsmInvCtxt\", \"4\": \"FsmInvCtxtData\", \"5\": \"FsmInvRole\", \"6\": \"LLFailure\", \"7\": \"LLRelFail\", \"8\": \"LLMismatch\", \"9\": \"LLInvalid\", \"10\": \"LLSetFailure\", \"11\": \"BadOutLabel\", \"12\": \"SLErr\", \"13\": \"RLMismatch\", \"14\": \"SLAllocErr\", \"15\": \"UpstreamDownstreamLabelMismatch\", \"16\": \"UpstreamLabelFailure\", \"17\": \"UpstreamLabelRelFail\", \"18\": \"UpstreamLabelMismatch\", \"19\": \"UpstreamLabelInvalid\", \"20\": \"BadUpstreamLabel\", \"21\": \"ULSetFailure\", \"22\": \"GMPLSLabelAllocErr\", \"23\": \"GMPLSLabelCloneErr\", \"24\": \"RwErr\", \"25\": \"UpRwErr\", \"26\": \"PathAdmit\", \"27\": \"BW\", \"28\": \"AdmitResv\", \"29\": \"RRRMErr\", \"30\": \"CompRid\", \"31\": \"CompLclRid\", \"32\": \"CompUpRid\", \"33\": \"CompDownRid\", \"34\": \"RestIfHop\", \"35\": \"InvInIf\", \"36\": \"NhErr\", \"37\": \"InvInEro\", \"38\": \"OutEroFail\", \"39\": \"FrrBkAsssign\", \"40\": \"FrrBkRm\", \"41\": \"FrrBkSend\", \"42\": \"FrrNeedsDel\", \"43\": \"FrrReoptLsp\", \"44\": \"RsvpApiH\", \"45\": \"InsanePath\", \"46\": \"RemergeChkFail\", \"47\": \"RemergeDetected\", \"48\": \"XRO\", \"49\": \"ResvBwSet\", \"50\": \"ResvPrepFail\", \"51\": \"PathChProc\", \"52\": \"PathChFrr\", \"53\": \"PathChSessAttriFl\", \"54\": \"PathChBwCh\", \"55\": \"PathErrProc\", \"56\": \"PathErr\", \"57\": \"PathErrWPSR\", \"58\": \"PathDel\", \"59\": \"ResvChProc\", \"60\": \"ResvChRro\", \"61\": \"ResvDel\", \"62\": \"ResvErr\", \"63\": \"PerrSendFail\", \"64\": \"PerrProcFail\", \"65\": \"PerrRcv\", \"66\": \"ResvErrRcv\", \"67\": \"Flowspec\", \"68\": \"SetupConnApiFail\", \"69\": \"PathNotReplayed\", \"70\": \"ResvNotReplayed\", \"71\": \"RewriteNotReplayed\", \"72\": \"LabelNotReplayed\", \"73\": \"ConnectionNotReady\", \"74\": \"MasterDidNotReplay\", \"75\": \"HeadS2LHasNoVIF\", \"76\": \"FRRAssignedS2LHasNoBackup\", \"77\": \"FRRAssignedS2LHasDownBackup\", \"78\": \"OutLinkDownAndNoFRR\", \"79\": \"CollaboratorTimeoutRSVP\", \"80\": \"CollaboratorTimeoutLSD\", \"81\": \"CollaboratorTimeoutLMRIB\", \"82\": \"CollaboratorTimeoutIM\", \"83\": \"CollaboratorTimeoutError\", \"84\": \"TopoFlush\", \"85\": \"AreaShut\", \"86\": \"ActivePoDel\", \"87\": \"PathVerifyFailed\", \"88\": \"SrlgPathVerifyFailed\", \"89\": \"AffinityPathVerifyFailed\", \"90\": \"AffFailDelayedTearTimeoutFailed\", \"91\": \"CostLimitVerifyFailed\", \"92\": \"PathSetupTimeout\", \"93\": \"VifDestroyed\", \"94\": \"VifShut\", \"95\": \"LspShut\", \"96\": \"GMPLS_UNIHead\", \"97\": \"HeadResetup\", \"98\": \"NoneHeadResetup\", \"99\": \"DestDisabled\", \"100\": \"IepChActPo\", \"101\": \"IepChReopt\", \"102\": \"IepChStandby\", \"103\": \"DsteModeCh\", \"104\": \"ReoptDelFrrAct\", \"105\": \"NewReoptTearOld\", \"106\": \"ReoptFailedVerify\", \"107\": \"ReoptFailedInstall\", \"108\": \"ReoptFailedRW\", \"109\": \"ReoptFailedNotSuperset\", \"110\": \"DcleanAtInstallTime\", \"111\": \"DcleanAtCleanTimer\", \"112\": \"DcleanAtReoptActive\", \"113\": \"LclNotifHead\", \"114\": \"InIfFail\", \"115\": \"OutIfFail\", \"116\": \"IfFailLcOIR\", \"117\": \"TERidRm\", \"118\": \"TeRsvpOosBkup\", \"119\": \"InIfFailExpNullCfgCh\", \"120\": \"NewCurrLspSig\", \"121\": \"NewReoptLspSig\", \"122\": \"NewStdbyLspSig\", \"123\": \"NewRestoreLspSig\", \"124\": \"NewClPpLspSig\", \"125\": \"ChkptRecoveryFailed\", \"126\": \"StdbyCrFailed\", \"127\": \"ReoptLSPRej\", \"128\": \"ReoptPoSwFailed\", \"129\": \"FailedToFindPath\", \"130\": \"SigRcvFailPathCrCh\", \"131\": \"LspDbShut\", \"132\": \"ReoptHoldStart\", \"133\": \"VifLspidMismatch\", \"134\": \"S2LHasNoVIF\", \"135\": \"OverloadReoptTimeout\", \"136\": \"HopLimitExceeded\", \"137\": \"LingeringCurrentLsp\", \"138\": \"LingeringStandbyLsp\", \"139\": \"LingeringRestoreLsp\", \"140\": \"DoubleLockout\", \"141\": \"LockoutNoProtection\", \"142\": \"LockoutCleanup\", \"143\": \"TePpswLspMismatch\", \"144\": \"TeStdbyupNoCurrLSP\", \"145\": \"StdbyFailedRW\", \"146\": \"ReoptLspTearPPSW\", \"147\": \"DelayPPLspTearPPSW\", \"148\": \"StdbyFailedVerify\", \"149\": \"StdbyNotNeededDueToRestore\", \"150\": \"RestoreFailedVerify\", \"151\": \"RestoreFailedInstall\", \"152\": \"RestoreFailedRewrite\", \"153\": \"TePpswCfgRmvd\", \"154\": \"TePpswManualPPSW\", \"155\": \"TePpswBidirPChgPPSW\", \"156\": \"TePpswBidirLockoutPPSW\", \"157\": \"DcleanAtPPCleanTimer\", \"158\": \"ReoptStandbyFailed\", \"159\": \"StandbyReoptimized\", \"160\": \"StandbyReoptimizeAborted\", \"161\": \"TeReoptupNoCurrLSP\", \"162\": \"TeReoptCurrLSPDown\", \"163\": \"TeCleanedtCurrLSPDown\", \"164\": \"TeDelayLSPUp\", \"165\": \"NoRouteDueToAffinity\", \"166\": \"NoRibLkupBadEroGmpls\", \"167\": \"CleanupLingering\", \"168\": \"TE_S2L_DEL_SC_SOFT_PREEMPTION_TIMEOUT\", \"169\": \"TE_S2L_DEL_SC_SOFT_PREEMPTED_NON_CURRENT\", \"170\": \"TE_S2L_DEL_SC_VIF_SYNC_LSP_DEL\", \"171\": \"RsvpApiCleanupReq\", \"172\": \"TE_S2L_DEL_SC_FRR_WRONG_BACKUP\", \"173\": \"TE_S2L_DEL_SC_BFD_SESSION_CREATE_FAILED\", \"174\": \"TE_S2L_DEL_SC_BFD_SESSION_BRINGUP_TIMEOUT\", \"175\": \"TE_S2L_DEL_SC_BFD_SESSION_DOWN\", \"176\": \"TE_S2L_DEL_SC_BFD_SESSION_NOT_REPLAYED\", \"177\": \"TE_S2L_DEL_SC_REOPT_P2MP_EGRESS_INFO_FAIL\", \"178\": \"NonCurrFRRLclNotifEvent\", \"179\": \"UnsupportedEncoding\", \"180\": \"UnsupportedGPID\", \"181\": \"UnsupportedSwitchingType\", \"182\": \"UpstreamLabelChangeNotPermitted\", \"183\": \"EncodingTypeChangeNotPermitted\", \"184\": \"ApsProtectInfoChangeFailed\", \"185\": \"IncorrectLSPType\", \"186\": \"LocalHopError\", \"187\": \"UnsupportedGMPLSAttributes\", \"188\": \"GMPLS_UNIReoptTriggered\", \"189\": \"GMPLS_UNIActivePathChangeTriggeredReopt\", \"190\": \"MaximumAcceptableLabelRetries\", \"191\": \"InvalidDirection\", \"192\": \"InvalidRewriteContext\", \"193\": \"InvalidLabelContext\", \"194\": \"DWDMCapabilityChanged\", \"195\": \"DWDMCapabilityRemoved\", \"196\": \"DWDMWavelengthRemoved\", \"197\": \"GMPLS_UNIMultilayerRestoration\", \"198\": \"GMPLS_UNIUserTriggeredReoptimization\", \"199\": \"PassiveMatchErr\", \"200\": \"EgressControlErr\", \"201\": \"EgressControlMapErr\", \"202\": \"RestoreNotNeededForCurrent\", \"203\": \"RestoreNotNeededForStandby\", \"204\": \"RestoreDpDown\", \"205\": \"BadProtctObj\", \"206\": \"OpticalLinkDown\", \"207\": \"OpticalLinkLSPOutOfSync\", \"208\": \"OpticalLinkOwnerOutOfSync\", \"209\": \"OpticalLinkInterfaceHandleOutOfSync\", \"210\": \"OpticalLinkHopOutOfSync\", \"211\": \"OpticalLinkRoleOutOfSync\", \"212\": \"OpticalLinkDownstreamRouterIDOutOfSync\", \"213\": \"OpticalLinkUpstreamRouterIDOutOfSync\", \"214\": \"OpticalLinkEncodingTypeOutOfSync\", \"215\": \"OpticalLinkSwitchingTypeOutOfSync\", \"216\": \"OpticalLinkGPIDOutOfSync\", \"217\": \"EgressOpticalLinkNotFound\", \"218\": \"IngressOpticalLinkNotFound\", \"219\": \"SyncDestState\", \"220\": \"ProtObjectErr\", \"221\": \"ReverseS2LDeleted\", \"222\": \"CancelInprogressBySlave\", \"223\": \"InvalidReverseERO\", \"224\": \"ReverseLSPNotFound\", \"225\": \"ReverseLSPNotPresent\", \"226\": \"AssociatedVIFDown\", \"227\": \"VIFSyncProcessing\", \"228\": \"IncomingInterfaceLockout\", \"229\": \"SREgressPathChanged\", \"230\": \"InIfFailImpNullCfgCh\", \"231\": \"ReverseLSPFailure\", \"232\": \"FsmScMustBeLast\"}, \"te_s2l_fsm_state_e\": {\"0\": \"TE_S2L_FSM_ST_NONE\", \"1\": \"TE_S2L_FSM_ST_INIT\", \"2\": \"TE_S2L_FSM_ST_WAIT_RESV\", \"3\": \"TE_S2L_FSM_ST_WAIT_LABEL\", \"4\": \"TE_S2L_FSM_ST_WAIT_RW\", \"5\": \"TE_S2L_FSM_ST_WAIT_BFD_SESSION_UP\", \"6\": \"TE_S2L_FSM_ST_UP\", \"7\": \"TE_S2L_FSM_ST_UP_FRR_ACTIVE\", \"8\": \"TE_S2L_FSM_ST_HA_RECOVERY\", \"9\": \"TE_S2L_FSM_ST_LINGERING\", \"10\": \"TE_S2L_FSM_ST_SOFT_PREEMPTED\", \"11\": \"TE_S2L_FSM_ST_SYNC_UP\", \"12\": \"TE_S2L_FSM_ST_SYNC_DOWN\", \"13\": \"TE_S2L_FSM_ST_SYNCING\", \"14\": \"TE_S2L_FSM_ST_SYNC_DELETE\", \"15\": \"TE_S2L_FSM_ST_WAIT_UPSTREAM_LABEL\", \"16\": \"TE_S2L_FSM_ST_WAIT_UPSTREAM_RW\", \"17\": \"TE_S2L_FSM_ST_LOCKOUT\", \"18\": \"TE_S2L_FSM_ST_LAST\"}, \"te_controller_state_e\": {\"0\": \"Notready\", \"1\": \"AdminDown\", \"2\": \"Down\", \"3\": \"Shutdown\", \"4\": \"ErrorDisabled\", \"5\": \"Up\", \"6\": \"Unknown\"}, \"tunnel_attribute_set_type_e_\": {\"0\": \"TunnelAttributeSetNone\", \"1\": \"TunnelAttributeSetStatic\", \"2\": \"TunnelAttributeSetPathOption\", \"3\": \"TunnelAttributeSetNotUsed\", \"4\": \"TunnelAttributeSetAutoBackup\", \"5\": \"TunnelAttributeSetAutoMesh\", \"6\": \"TunnelAttributeSetXRO\", \"7\": \"TunnelAttributeSetP2MPTE\", \"8\": \"TunnelAttributeAPS_PP\", \"9\": \"TunnelAttributeSetP2P_TE\"}, \"gmpls_uni_mgmt_wdm_grid\": {\"0\": \"NotSet\", \"1\": \"DWDM\", \"2\": \"CWDM\"}, \"mpls_te_frr_state\": {\"0\": \"FRRInactive\", \"1\": \"FRRActive\", \"2\": \"FRRReady\"}, \"mpls_te_mgmt_gmpls_label_origin_type\": {\"0\": \"NotSet\", \"1\": \"UNI_C\", \"2\": \"UNI_N\"}, \"te_serv_tun_client_\": {\"0\": \"TE_SERV_AUTO_TUN_CLIENT_INVALID\", \"1\": \"TE_SERV_P2MP_TUN_CLIENT_MVPN\", \"2\": \"TE_SERV_P2MP_TUN_CLIENT_VPLS\", \"3\": \"TE_SERV_P2MP_TUN_CLIENT_MVPN6\", \"4\": \"TE_SERV_P2P_TUN_CLIENT_BGP\", \"5\": \"TE_SERV_P2P_TUN_CLIENT_STATICv4\", \"6\": \"TE_SERV_P2P_TUN_CLIENT_STATICv6\", \"7\": \"TE_SERV_AUTO_TUN_CLIENT_COUNT\"}, \"mpls_te_loadshare_type\": {\"0\": \"LoadshareEqual\", \"1\": \"LoadshareBandwidthBased\", \"2\": \"LoadshareConfigured\"}, \"te_attribute_set_sr_prepend_type\": {\"0\": \"TEAttributeSetSRPrependNotSet\", \"1\": \"TEAttributeSetSRPrependNextLabel\", \"2\": \"TEAttributeSetSRPrependBGPNhop\"}, \"te_path_inval_action_type\": {\"0\": \"None\", \"1\": \"Tear\", \"2\": \"Drop\"}, \"mpls_te_pce_fail_reasons\": {\"0\": \"TE_PCEFailNoReason\", \"1\": \"TE_PCEFailNoPCE\", \"2\": \"TE_PCEFailSubPool\", \"3\": \"TE_PCEFailIntraArea\", \"4\": \"TE_PCEFailGMPLS\", \"5\": \"TE_PCEFailPending\", \"6\": \"TE_PCEFailOOR\", \"7\": \"TE_PCEFailBidirectional\", \"8\": \"TE_PCEFailNoPath\", \"9\": \"TE_PCEFailRequestTimeout\"}, \"te_protect_type_e\": {\"8\": \"ProtectType1Plus1UnidirAps\", \"16\": \"ProtectType1Plus1BidirAps\", \"4\": \"ProtectType1Plus1UnidirNoAps\", \"255\": \"ProtectTypeNotSet\"}, \"AutoBackupProtectionType\": {\"0\": \"ProtectionNone\", \"1\": \"ProtectionNextHop\", \"2\": \"ProtectionNextNextHop\"}, \"mpls_te_uni_type_t\": {\"0\": \"NONE\", \"1\": \"XC\", \"2\": \"TERM\"}, \"te_aps_snc_mode_e\": {\"0\": \"SncModeNotSet\", \"1\": \"SncModeN\", \"2\": \"SncModeI\", \"3\": \"SncModeS\"}, \"flex_lsp_lockout_origination_t\": {\"0\": \"LockoutOriginationNone\", \"1\": \"LockoutOriginationLocal\", \"2\": \"LockoutOriginationRemote\"}, \"mpls_te_pathoption_type_\": {\"0\": \"PathOptionUnknown\", \"1\": \"PathOptionDynamic\", \"2\": \"PathOptionExplicitName\", \"3\": \"PathOptionExplicitID\", \"4\": \"PathOptionPCE\", \"5\": \"PathOptionNoERO\", \"6\": \"PathOptionSegmentRouting\"}, \"te_hop_limit_ignore_t\": {\"0\": \"IgnoreUnknown\", \"1\": \"IgnoreExplicit\", \"2\": \"IgnorePCE\"}, \"te_association_tie_role_\": {\"0\": \"None\", \"1\": \"Master\", \"2\": \"Slave\"}, \"te_s2l_fsm_ev_e_\": {\"0\": \"TE_S2L_FSM_EV_NONE\", \"1\": \"TE_S2L_FSM_EV_DESTROY\", \"2\": \"TE_S2L_FSM_EV_PREEMPTION\", \"3\": \"TE_S2L_FSM_EV_SOFT_PREEMPTION\", \"4\": \"TE_S2L_FSM_EV_SOFT_PREEMPTION_TIMEOUT\", \"5\": \"TE_S2L_FSM_EV_PREEMPTION_GRACEFUL\", \"6\": \"TE_S2L_FSM_EV_RSVP_PATH_CREATE\", \"7\": \"TE_S2L_FSM_EV_RSVP_PATH_CHANGE\", \"8\": \"TE_S2L_FSM_EV_RSVP_PATH_ERR\", \"9\": \"TE_S2L_FSM_EV_RSVP_PATH_DEL\", \"10\": \"TE_S2L_FSM_EV_RSVP_RESV_CREATE\", \"11\": \"TE_S2L_FSM_EV_RSVP_RESV_CHANGE\", \"12\": \"TE_S2L_FSM_EV_RSVP_RESV_ERR\", \"13\": \"TE_S2L_FSM_EV_RSVP_RESV_DEL\", \"14\": \"TE_S2L_FSM_EV_RSVP_RESV_CONFIRM\", \"15\": \"TE_S2L_FSM_EV_TE_BACKUP_CHANGE\", \"16\": \"TE_S2L_FSM_EV_RSVP_BACKUP_FAILED\", \"17\": \"TE_S2L_FSM_EV_FRR_ACTIVATE_FRR\", \"18\": \"TE_S2L_FSM_EV_LOCAL_LABEL_AVAIL\", \"19\": \"TE_S2L_FSM_EV_LOCAL_LABEL_FAIL\", \"20\": \"TE_S2L_FSM_EV_RW_DONE\", \"21\": \"TE_S2L_FSM_EV_RW_FAILED\", \"22\": \"TE_S2L_FSM_EV_UPSTREAM_LABEL_AVAIL\", \"23\": \"TE_S2L_FSM_EV_UPSTREAM_LABEL_FAIL\", \"24\": \"TE_S2L_FSM_EV_UPSTREAM_RW_DONE\", \"25\": \"TE_S2L_FSM_EV_UPSTREAM_RW_FAILED\", \"26\": \"TE_S2L_FSM_EV_HA_COLLABORATOR_DOWN\", \"27\": \"TE_S2L_FSM_EV_HA_COLLABORATOR_BFD_DOWN\", \"28\": \"TE_S2L_FSM_EV_HA_RECOVERED_FROM_CHKPT\", \"29\": \"TE_S2L_FSM_EV_HA_COLLAB_RECOVERY_DONE\", \"30\": \"TE_S2L_FSM_EV_HA_COLLAB_RESTART_TIMEOUT\", \"31\": \"TE_S2L_FSM_EV_HEAD_PATH_CREATE\", \"32\": \"TE_S2L_FSM_EV_HEAD_PATH_MODIFY\", \"33\": \"TE_S2L_FSM_EV_RSVP_SR_NOTIF\", \"34\": \"TE_S2L_FSM_EV_SYNC_UPDATE\", \"35\": \"TE_S2L_FSM_EV_SYNC_DELETE\", \"36\": \"TE_S2L_FSM_EV_SYNCED_MASTER\", \"37\": \"TE_S2L_FSM_EV_SWITCHOVER\", \"38\": \"TE_S2L_FSM_EV_FRR_PENDING\", \"39\": \"TE_S2L_FSM_EV_CONFIG_CHANGE\", \"40\": \"TE_S2L_FSM_EV_TE_EXIT\", \"41\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_CFG_CREATE\", \"42\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_CFG_DELETE\", \"43\": \"TE_S2L_FSM_EV_HEAD_BFD_SESSION_BRINGUP_TIMEOUT\", \"44\": \"TE_S2L_FSM_EV_TAIL_BFD_RMT_DISCR_CHANGED\", \"45\": \"TE_S2L_FSM_EV_BFD_SESSION_UP\", \"46\": \"TE_S2L_FSM_EV_BFD_SESSION_DOWN\", \"47\": \"TE_S2L_FSM_EV_BFD_NBR_SESSION_DOWN\", \"48\": \"TE_S2L_FSM_EV_LOCKOUT_ON\", \"49\": \"TE_S2L_FSM_EV_LOCKOUT_OFF\", \"50\": \"TE_S2L_FSM_EV_SR_IGP_PATH_AVAIL\", \"51\": \"TE_S2L_FSM_EV_LAST\"}, \"rsvp_ng_api_ev_filter_reason_t_\": {\"0\": \"RSVP_NG_API_EV_FILTER_NONE\", \"1\": \"RSVP_NG_API_EV_FILTER_EXPIRED\", \"2\": \"RSVP_NG_API_EV_FILTER_POSTPONE\", \"3\": \"RSVP_NG_API_EV_FILTER_PEER_DESTROYED\", \"4\": \"RSVP_NG_API_EV_FILTER_NO_SRIDS\", \"5\": \"RSVP_NG_API_EV_FILTER_INTERNAL_ERR\", \"6\": \"RSVP_NG_API_EV_FILTER_DESTROY_LOCAL\", \"7\": \"RSVP_NG_API_EV_FILTER_ROLE\"}, \"te_srlg_collect_request_t\": {\"0\": \"None\", \"1\": \"Mandatory\", \"2\": \"Optional\"}, \"mpls_te_metric_qualifier\": {\"0\": \"MetricDefault\", \"1\": \"MetricGlobal\", \"2\": \"MetricInterface\"}, \"te_pnr_revert_options_e\": {\"0\": \"PnrOptionnotSet\", \"1\": \"PnrOptionRevertive\", \"2\": \"PnrOptionNonRevertive\"}, \"mpls_te_bfd_session_down_action\": {\"0\": \"Reopt\", \"1\": \"ReSetup\"}, \"te_xro_exclusion_type\": {\"0\": \"Mandatory\", \"1\": \"BestEffort\"}, \"te_odu_level_e\": {\"0\": \"TE_ODULevelNotSet\", \"1\": \"TE_ODULevelOne\", \"2\": \"TE_ODULevelTwo\", \"3\": \"TE_ODULevelThree\", \"4\": \"TE_ODULevelFour\", \"10\": \"TE_ODUZero\", \"11\": \"TE_ODULevelTwoE\", \"20\": \"TE_ODULevelFlexCBR\", \"21\": \"TE_ODULevelFlexGFPFResizeable\", \"22\": \"TE_ODULevelFlexGFPFNonResizable\", \"23\": \"TE_ODULevelOneE\", \"24\": \"TE_ODULevelOneF\", \"25\": \"TE_ODULevelTwoF\", \"26\": \"TE_ODULevelThreeEOne\", \"27\": \"TE_ODULevelThreeETwo\"}, \"mpls_te_soft_preemption_state_\": {\"0\": \"SoftPreemptionNotPending\", \"1\": \"SoftPreemptionPending\"}, \"mpls_te_iep_hop_type_\": {\"0\": \"IEPHopTypeUnknown\", \"1\": \"IEPHopTypeStrictNext\", \"2\": \"IEPHopTypeExclude\", \"3\": \"IEPHopTypeExcludeNode\", \"4\": \"IEPHopTypeExcludeSRLG\", \"5\": \"IEPHopTypeLooseNext\", \"6\": \"IEPHopTypeNext\", \"7\": \"IEPHopTypeShareSRLG\"}, \"te_sig_name_append_\": {\"0\": \"None\", \"1\": \"Address\", \"2\": \"Name\"}, \"rsvp_ng_api_ctx_origin_t_\": {\"0\": \"RSVP_NG_API_ORIGIN_UNKNOWN\", \"1\": \"RSVP_NG_API_ORIGIN_LOCAL\", \"2\": \"RSVP_NG_API_ORIGIN_PEER\"}, \"mpls_te_mgmt_gmpls_label_type\": {\"0\": \"NotSet\", \"1\": \"FixedWDM\", \"2\": \"FixedG709OTN\"}, \"mpls_te_tunnels_signaling_status\": {\"0\": \"Down\", \"1\": \"Recovering\", \"2\": \"Recovered\", \"3\": \"Connected\", \"4\": \"Disabled\", \"5\": \"Proceeding\", \"6\": \"WaitBFDSessionUp\", \"7\": \"WaitSRSegmentPathUp\", \"8\": \"WaitLocalLabel\", \"9\": \"WaitLocalLabelRewrite\"}, \"te_p2mp_s2l_deletion_cause_t\": {\"0\": \"NoCause\", \"1\": \"HPathCrErr\", \"2\": \"HPathChgSetup\", \"3\": \"HPathChgUpErr\", \"4\": \"HResvCrErr\", \"5\": \"HResvChgErr\", \"6\": \"HResvChgErrUp\", \"7\": \"HLblAvailErr\", \"8\": \"HUpLblAvailErr\", \"9\": \"HFrrActErr\", \"10\": \"HBkupChErr\", \"11\": \"HPathChFrrErr\", \"12\": \"HCleanup\", \"13\": \"HLingeringCleanup\", \"14\": \"HPatErr\", \"15\": \"HResvErr\", \"16\": \"HResvDel\", \"17\": \"HRwFail\", \"18\": \"HUpRwFail\", \"19\": \"HaFailure\", \"20\": \"RwDel\", \"21\": \"UpRwDel\", \"22\": \"MPathCr\", \"23\": \"MPathChgSetupErr\", \"24\": \"MPathChgUpErr\", \"25\": \"MResvCrErr\", \"26\": \"MResvChgErr\", \"27\": \"MResvChgErrUp\", \"28\": \"MLblAvailErr\", \"29\": \"MLblRelErr\", \"30\": \"MUpLblAvailErr\", \"31\": \"MUpLblRelErr\", \"32\": \"MFrrActErr\", \"33\": \"MBkupChErr\", \"34\": \"MPathChFrrErr\", \"35\": \"MResvDel\", \"36\": \"MResvErr\", \"37\": \"MPreempt\", \"38\": \"MCleanup\", \"39\": \"MLingeringCleanup\", \"40\": \"MRwFail\", \"41\": \"MUpRwFail\", \"42\": \"TPathCrErr\", \"43\": \"TPathChgErr\", \"44\": \"TResvCrErr\", \"45\": \"TLblAvailErr\", \"46\": \"TCleanup\", \"47\": \"TLingeringCleanup\", \"48\": \"LblErr\", \"49\": \"QFailure\", \"50\": \"RSVP_Recovery\", \"51\": \"LSD_Recovery\", \"52\": \"LMRIB_Recovery\", \"53\": \"TE_Restart\", \"54\": \"Switchover\", \"55\": \"MasterTERecovery\", \"56\": \"Optical_R_Mgr_Recovery\", \"57\": \"TE_Exit\", \"58\": \"Bkup_Assign_Fail\", \"59\": \"BFD_Fail\", \"60\": \"BFD_Recovery\", \"61\": \"FsmCauseMustBeLast\"}, \"te_autobw_app_rej_t\": {\"0\": \"ApplicationAllowed\", \"1\": \"AutoBWDisabled\", \"2\": \"TunnelIsDown\", \"3\": \"TunnelIsFRR\", \"4\": \"TunnelIsBackup\", \"5\": \"TunnelIsLockDown\"}, \"mpls_lib_ctype_t\": {\"0\": \"MPLS_LIB_CTYPE_NULL\", \"1\": \"MPLS_LIB_CTYPE_IPV4\", \"17\": \"MPLS_LIB_CTYPE_P2P_BINDING_LABEL\", \"16\": \"MPLS_LIB_CTYPE_IPV6_TP_TUNNEL\", \"7\": \"MPLS_LIB_CTYPE_IPV4_P2P_TUNNEL\", \"8\": \"MPLS_LIB_CTYPE_IPV6_P2P_TUNNEL\", \"9\": \"MPLS_LIB_CTYPE_IPV4_UNI\", \"13\": \"MPLS_LIB_CTYPE_IPV4_P2MP_TUNNEL\", \"14\": \"MPLS_LIB_CTYPE_IPV6_P2MP_TUNNEL\", \"15\": \"MPLS_LIB_CTYPE_IPV4_TP_TUNNEL\"}, \"gmpls_uni_mgmt_dwdm_cs\": {\"0\": \"NotSet\", \"1\": \"DWDM100GHz\", \"2\": \"DWDM50GHz\", \"3\": \"DWDM25GHz\", \"4\": \"DWDM12GHz\"}, \"te_path_prot_profile_type_e\": {\"0\": \"PathProtProfileType1Plus0\", \"1\": \"PathProtProfileType1PlusR\", \"32\": \"PathProtProfileType1Plus1PlusR\", \"16\": \"PathProtProfileType1Plus1\", \"255\": \"PathProtProfileTypeInvalid\"}, \"te_pp_diversity_t\": {\"0\": \"DiversityNone\", \"1\": \"Link\", \"2\": \"NodeLink\", \"3\": \"Srlg\", \"4\": \"DiversityUser\", \"5\": \"DiversityReverseERO\", \"6\": \"Node\"}, \"te_addr_type_e\": {\"0\": \"NotSet\", \"1\": \"IPv4\", \"2\": \"IPv4Unnumbered\"}, \"mpls_te_tunnel_role\": {\"0\": \"TunnelUnknown\", \"1\": \"TunnelHead\", \"2\": \"TunnelMid\", \"3\": \"TunnelTail\"}}, \"schema_path\": \"RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead\", \"v_min\": 8}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_input_statistics.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_input_statistics.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_input_statistics.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_input_statistics.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,200 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message policy_stats {
-    option (cisco_msg).schema_path = "RootOper.QOS.Interface.Input.Statistics";
-
-    optional string interface_name = 1 [(cisco_field).path_element="RootOper.QOS.Interface(InterfaceName)"];
-    optional string policy_name = 50 [(cisco_field).name="PolicyName"];
-    optional string state = 51 [(cisco_field).name="State"];
-    optional string state_description = 52 [(cisco_field).name="StateDescription"];
-    repeated class_stats class_stats = 53 [(cisco_field).name="class_stats"];
-    optional uint32 satid = 54 [(cisco_field).name="Satid"];
-}
-
-message policy_param_uint32_st_ {
-    optional uint32 value = 1 [(cisco_field).name="value"];
-    optional string unit = 2 [(cisco_field).name="unit"];
-}
-
-message gen_stats_st {
-    optional uint64 transmit_packets = 1 [(cisco_field).name="TransmitPackets"];
-    optional uint64 transmit_bytes = 2 [(cisco_field).name="TransmitBytes"];
-    optional uint64 total_drop_packets = 3 [(cisco_field).name="TotalDropPackets"];
-    optional uint64 total_drop_bytes = 4 [(cisco_field).name="TotalDropBytes"];
-    optional uint32 total_drop_rate = 5 [(cisco_field).name="TotalDropRate"];
-    optional uint32 match_data_rate = 6 [(cisco_field).name="MatchDataRate"];
-    optional uint32 total_transmit_rate = 7 [(cisco_field).name="TotalTransmitRate"];
-    optional uint64 pre_policy_matched_packets = 8 [(cisco_field).name="PrePolicyMatchedPackets"];
-    optional uint64 pre_policy_matched_bytes = 9 [(cisco_field).name="PrePolicyMatchedBytes"];
-}
-
-message plc_color_class_stats_st {
-    optional uint64 conform_class_conform_packets = 1 [(cisco_field).name="ConformClassConformPackets"];
-    optional uint64 conform_class_conform_bytes = 2 [(cisco_field).name="ConformClassConformBytes"];
-    optional uint32 conform_class_conform_rate = 3 [(cisco_field).name="ConformClassConformRate"];
-    optional uint64 conform_class_exceed_packets = 4 [(cisco_field).name="ConformClassExceedPackets"];
-    optional uint64 conform_class_exceed_bytes = 5 [(cisco_field).name="ConformClassExceedBytes"];
-    optional uint32 conform_class_exceed_rate = 6 [(cisco_field).name="ConformClassExceedRate"];
-    optional uint64 conform_class_violate_packets = 7 [(cisco_field).name="ConformClassViolatePackets"];
-    optional uint64 conform_class_violate_bytes = 8 [(cisco_field).name="ConformClassViolateBytes"];
-    optional uint32 conform_class_violate_rate = 9 [(cisco_field).name="ConformClassViolateRate"];
-    optional uint64 exceed_class_exceed_packets = 10 [(cisco_field).name="ExceedClassExceedPackets"];
-    optional uint64 exceed_class_exceed_bytes = 11 [(cisco_field).name="ExceedClassExceedBytes"];
-    optional uint32 exceed_class_exceed_rate = 12 [(cisco_field).name="ExceedClassExceedRate"];
-    optional uint64 exceed_class_violate_packets = 13 [(cisco_field).name="ExceedClassViolatePackets"];
-    optional uint64 exceed_class_violate_bytes = 14 [(cisco_field).name="ExceedClassViolateBytes"];
-    optional uint32 exceed_class_violate_rate = 15 [(cisco_field).name="ExceedClassViolateRate"];
-    optional uint64 violate_class_violate_packets = 16 [(cisco_field).name="ViolateClassViolatePackets"];
-    optional uint64 violate_class_violate_bytes = 17 [(cisco_field).name="ViolateClassViolateBytes"];
-    optional uint32 violate_class_violate_rate = 18 [(cisco_field).name="ViolateClassViolateRate"];
-}
-
-message plc_stats_st {
-    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
-    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
-    optional uint64 conform_packets = 3 [(cisco_field).name="ConformPackets"];
-    optional uint64 conform_bytes = 4 [(cisco_field).name="ConformBytes"];
-    optional uint64 exceed_packets = 5 [(cisco_field).name="ExceedPackets"];
-    optional uint64 exceed_bytes = 6 [(cisco_field).name="ExceedBytes"];
-    optional uint64 violate_packets = 7 [(cisco_field).name="ViolatePackets"];
-    optional uint64 violate_bytes = 8 [(cisco_field).name="ViolateBytes"];
-    optional uint64 parent_drop_packets = 9 [(cisco_field).name="ParentDropPackets"];
-    optional uint64 parent_drop_bytes = 10 [(cisco_field).name="ParentDropBytes"];
-    optional uint32 conform_rate = 11 [(cisco_field).name="ConformRate"];
-    optional uint32 exceed_rate = 12 [(cisco_field).name="ExceedRate"];
-    optional uint32 violate_rate = 13 [(cisco_field).name="ViolateRate"];
-    optional plc_color_class_stats_st color_class_stats = 14 [(cisco_field).name="ColorClassStats"];
-}
-
-message cac_stats_st {
-    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
-    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
-    optional uint32 drop_rates = 3 [(cisco_field).name="DropRates"];
-    optional uint64 admitpackets = 4 [(cisco_field).name="Admitpackets"];
-    optional uint64 admit_bytes = 5 [(cisco_field).name="AdmitBytes"];
-    optional uint32 admit_rates = 6 [(cisco_field).name="AdmitRates"];
-}
-
-message iphc_stats_st {
-    optional uint64 non_tcp_total_out_packets = 1 [(cisco_field).name="NonTCP_TotalOutPackets"];
-    optional uint64 non_tcp_total_out_bytes = 2 [(cisco_field).name="NonTCP_TotalOutBytes"];
-    optional uint64 non_tcp_bytes_saved = 3 [(cisco_field).name="NonTCP_BytesSaved"];
-    optional uint64 non_tcp_compressed_packets_out = 4 [(cisco_field).name="NonTcp_CompressedPacketsOut"];
-    optional uint32 non_tcp_bytes_sent_rate = 5 [(cisco_field).name="NonTCP_BytesSentRate"];
-    optional uint64 non_tcp_full_header_packets_out = 6 [(cisco_field).name="NonTCP_FullHeaderPacketsOut"];
-    optional uint64 tcp_total_out_packets = 7 [(cisco_field).name="TCP_TotalOutPackets"];
-    optional uint64 tcp_total_out_bytes = 8 [(cisco_field).name="TCP_TotalOutBytes"];
-    optional uint64 tcp_bytes_saved = 9 [(cisco_field).name="TCP_BytesSaved"];
-    optional uint64 tcp_compressed_packets_out = 10 [(cisco_field).name="TCP_CompressedPacketsOut"];
-    optional uint32 tcp_bytes_sent_rate = 11 [(cisco_field).name="TCP_BytesSentRate"];
-    optional uint64 tcp_full_header_packets_out = 12 [(cisco_field).name="TCP_FullHeaderPacketsOut"];
-}
-
-message q_stats_st {
-    optional uint32 queue_id = 1 [(cisco_field).name="QueueID"];
-    optional uint64 tail_drop_packets = 2 [(cisco_field).name="TailDropPackets"];
-    optional uint64 tail_drop_bytes = 3 [(cisco_field).name="TailDropBytes"];
-    optional uint64 atm_clp0_drop_packets = 4 [(cisco_field).name="ATM_CLP0DropPackets"];
-    optional uint64 atm_clp0_drop_bytes = 5 [(cisco_field).name="ATM_CLP0DropBytes"];
-    optional uint64 atm_clp1_drop_packets = 6 [(cisco_field).name="ATM_CLP1DropPackets"];
-    optional uint64 atm_clp1_drop_bytes = 7 [(cisco_field).name="ATM_CLP1DropBytes"];
-    repeated policy_param_uint32_st_ queue_instance_length = 8 [(cisco_field).name="QueueInstanceLength"];
-    repeated policy_param_uint32_st_ queue_average_length = 9 [(cisco_field).name="QueueAverageLength"];
-    repeated policy_param_uint32_st_ queue_max_length = 10 [(cisco_field).name="QueueMaxLength"];
-    optional uint32 queue_drop_threshold = 11 [(cisco_field).name="QueueDropThreshold"];
-    optional bool forced_wred_stats_display = 12 [(cisco_field).name="ForcedWREDStatsDisplay"];
-    optional uint64 random_drop_packets = 13 [(cisco_field).name="RandomDropPackets"];
-    optional uint64 random_drop_bytes = 14 [(cisco_field).name="RandomDropBytes"];
-    optional uint64 max_threshold_packets = 15 [(cisco_field).name="MaxThresholdPackets"];
-    optional uint64 max_threshold_bytes = 16 [(cisco_field).name="MaxThresholdBytes"];
-    optional uint64 conform_packets = 17 [(cisco_field).name="ConformPackets"];
-    optional uint64 conform_bytes = 18 [(cisco_field).name="ConformBytes"];
-    optional uint64 exceed_packets = 19 [(cisco_field).name="ExceedPackets"];
-    optional uint64 exceed_bytes = 20 [(cisco_field).name="ExceedBytes"];
-    optional uint32 conform_rate = 21 [(cisco_field).name="ConformRate"];
-    optional uint32 exceed_rate = 22 [(cisco_field).name="ExceedRate"];
-}
-
-message wred_type_value {
-    optional string wred_type = 1 [(cisco_field).name="WREDType"];
-    optional uint32 value = 2 [(cisco_field).name="value"];
-}
-
-message red_profile_stats {
-    optional string profile_title = 1 [(cisco_field).name="ProfileTitle"];
-    repeated wred_type_value red_label = 2 [(cisco_field).name="REDLabel"];
-    optional uint64 red_transmit_packets = 3 [(cisco_field).name="REDTransmitPackets"];
-    optional uint64 red_transmit_bytes = 4 [(cisco_field).name="REDTransmitBytes"];
-    optional uint64 random_drop_packets = 5 [(cisco_field).name="RandomDropPackets"];
-    optional uint64 random_drop_bytes = 6 [(cisco_field).name="RandomDropBytes"];
-    optional uint64 max_threshold_packets = 7 [(cisco_field).name="MaxThresholdPackets"];
-    optional uint64 max_threshold_bytes = 8 [(cisco_field).name="MaxThresholdBytes"];
-    optional uint64 red_ecn_marked_packets = 9 [(cisco_field).name="RED_ECNMarkedPackets"];
-    optional uint64 red_ecn_marked_bytes = 10 [(cisco_field).name="RED_ECNMarkedBytes"];
-}
-
-message class_stats {
-    optional uint64 counter_validity_bitmask = 1 [(cisco_field).name="CounterValidityBitmask"];
-    optional string class_name = 2 [(cisco_field).name="ClassName"];
-    optional uint32 shared_queue_id = 3 [(cisco_field).name="SharedQueueID"];
-    optional string queue_descr = 4 [(cisco_field).name="QueueDescr"];
-    optional string cac_state = 5 [(cisco_field).name="CACState"];
-    optional gen_stats_st general_stats = 6 [(cisco_field).name="GeneralStats"];
-    repeated q_stats_st queue_stats_array = 7 [(cisco_field).name="QueueStatsArray"];
-    repeated plc_stats_st police_stats_array = 8 [(cisco_field).name="PoliceStatsArray"];
-    repeated red_profile_stats wred_stats_array = 9 [(cisco_field).name="WREDStatsArray"];
-    optional iphc_stats_st iphc_stats = 10 [(cisco_field).name="IphcStats"];
-    optional policy_stats child_policy = 11 [(cisco_field).name="ChildPolicy"];
-    optional cac_stats_st cac_stats = 12 [(cisco_field).name="CACStats"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"policy_stats\", \"v_maj\": 110, \"version\": 1.0, \"bytecode\": \"$63={NodeName}P42x%S{PolicyName}65s{State}[policy_state_en]e{StateDescription}128s{class_stats}a($64){Satid}D;$5={value}D{unit}[policy_param_unit_type_]e;$55={TransmitPackets}H{TransmitBytes}H{TotalDropPackets}H{TotalDropBytes}H{TotalDropRate}D{MatchDataRate}D{TotalTransmitRate}D{PrePolicyMatchedPackets}H{PrePolicyMatchedBytes}H;$56={ConformClassConformPackets}H{ConformClassConformBytes}H{ConformClassConformRate}D{ConformClassExceedPackets}H{ConformClassExceedBytes}H{ConformClassExceedRate}D{ConformClassViolatePackets}H{ConformClassViolateBytes}H{ConformClassViolateRate}D{ExceedClassExceedPackets}H{ExceedClassExceedBytes}H{ExceedClassExceedRate}D{ExceedClassViolatePackets}H{ExceedClassViolateBytes}H{ExceedClassViolateRate}D{ViolateClassViolatePackets}H{ViolateClassViolateBytes}H{ViolateClassViolateRate}D;$57={DropPackets}H{DropBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ViolatePackets}H{ViolateBytes}H{ParentDropPackets}H{ParentDropBytes}H{ConformRate}D{ExceedRate}D{ViolateRate}D{ColorClassStats}p($56);$58={DropPackets}H{DropBytes}H{DropRates}D{Admitpackets}H{AdmitBytes}H{AdmitRates}D;$59={NonTCP_TotalOutPackets}H{NonTCP_TotalOutBytes}H{NonTCP_BytesSaved}H{NonTcp_CompressedPacketsOut}H{NonTCP_BytesSentRate}D{NonTCP_FullHeaderPacketsOut}H{TCP_TotalOutPackets}H{TCP_TotalOutBytes}H{TCP_BytesSaved}H{TCP_CompressedPacketsOut}H{TCP_BytesSentRate}D{TCP_FullHeaderPacketsOut}H;$60={QueueID}D{TailDropPackets}H{TailDropBytes}H{atm_clp0_drop_pkts}PH{atm_clp0_drop_bytes}PH{atm_clp1_drop_pkts}PH{atm_clp1_drop_bytes}PH{ATM_CLP0DropPackets}p(H){ATM_CLP0DropBytes}p(H){ATM_CLP1DropPackets}p(H){ATM_CLP1DropBytes}p(H){QueueInstanceLength}a($5){QueueAverageLength}a($5){QueueMaxLength}a($5){QueueDropThreshold}D{ForcedWREDStatsDisplay}b{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ConformRate}D{ExceedRate}D;$61={WREDType}[wred_type_en_]e{value}C;$62={ProfileTitle}300s{REDLabel}a($61){REDTransmitPackets}H{REDTransmitBytes}H{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{RED_ECNMarkedPackets}H{RED_ECNMarkedBytes}H;$64={CounterValidityBitmask}H{ClassName}65s{system_added_default_class}PC{SharedQueueID}p(D){QueueDescr}256s{CACState}[cac_state_en]e{GeneralStats}$55{QueueStatsArray}a($60){PoliceStatsArray}a($57){WREDStatsArray}a($62){IphcStats}p($59){ChildPolicy}p($63){CACStats}p($58);\", \"schema_names\": [[\"RootOper.QOS.Interface(InterfaceName)\", \"\"]], \"subtypes\": {\"64\": \"class_stats\", \"5\": \"policy_param_uint32_st_\", \"55\": \"gen_stats_st\", \"56\": \"plc_color_class_stats_st\", \"57\": \"plc_stats_st\", \"58\": \"cac_stats_st\", \"59\": \"iphc_stats_st\", \"60\": \"q_stats_st\", \"61\": \"wred_type_value\", \"62\": \"red_profile_stats\"}, \"enums\": {\"policy_state_en\": {\"0\": \"Active\", \"1\": \"Suspended\"}, \"wred_type_en_\": {\"0\": \"WRED_COS_CMD\", \"1\": \"WRED_DSCP_CMD\", \"2\": \"WRED_PRECEDENCE_CMD\", \"3\": \"WRED_DISCARD_CLASS_CMD\", \"4\": \"WRED_MPLS_EXP_CMD\", \"5\": \"RED_WITH_USER_MIN_MAX\", \"6\": \"RED_WITH_DEFAULT_MIN_MAX\", \"7\": \"WRED_DEI_CMD\", \"8\": \"WRED_ECN_CMD\", \"9\": \"WRED_INVALID_CMD\"}, \"policy_param_unit_type_\": {\"0\": \"POLICY_PARAM_UNIT_INVALID\", \"1\": \"POLICY_PARAM_UNIT_BYTES\", \"2\": \"POLICY_PARAM_UNIT_KBYTES\", \"3\": \"POLICY_PARAM_UNIT_MBYTES\", \"4\": \"POLICY_PARAM_UNIT_GBYTES\", \"5\": \"POLICY_PARAM_UNIT_BITSPS\", \"6\": \"POLICY_PARAM_UNIT_KBITSPS\", \"7\": \"POLICY_PARAM_UNIT_MBITSPS\", \"8\": \"POLICY_PARAM_UNIT_GBITSPS\", \"9\": \"POLICY_PARAM_UNIT_CELLSPS\", \"10\": \"POLICY_PARAM_UNIT_PACKETSPS\", \"11\": \"POLICY_PARAM_UNIT_US\", \"12\": \"POLICY_PARAM_UNIT_MS\", \"13\": \"POLICY_PARAM_UNIT_SECONDS\", \"14\": \"POLICY_PARAM_UNIT_PACKETS\", \"15\": \"POLICY_PARAM_UNIT_CELLS\", \"16\": \"POLICY_PARAM_UNIT_PERCENT\", \"17\": \"POLICY_PARAM_UNIT_PERTHOUSAND\", \"18\": \"POLICY_PARAM_UNIT_PERMILLION\", \"19\": \"POLICY_PARAM_UNIT_HZ\", \"20\": \"POLICY_PARAM_UNIT_KHZ\", \"21\": \"POLICY_PARAM_UNIT_MHZ\", \"22\": \"POLICY_PARAM_UNIT_RATIO\", \"23\": \"POLICY_PARAM_UNIT_MAX\"}, \"cac_state_en\": {\"0\": \"Unknown\", \"1\": \"ADMIT\", \"2\": \"REDIRECT\", \"3\": \"UBRL\"}}, \"schema_path\": \"RootOper.QOS.Interface.Input.Statistics\", \"v_min\": 0}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_output_statistics.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_output_statistics.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_output_statistics.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/protos/qos_output_statistics.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,200 +0,0 @@
-// Copyright (c) 2015, Cisco Systems
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright notice,
-//    this list of conditions and the following disclaimer.
-//
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-//
-// 3. Neither the name of the copyright holder nor the names of its
-//    contributors may be used to endorse or promote products derived
-//    from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
-// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
-// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
-// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
-// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
-// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// This file is autogenerated
-//
-// The following edits are possible, without affecting the validity of the
-// file:
-//
-//  * Fields may be renamed.
-//  * Fields may be deleted.
-//  * The unique numbered tag for a field may be changed, provided that
-//    the ordering of tags for fields within a message is preserved.
-//  * Message types may be renamed.
-//  * Message types may be deleted (if all fields that reference them
-//    have been deleted).
-//
-// All Cisco message and field extensions must be preserved (except when the
-// field itself is being deleted).
-
-syntax = "proto2";
-
-import "cisco.proto";
-
-message policy_stats {
-    option (cisco_msg).schema_path = "RootOper.QOS.Interface.Output.Statistics";
-
-    optional string interface_name = 1 [(cisco_field).path_element="RootOper.QOS.Interface(InterfaceName)"];
-    optional string policy_name = 50 [(cisco_field).name="PolicyName"];
-    optional string state = 51 [(cisco_field).name="State"];
-    optional string state_description = 52 [(cisco_field).name="StateDescription"];
-    repeated class_stats class_stats = 53 [(cisco_field).name="class_stats"];
-    optional uint32 satid = 54 [(cisco_field).name="Satid"];
-}
-
-message policy_param_uint32_st_ {
-    optional uint32 value = 1 [(cisco_field).name="value"];
-    optional string unit = 2 [(cisco_field).name="unit"];
-}
-
-message gen_stats_st {
-    optional uint64 transmit_packets = 1 [(cisco_field).name="TransmitPackets"];
-    optional uint64 transmit_bytes = 2 [(cisco_field).name="TransmitBytes"];
-    optional uint64 total_drop_packets = 3 [(cisco_field).name="TotalDropPackets"];
-    optional uint64 total_drop_bytes = 4 [(cisco_field).name="TotalDropBytes"];
-    optional uint32 total_drop_rate = 5 [(cisco_field).name="TotalDropRate"];
-    optional uint32 match_data_rate = 6 [(cisco_field).name="MatchDataRate"];
-    optional uint32 total_transmit_rate = 7 [(cisco_field).name="TotalTransmitRate"];
-    optional uint64 pre_policy_matched_packets = 8 [(cisco_field).name="PrePolicyMatchedPackets"];
-    optional uint64 pre_policy_matched_bytes = 9 [(cisco_field).name="PrePolicyMatchedBytes"];
-}
-
-message plc_color_class_stats_st {
-    optional uint64 conform_class_conform_packets = 1 [(cisco_field).name="ConformClassConformPackets"];
-    optional uint64 conform_class_conform_bytes = 2 [(cisco_field).name="ConformClassConformBytes"];
-    optional uint32 conform_class_conform_rate = 3 [(cisco_field).name="ConformClassConformRate"];
-    optional uint64 conform_class_exceed_packets = 4 [(cisco_field).name="ConformClassExceedPackets"];
-    optional uint64 conform_class_exceed_bytes = 5 [(cisco_field).name="ConformClassExceedBytes"];
-    optional uint32 conform_class_exceed_rate = 6 [(cisco_field).name="ConformClassExceedRate"];
-    optional uint64 conform_class_violate_packets = 7 [(cisco_field).name="ConformClassViolatePackets"];
-    optional uint64 conform_class_violate_bytes = 8 [(cisco_field).name="ConformClassViolateBytes"];
-    optional uint32 conform_class_violate_rate = 9 [(cisco_field).name="ConformClassViolateRate"];
-    optional uint64 exceed_class_exceed_packets = 10 [(cisco_field).name="ExceedClassExceedPackets"];
-    optional uint64 exceed_class_exceed_bytes = 11 [(cisco_field).name="ExceedClassExceedBytes"];
-    optional uint32 exceed_class_exceed_rate = 12 [(cisco_field).name="ExceedClassExceedRate"];
-    optional uint64 exceed_class_violate_packets = 13 [(cisco_field).name="ExceedClassViolatePackets"];
-    optional uint64 exceed_class_violate_bytes = 14 [(cisco_field).name="ExceedClassViolateBytes"];
-    optional uint32 exceed_class_violate_rate = 15 [(cisco_field).name="ExceedClassViolateRate"];
-    optional uint64 violate_class_violate_packets = 16 [(cisco_field).name="ViolateClassViolatePackets"];
-    optional uint64 violate_class_violate_bytes = 17 [(cisco_field).name="ViolateClassViolateBytes"];
-    optional uint32 violate_class_violate_rate = 18 [(cisco_field).name="ViolateClassViolateRate"];
-}
-
-message plc_stats_st {
-    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
-    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
-    optional uint64 conform_packets = 3 [(cisco_field).name="ConformPackets"];
-    optional uint64 conform_bytes = 4 [(cisco_field).name="ConformBytes"];
-    optional uint64 exceed_packets = 5 [(cisco_field).name="ExceedPackets"];
-    optional uint64 exceed_bytes = 6 [(cisco_field).name="ExceedBytes"];
-    optional uint64 violate_packets = 7 [(cisco_field).name="ViolatePackets"];
-    optional uint64 violate_bytes = 8 [(cisco_field).name="ViolateBytes"];
-    optional uint64 parent_drop_packets = 9 [(cisco_field).name="ParentDropPackets"];
-    optional uint64 parent_drop_bytes = 10 [(cisco_field).name="ParentDropBytes"];
-    optional uint32 conform_rate = 11 [(cisco_field).name="ConformRate"];
-    optional uint32 exceed_rate = 12 [(cisco_field).name="ExceedRate"];
-    optional uint32 violate_rate = 13 [(cisco_field).name="ViolateRate"];
-    optional plc_color_class_stats_st color_class_stats = 14 [(cisco_field).name="ColorClassStats"];
-}
-
-message cac_stats_st {
-    optional uint64 drop_packets = 1 [(cisco_field).name="DropPackets"];
-    optional uint64 drop_bytes = 2 [(cisco_field).name="DropBytes"];
-    optional uint32 drop_rates = 3 [(cisco_field).name="DropRates"];
-    optional uint64 admitpackets = 4 [(cisco_field).name="Admitpackets"];
-    optional uint64 admit_bytes = 5 [(cisco_field).name="AdmitBytes"];
-    optional uint32 admit_rates = 6 [(cisco_field).name="AdmitRates"];
-}
-
-message iphc_stats_st {
-    optional uint64 non_tcp_total_out_packets = 1 [(cisco_field).name="NonTCP_TotalOutPackets"];
-    optional uint64 non_tcp_total_out_bytes = 2 [(cisco_field).name="NonTCP_TotalOutBytes"];
-    optional uint64 non_tcp_bytes_saved = 3 [(cisco_field).name="NonTCP_BytesSaved"];
-    optional uint64 non_tcp_compressed_packets_out = 4 [(cisco_field).name="NonTcp_CompressedPacketsOut"];
-    optional uint32 non_tcp_bytes_sent_rate = 5 [(cisco_field).name="NonTCP_BytesSentRate"];
-    optional uint64 non_tcp_full_header_packets_out = 6 [(cisco_field).name="NonTCP_FullHeaderPacketsOut"];
-    optional uint64 tcp_total_out_packets = 7 [(cisco_field).name="TCP_TotalOutPackets"];
-    optional uint64 tcp_total_out_bytes = 8 [(cisco_field).name="TCP_TotalOutBytes"];
-    optional uint64 tcp_bytes_saved = 9 [(cisco_field).name="TCP_BytesSaved"];
-    optional uint64 tcp_compressed_packets_out = 10 [(cisco_field).name="TCP_CompressedPacketsOut"];
-    optional uint32 tcp_bytes_sent_rate = 11 [(cisco_field).name="TCP_BytesSentRate"];
-    optional uint64 tcp_full_header_packets_out = 12 [(cisco_field).name="TCP_FullHeaderPacketsOut"];
-}
-
-message q_stats_st {
-    optional uint32 queue_id = 1 [(cisco_field).name="QueueID"];
-    optional uint64 tail_drop_packets = 2 [(cisco_field).name="TailDropPackets"];
-    optional uint64 tail_drop_bytes = 3 [(cisco_field).name="TailDropBytes"];
-    optional uint64 atm_clp0_drop_packets = 4 [(cisco_field).name="ATM_CLP0DropPackets"];
-    optional uint64 atm_clp0_drop_bytes = 5 [(cisco_field).name="ATM_CLP0DropBytes"];
-    optional uint64 atm_clp1_drop_packets = 6 [(cisco_field).name="ATM_CLP1DropPackets"];
-    optional uint64 atm_clp1_drop_bytes = 7 [(cisco_field).name="ATM_CLP1DropBytes"];
-    repeated policy_param_uint32_st_ queue_instance_length = 8 [(cisco_field).name="QueueInstanceLength"];
-    repeated policy_param_uint32_st_ queue_average_length = 9 [(cisco_field).name="QueueAverageLength"];
-    repeated policy_param_uint32_st_ queue_max_length = 10 [(cisco_field).name="QueueMaxLength"];
-    optional uint32 queue_drop_threshold = 11 [(cisco_field).name="QueueDropThreshold"];
-    optional bool forced_wred_stats_display = 12 [(cisco_field).name="ForcedWREDStatsDisplay"];
-    optional uint64 random_drop_packets = 13 [(cisco_field).name="RandomDropPackets"];
-    optional uint64 random_drop_bytes = 14 [(cisco_field).name="RandomDropBytes"];
-    optional uint64 max_threshold_packets = 15 [(cisco_field).name="MaxThresholdPackets"];
-    optional uint64 max_threshold_bytes = 16 [(cisco_field).name="MaxThresholdBytes"];
-    optional uint64 conform_packets = 17 [(cisco_field).name="ConformPackets"];
-    optional uint64 conform_bytes = 18 [(cisco_field).name="ConformBytes"];
-    optional uint64 exceed_packets = 19 [(cisco_field).name="ExceedPackets"];
-    optional uint64 exceed_bytes = 20 [(cisco_field).name="ExceedBytes"];
-    optional uint32 conform_rate = 21 [(cisco_field).name="ConformRate"];
-    optional uint32 exceed_rate = 22 [(cisco_field).name="ExceedRate"];
-}
-
-message wred_type_value {
-    optional string wred_type = 1 [(cisco_field).name="WREDType"];
-    optional uint32 value = 2 [(cisco_field).name="value"];
-}
-
-message red_profile_stats {
-    optional string profile_title = 1 [(cisco_field).name="ProfileTitle"];
-    repeated wred_type_value red_label = 2 [(cisco_field).name="REDLabel"];
-    optional uint64 red_transmit_packets = 3 [(cisco_field).name="REDTransmitPackets"];
-    optional uint64 red_transmit_bytes = 4 [(cisco_field).name="REDTransmitBytes"];
-    optional uint64 random_drop_packets = 5 [(cisco_field).name="RandomDropPackets"];
-    optional uint64 random_drop_bytes = 6 [(cisco_field).name="RandomDropBytes"];
-    optional uint64 max_threshold_packets = 7 [(cisco_field).name="MaxThresholdPackets"];
-    optional uint64 max_threshold_bytes = 8 [(cisco_field).name="MaxThresholdBytes"];
-    optional uint64 red_ecn_marked_packets = 9 [(cisco_field).name="RED_ECNMarkedPackets"];
-    optional uint64 red_ecn_marked_bytes = 10 [(cisco_field).name="RED_ECNMarkedBytes"];
-}
-
-message class_stats {
-    optional uint64 counter_validity_bitmask = 1 [(cisco_field).name="CounterValidityBitmask"];
-    optional string class_name = 2 [(cisco_field).name="ClassName"];
-    optional uint32 shared_queue_id = 3 [(cisco_field).name="SharedQueueID"];
-    optional string queue_descr = 4 [(cisco_field).name="QueueDescr"];
-    optional string cac_state = 5 [(cisco_field).name="CACState"];
-    optional gen_stats_st general_stats = 6 [(cisco_field).name="GeneralStats"];
-    repeated q_stats_st queue_stats_array = 7 [(cisco_field).name="QueueStatsArray"];
-    repeated plc_stats_st police_stats_array = 8 [(cisco_field).name="PoliceStatsArray"];
-    repeated red_profile_stats wred_stats_array = 9 [(cisco_field).name="WREDStatsArray"];
-    optional iphc_stats_st iphc_stats = 10 [(cisco_field).name="IphcStats"];
-    optional policy_stats child_policy = 11 [(cisco_field).name="ChildPolicy"];
-    optional cac_stats_st cac_stats = 12 [(cisco_field).name="CACStats"];
-}
-
-// The following metadata must not be deleted or modified:
-option (cisco_file).metadata="{\"bag\": \"policy_stats\", \"v_maj\": 110, \"version\": 1.0, \"bytecode\": \"$63={NodeName}P42x%S{PolicyName}65s{State}[policy_state_en]e{StateDescription}128s{class_stats}a($64){Satid}D;$5={value}D{unit}[policy_param_unit_type_]e;$55={TransmitPackets}H{TransmitBytes}H{TotalDropPackets}H{TotalDropBytes}H{TotalDropRate}D{MatchDataRate}D{TotalTransmitRate}D{PrePolicyMatchedPackets}H{PrePolicyMatchedBytes}H;$56={ConformClassConformPackets}H{ConformClassConformBytes}H{ConformClassConformRate}D{ConformClassExceedPackets}H{ConformClassExceedBytes}H{ConformClassExceedRate}D{ConformClassViolatePackets}H{ConformClassViolateBytes}H{ConformClassViolateRate}D{ExceedClassExceedPackets}H{ExceedClassExceedBytes}H{ExceedClassExceedRate}D{ExceedClassViolatePackets}H{ExceedClassViolateBytes}H{ExceedClassViolateRate}D{ViolateClassViolatePackets}H{ViolateClassViolateBytes}H{ViolateClassViolateRate}D;$57={DropPackets}H{DropBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ViolatePackets}H{ViolateBytes}H{ParentDropPackets}H{ParentDropBytes}H{ConformRate}D{ExceedRate}D{ViolateRate}D{ColorClassStats}p($56);$58={DropPackets}H{DropBytes}H{DropRates}D{Admitpackets}H{AdmitBytes}H{AdmitRates}D;$59={NonTCP_TotalOutPackets}H{NonTCP_TotalOutBytes}H{NonTCP_BytesSaved}H{NonTcp_CompressedPacketsOut}H{NonTCP_BytesSentRate}D{NonTCP_FullHeaderPacketsOut}H{TCP_TotalOutPackets}H{TCP_TotalOutBytes}H{TCP_BytesSaved}H{TCP_CompressedPacketsOut}H{TCP_BytesSentRate}D{TCP_FullHeaderPacketsOut}H;$60={QueueID}D{TailDropPackets}H{TailDropBytes}H{atm_clp0_drop_pkts}PH{atm_clp0_drop_bytes}PH{atm_clp1_drop_pkts}PH{atm_clp1_drop_bytes}PH{ATM_CLP0DropPackets}p(H){ATM_CLP0DropBytes}p(H){ATM_CLP1DropPackets}p(H){ATM_CLP1DropBytes}p(H){QueueInstanceLength}a($5){QueueAverageLength}a($5){QueueMaxLength}a($5){QueueDropThreshold}D{ForcedWREDStatsDisplay}b{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{ConformPackets}H{ConformBytes}H{ExceedPackets}H{ExceedBytes}H{ConformRate}D{ExceedRate}D;$61={WREDType}[wred_type_en_]e{value}C;$62={ProfileTitle}300s{REDLabel}a($61){REDTransmitPackets}H{REDTransmitBytes}H{RandomDropPackets}H{RandomDropBytes}H{MaxThresholdPackets}H{MaxThresholdBytes}H{RED_ECNMarkedPackets}H{RED_ECNMarkedBytes}H;$64={CounterValidityBitmask}H{ClassName}65s{system_added_default_class}PC{SharedQueueID}p(D){QueueDescr}256s{CACState}[cac_state_en]e{GeneralStats}$55{QueueStatsArray}a($60){PoliceStatsArray}a($57){WREDStatsArray}a($62){IphcStats}p($59){ChildPolicy}p($63){CACStats}p($58);\", \"schema_names\": [[\"RootOper.QOS.Interface(InterfaceName)\", \"\"]], \"subtypes\": {\"64\": \"class_stats\", \"5\": \"policy_param_uint32_st_\", \"55\": \"gen_stats_st\", \"56\": \"plc_color_class_stats_st\", \"57\": \"plc_stats_st\", \"58\": \"cac_stats_st\", \"59\": \"iphc_stats_st\", \"60\": \"q_stats_st\", \"61\": \"wred_type_value\", \"62\": \"red_profile_stats\"}, \"enums\": {\"policy_state_en\": {\"0\": \"Active\", \"1\": \"Suspended\"}, \"wred_type_en_\": {\"0\": \"WRED_COS_CMD\", \"1\": \"WRED_DSCP_CMD\", \"2\": \"WRED_PRECEDENCE_CMD\", \"3\": \"WRED_DISCARD_CLASS_CMD\", \"4\": \"WRED_MPLS_EXP_CMD\", \"5\": \"RED_WITH_USER_MIN_MAX\", \"6\": \"RED_WITH_DEFAULT_MIN_MAX\", \"7\": \"WRED_DEI_CMD\", \"8\": \"WRED_ECN_CMD\", \"9\": \"WRED_INVALID_CMD\"}, \"policy_param_unit_type_\": {\"0\": \"POLICY_PARAM_UNIT_INVALID\", \"1\": \"POLICY_PARAM_UNIT_BYTES\", \"2\": \"POLICY_PARAM_UNIT_KBYTES\", \"3\": \"POLICY_PARAM_UNIT_MBYTES\", \"4\": \"POLICY_PARAM_UNIT_GBYTES\", \"5\": \"POLICY_PARAM_UNIT_BITSPS\", \"6\": \"POLICY_PARAM_UNIT_KBITSPS\", \"7\": \"POLICY_PARAM_UNIT_MBITSPS\", \"8\": \"POLICY_PARAM_UNIT_GBITSPS\", \"9\": \"POLICY_PARAM_UNIT_CELLSPS\", \"10\": \"POLICY_PARAM_UNIT_PACKETSPS\", \"11\": \"POLICY_PARAM_UNIT_US\", \"12\": \"POLICY_PARAM_UNIT_MS\", \"13\": \"POLICY_PARAM_UNIT_SECONDS\", \"14\": \"POLICY_PARAM_UNIT_PACKETS\", \"15\": \"POLICY_PARAM_UNIT_CELLS\", \"16\": \"POLICY_PARAM_UNIT_PERCENT\", \"17\": \"POLICY_PARAM_UNIT_PERTHOUSAND\", \"18\": \"POLICY_PARAM_UNIT_PERMILLION\", \"19\": \"POLICY_PARAM_UNIT_HZ\", \"20\": \"POLICY_PARAM_UNIT_KHZ\", \"21\": \"POLICY_PARAM_UNIT_MHZ\", \"22\": \"POLICY_PARAM_UNIT_RATIO\", \"23\": \"POLICY_PARAM_UNIT_MAX\"}, \"cac_state_en\": {\"0\": \"Unknown\", \"1\": \"ADMIT\", \"2\": \"REDIRECT\", \"3\": \"UBRL\"}}, \"schema_path\": \"RootOper.QOS.Interface.Output.Statistics\", \"v_min\": 0}";
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/README.md /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/README.md
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/README.md	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/README.md	1970-01-01 08:00:00.000000000 +0800
@@ -1,91 +0,0 @@
-# XR6.0.0 GPB Telemetry
-
-This folder contains the .proto and .map files needed to stream and decode a selection of commonly used data from ASR9K and NCS5500 routers running IOS XR version 6.0.0.
-
-Streaming telemetry data over GPB involves the following stages:
-
-1. Create a policy file listing the data to stream and associated cadences. Copy this to the /telemetry/policies/ directory on the router
-2. Pick the appropriate .map files from this repository and copy these to the /telemetry/gpb/maps/ directory on the router
-3. Configure the router
-4. Use the .proto files from this repository to decode the data at the collector.
-
-## Available schema paths
-
-The following table shows the XR schema paths for which .proto and .map files are available in this repository, along with the MIB which most closely corresponds to them (there is no 1-1 mapping)
-
- Description | Schema Path in Policy File | .proto & .map filename | Corresponding MIB(s)
- ----------- | -------------------------- | ---------------------- | --------------------
- BGP neighbour data for all neighbors using default instance. Other instances amy be chosen. | RootOper.BGP.Instance({'InstanceName': 'default'}).InstanceActive.DefaultVRF.Neighbor(*) | bgp_neighbor | BGP4-MIB, CISCO-BGP4-MIB
- Ingress QoS counters | RootOper.QOS.Interface(*).Input.Statistics | qos_input_statistics | CISCO-CLASS-BASED-QOS-MIB
- Egress QoS counters | RootOper.QOS.Interface(*).Output.Statistics | qos_output_statistics | CISCO-CLASS-BASED-QOS-MIB
- Interface Packet and Byte counters | RootOper.InfraStatistics.Interface(*).Latest.GenericCounters | infrastatistics_generic | IF-MIB, CISCO-IF-EXTENSION-MIB
- Interface packet and byte rates | RootOper.InfraStatistics.Interface(*).Latest.DataRate | infrastatistics_datarate | IF-MIB, CISCO-IF-EXTENSION-MIB
- Interface operational data. Equivalent to 'show interfaces'. This is a superset of the packet and byte counters etc. but is much slower to collect | RootOper.Interfaces.Interface(*) | interfaces | IF-MIB, CISCO-IF-EXTENSION-MIB
- MPLS auto-bandwidth data | RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth(*) | mpls_te_tunnelautobandwidth | CISCO-MPLS-TE-STD-EXT-MIB
- MPLS tunnel data | RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(*) | mpls_te_tunnelhead | MPLS-TE-STD-MIB
- MPLS head signelling counters | RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters | mpls_te_headsignallingcounters | MPLS-TE-STD-MIB
-
-## Policy File Syntax
-
-Policy files are written in JSON syntax and consist of
- * Policy name
- * Metadata. Any fields can be included here but the following fields have specific uses:
-   * Version - a user-specified version string included in every streamed message
-   * Identifier - a user-specified string value included in every streamed message e.g. to identify the source router
-   * Description - a description string displayed in 'show telemetry policies'
- * One or more Collection Groups (use multiple groups if different periods are required for different data). Each group consists of:
-   * Period - the time in seconds between collections. Minimum 5s
-   * Paths - a list of schema paths to stream with the specified period
-
-### Example Policy File:
-
-example.policy
-
-    {
-      "Name": "example",
-      "Metadata": {
-        "Version": 25,
-        "Description": "This is a sample policy to demonstrate the syntax",
-        "Comment": "This is the first draft",
-        "Identifier": "<hostname or other router ID>"
-      },
-      "CollectionGroups": {
-        "FirstGroup": {
-          "Period": 30,
-          "Paths": [
-            "RootOper.BGP.Instance({'InstanceName': 'default'}).InstanceActive.DefaultVRF.Neighbor(*)",
-            "RootOper.InfraStatistics.Interface(*).Latest.GenericCounters",
-            "RootOper.InfraStatistics.Interface(*).Latest.DataRate",
-            "RootOper.QOS.Interface(*).Input.Statistics",
-            "RootOper.QOS.Interface(*).Output.Statistics",
-            "RootOper.Interfaces.Interface(*)",
-            "RootOper.MPLS_TE.Tunnels.TunnelAutoBandwidth(*)",
-            "RootOper.MPLS_TE.P2P_P2MPTunnel.TunnelHead(*)",
-            "RootOper.MPLS_TE.SignallingCounters.HeadSignallingCounters(*)"
-          ]
-        }
-      }
-    }
-
-## Router Configuration
-
-Use the following configuration to stream the data defined by the above policy. Mulitple policies and/or destinations can be configured, in which case all the data in the policies is streamed to all locations.
-
-    telemetry encoder gpb
-      policy group examplegroup
-        policy example
-        destination ipv4 123.10.1.1 port 2222
-
- If different information needs to be sent to different destinations then multiple policy groups can be defined.
-
-## Wire Format & Decoding
-
-The data is sent in UDP packets, each of which contains a TelemetryHeader GPB message defined in telemetry.proto in this repository. This in turn contains a repeated list of TelemetryTable objects for each row. Each one contains a path which can be used to identify the .proto file used to decode the bytes of the message. Assuming the policy contains a subset of the paths listed above then one of the .proto files in this repository can be used.
-
-## Troubleshooting
-
- Error | Resolution
- ----- | ----------
- 'No encoding definition found for the requested schema path' | .map file missing from /telemetry/gpb/maps. Add the appropriate file from this repository
- 'Encoded telemetry data too large for the packet MTU' | A single row doesn't fit in a UDP packet and rows cannot be fragmented so the data cannot be streamed. All of the paths provided can be streamed using an mtu of 1500 but below this some paths may not function and the only option is to remove them from the policy file
-
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/telemetry.proto /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/telemetry.proto
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/telemetry.proto	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-codec-telemetry-gpb/logstash-codec-telemetry-gpb/resources/xr6.0.0/telemetry.proto	1970-01-01 08:00:00.000000000 +0800
@@ -1,39 +0,0 @@
-/* ----------------------------------------------------------------------------
- * telemetry.proto - Telemetry protobuf definitions
- *
- * August 2015, Robert Wills
- *
- * Copyright (c) 2015 by Cisco Systems, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * ----------------------------------------------------------------------------
- */
-
-message TelemetryHeader {
-  optional uint32 encoding = 1;
-
-  optional string policy_name = 2;
-  optional string version = 3;
-  optional string identifier = 4;
-
-  optional uint64 start_time = 5;
-  optional uint64 end_time = 6;
-
-  repeated TelemetryTable tables = 7;
-}
-
-message TelemetryTable {
-  optional string policy_path = 1;
-  repeated bytes  row = 2;
-}
-
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/CHANGELOG.md /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/CHANGELOG.md
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/CHANGELOG.md	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/CHANGELOG.md	2020-08-31 15:47:25.116000000 +0800
@@ -1,12 +1,3 @@
-## 3.0.7
-  - Docs: Set the default_codec doc attribute.
-
-## 3.0.6
-  - Update gemspec summary
-
-## 3.0.5
-  - Fix some documentation issues
-
 ## 3.0.3
   - Preserve values provided in `add_field` for `host` and `path`.

diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/docs/index.asciidoc /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/docs/index.asciidoc
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/docs/index.asciidoc	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/docs/index.asciidoc	2020-08-31 15:47:25.116000000 +0800
@@ -1,6 +1,5 @@
 :plugin: unix
 :type: input
-:default_codec: line

 ///////////////////////////////////////////
 START - GENERATED VARIABLES, DO NOT EDIT!
@@ -13,7 +12,7 @@
 END - GENERATED VARIABLES, DO NOT EDIT!
 ///////////////////////////////////////////

-[id="plugins-{type}s-{plugin}"]
+[id="plugins-{type}-{plugin}"]

 === Unix input plugin

@@ -101,6 +100,4 @@


 [id="plugins-{type}s-{plugin}-common-options"]
-include::{include_path}/{type}.asciidoc[]
-
-:default_codec!:
\ No newline at end of file
+include::{include_path}/{type}.asciidoc[]
\ No newline at end of file
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/lib/logstash/inputs/unix_hw.rb /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/lib/logstash/inputs/unix_hw.rb
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/lib/logstash/inputs/unix_hw.rb	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/lib/logstash/inputs/unix_hw.rb	2020-08-31 15:47:25.116000000 +0800
@@ -9,11 +9,11 @@
 #
 # Can either accept connections from clients or connect to a server,
 # depending on `mode`.
-class LogStash::Inputs::Unix < LogStash::Inputs::Base
+class LogStash::Inputs::Unix_hw < LogStash::Inputs::Base
   class Interrupted < StandardError; end
-  config_name "unix"
+  config_name "unix_hw"

-  default :codec, "line"
+  default :codec, "plain"

   # When mode is `server`, the path to listen on.
   # When mode is `client`, the path to connect to.
@@ -46,7 +46,14 @@
   def register
     require "socket"
     require "timeout"
-
+	require 'logger'
+	require "protocol_buffers"
+
+	# Write error info into file
+    log_file = File.open('./logs/telemetry-gpb.log', 'a')
+	@file_logger = Logger.new(log_file)
+	@file_logger.level = Logger::ERROR
+	#
     if server?
       @logger.info("Starting unix input listener", :address => "#{@path}", :force_unlink => "#{@force_unlink}")
       begin
@@ -58,13 +65,19 @@
             @server_socket = UNIXServer.new(@path)
             return
           rescue Errno::EADDRINUSE, IOError
+		    msg = "!!!Could not start UNIX server: Address in use"
             @logger.error("!!!Could not start UNIX server: Address in use",
                           :path => @path)
+		    @file_logger.error(:msg => msg,
+                          :path => @path)
             raise
           end
         end
-        @logger.error("Could not start UNIX server: Address in use",
+        msg = "!!!Could not start UNIX server: Address in use"
+        @logger.error("!!!Could not start UNIX server: Address in use",
                       :path => @path)
+		@file_logger.error(:msg => msg,
+                      :path => @path)
         raise
       end
     else # client
@@ -85,18 +98,20 @@
         # or socket dies
         # TODO(sissel): Why do we have a timeout here? What's the point?
         if @data_timeout == -1
-          buf = socket.readpartial(16384)
+          len = socket.readpartial(2).unpack("n")
+		  buf = socket.readpartial(len[0])
         else
           Timeout::timeout(@data_timeout) do
             buf = socket.readpartial(16384)
           end
         end
-        @codec.decode(buf) do |event|
-          decorate(event)
-          event.set("host", hostname) unless event.include?("host")
-          event.set("path", @path) unless event.include?("path")
-          output_queue << event
+		@codec.decode(buf) do |event|
+           decorate(event)
+           event.set("host", hostname) unless event.include?("host")
+           event.set("path", @path) unless event.include?("path")
+           output_queue << event
         end
+
       end
     rescue => e
       @logger.debug("Closing connection", :path => @path, :exception => e, :backtrace => e.backtrace)
@@ -120,6 +135,7 @@
   public
   def run(output_queue)
     if server?
+
       @client_threads = []
       while !stop?
         # Start a new thread for each connection.
@@ -160,4 +176,4 @@
     # will raise an IOError. We catch IOError here and do nothing, just let logstash terminate
     @logger.warn("Cloud not close socket while Logstash is shutting down. Socket already closed by the other party?", :path => @path)
   end # def stop
-end # class LogStash::Inputs::Unix
+end # class LogStash::Inputs::Unix_hw
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/LICENSE /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/LICENSE
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/LICENSE	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/LICENSE	2020-08-31 15:47:25.116000000 +0800
@@ -1,202 +1,13 @@
+Copyright (c) 2012â“2016 Elasticsearch <http://www.elastic.co>

-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
-
-   APPENDIX: How to apply the Apache License to your work.
-
-      To apply the Apache License to your work, attach the following
-      boilerplate notice, with the fields enclosed by brackets "[]"
-      replaced with your own identifying information. (Don't include
-      the brackets!)  The text should be enclosed in the appropriate
-      comment syntax for the file format. We also recommend that a
-      file or class name and description of purpose be included on the
-      same "printed page" as the copyright notice for easier
-      identification within third-party archives.
-
-   Copyright 2020 Elastic and contributors
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/logstash-input-unix-hw.gemspec /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/logstash-input-unix-hw.gemspec
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/logstash-input-unix-hw.gemspec	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/logstash-input-unix-hw.gemspec	2020-08-31 15:47:25.116000000 +0800
@@ -1,9 +1,9 @@
 Gem::Specification.new do |s|

-  s.name            = 'logstash-input-unix'
-  s.version         = '3.0.7'
+  s.name            = 'logstash-input-unix-hw'
+  s.version         = '3.0.4'
   s.licenses        = ['Apache License (2.0)']
-  s.summary         = "Reads events over a UNIX socket"
+  s.summary         = "Read events over a UNIX socket."
   s.description     = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using $LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
   s.authors         = ["Elastic"]
   s.email           = 'info@elastic.co'
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/Rakefile /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/Rakefile
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/Rakefile	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/Rakefile	1970-01-01 08:00:00.000000000 +0800
@@ -1,7 +0,0 @@
-@files=[]
-
-task :default do
-  system("rake -T")
-end
-
-require "logstash/devutils/rake"
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/inputs/unix_spec.rb /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/inputs/unix_spec.rb
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/inputs/unix_spec.rb	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/inputs/unix_spec.rb	1970-01-01 08:00:00.000000000 +0800
@@ -1,65 +0,0 @@
-# encoding: utf-8
-require_relative "../spec_helper"
-require "logstash/devutils/rspec/shared_examples"
-require "stud/temporary"
-require "tempfile"
-
-describe LogStash::Inputs::Unix do
-
-  let(:tempfile)   { Tempfile.new("/tmp/foo") }
-
-  it "should register without errors" do
-    plugin = LogStash::Plugin.lookup("input", "unix").new({ "path" => tempfile.path, "force_unlink" => true })
-    expect { plugin.register }.to_not raise_error
-  end
-
-  describe "when mode is client" do
-
-    let(:mode) { "client" }
-
-    context "if socket_not_present_retry_interval_seconds is out of bounds" do
-      it "should fallback to default value" do
-        plugin = LogStash::Plugin.lookup("input", "unix").new({ "path" => tempfile.path, "force_unlink" => true, "mode" => mode, "socket_not_present_retry_interval_seconds" => -1 })
-        plugin.register
-        expect(plugin.instance_variable_get(:@socket_not_present_retry_interval_seconds)).to be 5
-      end
-    end
-  end
-
-  describe "when interrupting the plugin" do
-
-    context "#server" do
-      it_behaves_like "an interruptible input plugin" do
-        let(:config) { { "path" => tempfile.path, "force_unlink" => true } }
-      end
-    end
-
-    context "#client" do
-      let(:tempfile)    { "/tmp/sock#{rand(65532)}" }
-      let(:config)      { { "path" => tempfile, "mode" => "client" } }
-      let(:unix_socket) { UnixSocketHelper.new.new_socket(tempfile) }
-      let(:run_forever) { true }
-
-      before(:each) do
-        unix_socket.loop(run_forever)
-      end
-
-      after(:each) do
-        unix_socket.close
-      end
-
-      context "when the unix socket has data to be read" do
-        it_behaves_like "an interruptible input plugin" do
-          let(:run_forever) { true }
-        end
-      end
-
-      context "when the unix socket has no data to be read" do
-        it_behaves_like "an interruptible input plugin" do
-          let(:run_forever) { false }
-        end
-      end
-    end
-
-  end
-end
diff -uNr /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/spec_helper.rb /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/spec_helper.rb
--- /usr/patch/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/spec_helper.rb	2020-09-11 11:30:21.316000000 +0800
+++ /usr/elk/logstash-5.5.0/local-plugins/logstash-input-unix-hw/logstash-input-unix-hw/spec/spec_helper.rb	1970-01-01 08:00:00.000000000 +0800
@@ -1,37 +0,0 @@
-# encoding: utf-8
-require "logstash/devutils/rspec/spec_helper"
-require 'logstash/inputs/unix'
-
-class UnixSocketHelper
-
-  attr_reader :path
-
-  def initialize
-    @socket = nil
-  end
-
-  def new_socket(path)
-    @path   = path
-    File.unlink if File.exists?(path) && File.socket?(path)
-    @socket = UNIXServer.new(path)
-    self
-  end
-
-  def loop(forever=false)
-    @thread = Thread.new do
-      begin
-        s = @socket.accept
-        s.puts "hi" while forever
-      rescue Errno::EPIPE, Errno::ECONNRESET
-        # ...
-      end
-    end
-    self
-  end
-
-  def close
-    @thread.kill
-    @socket.close
-    File.unlink(path)
-  end
-end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/protoc-gen-ruby /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/protoc-gen-ruby
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/protoc-gen-ruby	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/protoc-gen-ruby	2020-08-31 15:47:25.160000000 +0800
@@ -0,0 +1,27 @@
+#!/usr/local/bin/ruby
+#
+# This file was generated by RubyGems.
+#
+# The application 'ruby-protocol-buffers' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
+
+require 'rubygems'
+
+version = ">= 0.a"
+
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
+
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('ruby-protocol-buffers', 'protoc-gen-ruby', version)
+else
+gem "ruby-protocol-buffers", version
+load Gem.bin_path("ruby-protocol-buffers", "protoc-gen-ruby", version)
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/ruby-protoc /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/ruby-protoc
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/ruby-protoc	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/bin/ruby-protoc	2020-08-31 15:47:25.160000000 +0800
@@ -0,0 +1,27 @@
+#!/usr/local/bin/ruby
+#
+# This file was generated by RubyGems.
+#
+# The application 'ruby-protocol-buffers' is installed as part of a gem, and
+# this file is here to facilitate running it.
+#
+
+require 'rubygems'
+
+version = ">= 0.a"
+
+if ARGV.first
+  str = ARGV.first
+  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
+  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
+    version = $1
+    ARGV.shift
+  end
+end
+
+if Gem.respond_to?(:activate_bin_path)
+load Gem.activate_bin_path('ruby-protocol-buffers', 'ruby-protoc', version)
+else
+gem "ruby-protocol-buffers", version
+load Gem.bin_path("ruby-protocol-buffers", "ruby-protoc", version)
+end
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/cache/ruby-protocol-buffers-1.6.1.gem and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/cache/ruby-protocol-buffers-1.6.1.gem differ
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/cache.ri /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/cache.ri
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/cache.ri	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/cache.ri	2020-08-31 15:47:25.180000000 +0800
@@ -0,0 +1,10 @@
+{:ancestors{EI""ProtocolBuffers::CompileError:ET[I"StandardError;TI"(Google::Protobuf::FileDescriptorSet;T[I"ProtocolBuffers::Message;TI"*Google::Protobuf::FileDescriptorProto;T[@I"&Google::Protobuf::DescriptorProto;T[@I"+Google::Protobuf::FieldDescriptorProto;T[@I"*Google::Protobuf::EnumDescriptorProto;T[@I"/Google::Protobuf::EnumValueDescriptorProto;T[@I"-Google::Protobuf::ServiceDescriptorProto;T[@I",Google::Protobuf::MethodDescriptorProto;T[@I""Google::Protobuf::FileOptions;T[@I"%Google::Protobuf::MessageOptions;T[@I"#Google::Protobuf::FieldOptions;T[@I""Google::Protobuf::EnumOptions;T[@I"'Google::Protobuf::EnumValueOptions;T[@I"%Google::Protobuf::ServiceOptions;T[@I"$Google::Protobuf::MethodOptions;T[@I"*Google::Protobuf::UninterpretedOption;T[@I"%Google::Protobuf::SourceCodeInfo;T[@I"6Google::Protobuf::DescriptorProto::ExtensionRange;T[@I"4Google::Protobuf::UninterpretedOption::NamePart;T[@I"/Google::Protobuf::SourceCodeInfo::Location;T[@I"FileDescriptorToD;T[I"2Google::Protobuf::FieldDescriptorProto::Label;TI"1Google::Protobuf::FieldDescriptorProto::Type;TI"Struct.new(:descriptor);TI"FileDescriptorToRuby;T[@5@6I"Struct.new(:descriptor);TI"CodeGeneratorRequest;T[@I"CodeGeneratorResponse;T[@I" CodeGeneratorResponse::File;T[@I"LimitedIO;T[I" Struct.new(:parent, :limit);TI"!ProtocolBuffers::DecodeError;T[I"StandardError;TI"!ProtocolBuffers::EncodeError;T[I"StandardError;TI"#ProtocolBuffers::RepeatedField;T[I"
+Array;TI"ProtocolBuffers::Field;T[I"Object;TI"'ProtocolBuffers::Field::BytesField;T[I"ProtocolBuffers::Field;TI"(ProtocolBuffers::Field::StringField;T[I"'ProtocolBuffers::Field::BytesField;TI")ProtocolBuffers::Field::NumericField;T[@RI"(ProtocolBuffers::Field::VarintField;T[I")ProtocolBuffers::Field::NumericField;TI".ProtocolBuffers::Field::SignedVarintField;T[I"(ProtocolBuffers::Field::VarintField;TI"(ProtocolBuffers::Field::Uint32Field;T[@]I"(ProtocolBuffers::Field::Uint64Field;T[@]I")ProtocolBuffers::Field::Fixed32Field;T[@ZI")ProtocolBuffers::Field::Fixed64Field;T[@ZI"'ProtocolBuffers::Field::Int32Field;T[I".ProtocolBuffers::Field::SignedVarintField;TI"(ProtocolBuffers::Field::Sint32Field;T[I"'ProtocolBuffers::Field::Int32Field;TI"*ProtocolBuffers::Field::Sfixed32Field;T[@ZI"'ProtocolBuffers::Field::Int64Field;T[@hI"(ProtocolBuffers::Field::Sint64Field;T[I"'ProtocolBuffers::Field::Int64Field;TI"*ProtocolBuffers::Field::Sfixed64Field;T[@ZI"'ProtocolBuffers::Field::FloatField;T[@RI"(ProtocolBuffers::Field::DoubleField;T[@RI"&ProtocolBuffers::Field::BoolField;T[@]I"&ProtocolBuffers::Field::EnumField;T[@kI"+ProtocolBuffers::Field::AggregateField;T[@RI")ProtocolBuffers::Field::MessageField;T[I"+ProtocolBuffers::Field::AggregateField;TI"'ProtocolBuffers::Field::GroupField;T[@|I"ProtocolBuffers::Message;T[I"Object;TI"ProtocolBuffers::Rpc;T[I"Object;TI"ProtocolBuffers::Service;T[I"Object;TI"#ProtocolBuffers::TextFormatter;T[I"Object;TI" ProtocolBuffers::TextParser;T[I"Racc::Parser;TI"!ProtocolBuffers::TextScanner;T[I"Object;TI"ProtocolBuffers::Varint;T[I"Object;TI"1Google::Protobuf::FieldDescriptorProto::Type;T[I"ProtocolBuffers::Enum;TI"2Google::Protobuf::FieldDescriptorProto::Label;T[@–I"0Google::Protobuf::FileOptions::OptimizeMode;T[@–I"*Google::Protobuf::FieldOptions::CType;T[@–:attributes{@G[I"attr_reader invalid_field;TI"ProtocolBuffers::Rpc;T[
+I"attr_reader name;TI"attr_reader proto_name;TI"attr_reader request_class;TI"attr_reader response_class;TI"attr_reader service_class;T@Ž[I"attr_reader lineno;T:class_methods{I"FileDescriptorToD;T[I"new;TI"FileDescriptorToRuby;T[I"new;T@G[I"new;T@[I"field_for_name;FI"field_for_tag;FI"fields;FI"fully_qualified_name;FI"initial_set_fields;FI"new;TI"
+parse;FI"parse_from_text;FI"set_fully_qualified_name;FI"to_hash;FI"valid?;FI"validate!;FI"ProtocolBuffers::Rpc;T[I"new;T@…[	I"fully_qualified_name;FI"rpc;FI"	rpcs;FI"set_fully_qualified_name;F@ˆ[I"new;T@Ž[I"new;TI"ProtocolBuffers::Varint;T[	I"decodeZigZag32;FI"decodeZigZag64;TI"encodeZigZag32;FI"encodeZigZag64;FI"ProtocolBuffers;F[I"bin_sio;FI"
utf8_sio;FI"ProtocolBuffers::Compiler;T[	I"available?;FI"compile;FI"compile_and_load;FI"compile_and_load_string;FI"ProtocolBuffers::Enum;T[I"
included;F:c_class_variables{
\ No newline at end of file
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorRequest/cdesc-CodeGeneratorRequest.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorRequest/cdesc-CodeGeneratorRequest.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorResponse/cdesc-CodeGeneratorResponse.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorResponse/cdesc-CodeGeneratorResponse.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorResponse/File/cdesc-File.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/CodeGeneratorResponse/File/cdesc-File.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/capfirst-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/capfirst-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/cdesc-FileDescriptorToD.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/cdesc-FileDescriptorToD.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/class_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/class_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/default_value-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/default_value-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/define_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/define_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/dump_enum-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/dump_enum-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/dump_message-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/dump_message-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/field_typename-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/field_typename-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/in_namespace-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/in_namespace-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/line-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/line-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/module_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/module_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/write-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToD/write-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/camelize-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/camelize-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/capfirst-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/capfirst-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/cdesc-FileDescriptorToRuby.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/cdesc-FileDescriptorToRuby.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/declare-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/declare-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/default_value-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/default_value-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_enum-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_enum-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_message-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_message-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_service-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/dump_service-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/field_typename-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/field_typename-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/fully_qualified_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/fully_qualified_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/in_namespace-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/in_namespace-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/line-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/line-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/service_typename-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/service_typename-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/underscore-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/underscore-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/write-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/FileDescriptorToRuby/write-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/cdesc-Google.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/cdesc-Google.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/cdesc-Protobuf.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/cdesc-Protobuf.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/DescriptorProto/cdesc-DescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/DescriptorProto/cdesc-DescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/DescriptorProto/ExtensionRange/cdesc-ExtensionRange.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/DescriptorProto/ExtensionRange/cdesc-ExtensionRange.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumDescriptorProto/cdesc-EnumDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumDescriptorProto/cdesc-EnumDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumOptions/cdesc-EnumOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumOptions/cdesc-EnumOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumValueDescriptorProto/cdesc-EnumValueDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumValueDescriptorProto/cdesc-EnumValueDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumValueOptions/cdesc-EnumValueOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/EnumValueOptions/cdesc-EnumValueOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/cdesc-FieldDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/cdesc-FieldDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/Label/cdesc-Label.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/Label/cdesc-Label.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/Type/cdesc-Type.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldDescriptorProto/Type/cdesc-Type.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldOptions/cdesc-FieldOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldOptions/cdesc-FieldOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldOptions/CType/cdesc-CType.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FieldOptions/CType/cdesc-CType.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileDescriptorProto/cdesc-FileDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileDescriptorProto/cdesc-FileDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileDescriptorSet/cdesc-FileDescriptorSet.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileDescriptorSet/cdesc-FileDescriptorSet.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileOptions/cdesc-FileOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileOptions/cdesc-FileOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileOptions/OptimizeMode/cdesc-OptimizeMode.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/FileOptions/OptimizeMode/cdesc-OptimizeMode.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MessageOptions/cdesc-MessageOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MessageOptions/cdesc-MessageOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MethodDescriptorProto/cdesc-MethodDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MethodDescriptorProto/cdesc-MethodDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MethodOptions/cdesc-MethodOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/MethodOptions/cdesc-MethodOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/ServiceDescriptorProto/cdesc-ServiceDescriptorProto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/ServiceDescriptorProto/cdesc-ServiceDescriptorProto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/ServiceOptions/cdesc-ServiceOptions.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/ServiceOptions/cdesc-ServiceOptions.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/SourceCodeInfo/cdesc-SourceCodeInfo.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/SourceCodeInfo/cdesc-SourceCodeInfo.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/SourceCodeInfo/Location/cdesc-Location.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/SourceCodeInfo/Location/cdesc-Location.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/UninterpretedOption/cdesc-UninterpretedOption.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/UninterpretedOption/cdesc-UninterpretedOption.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/UninterpretedOption/NamePart/cdesc-NamePart.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/Google/Protobuf/UninterpretedOption/NamePart/cdesc-NamePart.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/compiler/page-descriptor_proto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/compiler/page-descriptor_proto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/compiler/page-plugin_proto.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/compiler/page-plugin_proto.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/runtime/page-text_parser_ry.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/lib/protocol_buffers/runtime/page-text_parser_ry.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/cdesc-LimitedIO.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/cdesc-LimitedIO.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/eof%3f-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/eof%3f-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/getbyte-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/getbyte-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/read-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/LimitedIO/read-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/page-Changelog_md.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/page-Changelog_md.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/bin_sio-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/bin_sio-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/cdesc-ProtocolBuffers.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/cdesc-ProtocolBuffers.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/CompileError/cdesc-CompileError.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/CompileError/cdesc-CompileError.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/available%3f-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/available%3f-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/cdesc-Compiler.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/cdesc-Compiler.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile_and_load-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile_and_load-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile_and_load_string-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile_and_load_string-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Compiler/compile-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/DecodeError/cdesc-DecodeError.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/DecodeError/cdesc-DecodeError.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Decoder/cdesc-Decoder.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Decoder/cdesc-Decoder.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/cdesc-EncodeError.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/cdesc-EncodeError.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/invalid_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/invalid_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EncodeError/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Encoder/cdesc-Encoder.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Encoder/cdesc-Encoder.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Enum/cdesc-Enum.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Enum/cdesc-Enum.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Enum/included-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Enum/included-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/cdesc-EnumClassMethods.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/cdesc-EnumClassMethods.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/fully_qualified_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/fully_qualified_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/name_to_value_map-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/name_to_value_map-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/set_fully_qualified_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/set_fully_qualified_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/value_to_names_map-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/EnumClassMethods/value_to_names_map-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/AggregateField/cdesc-AggregateField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/AggregateField/cdesc-AggregateField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/BoolField/cdesc-BoolField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/BoolField/cdesc-BoolField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/BytesField/cdesc-BytesField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/BytesField/cdesc-BytesField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/cdesc-Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/cdesc-Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/DoubleField/cdesc-DoubleField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/DoubleField/cdesc-DoubleField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/EnumField/cdesc-EnumField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/EnumField/cdesc-EnumField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Fixed32Field/cdesc-Fixed32Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Fixed32Field/cdesc-Fixed32Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Fixed64Field/cdesc-Fixed64Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Fixed64Field/cdesc-Fixed64Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/FloatField/cdesc-FloatField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/FloatField/cdesc-FloatField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/GroupField/cdesc-GroupField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/GroupField/cdesc-GroupField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Int32Field/cdesc-Int32Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Int32Field/cdesc-Int32Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Int64Field/cdesc-Int64Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Int64Field/cdesc-Int64Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/MessageField/cdesc-MessageField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/MessageField/cdesc-MessageField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/NumericField/cdesc-NumericField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/NumericField/cdesc-NumericField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sfixed32Field/cdesc-Sfixed32Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sfixed32Field/cdesc-Sfixed32Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sfixed64Field/cdesc-Sfixed64Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sfixed64Field/cdesc-Sfixed64Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/SignedVarintField/cdesc-SignedVarintField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/SignedVarintField/cdesc-SignedVarintField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sint32Field/cdesc-Sint32Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sint32Field/cdesc-Sint32Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sint64Field/cdesc-Sint64Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Sint64Field/cdesc-Sint64Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/StringField/cdesc-StringField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/StringField/cdesc-StringField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Uint32Field/cdesc-Uint32Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Uint32Field/cdesc-Uint32Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Uint64Field/cdesc-Uint64Field.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/Uint64Field/cdesc-Uint64Field.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/VarintField/cdesc-VarintField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/VarintField/cdesc-VarintField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/cdesc-WireFormats.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/cdesc-WireFormats.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/FIXED32/cdesc-FIXED32.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/FIXED32/cdesc-FIXED32.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/FIXED64/cdesc-FIXED64.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/FIXED64/cdesc-FIXED64.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/GROUP/cdesc-GROUP.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/GROUP/cdesc-GROUP.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/LENGTH_DELIMITED/cdesc-LENGTH_DELIMITED.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/LENGTH_DELIMITED/cdesc-LENGTH_DELIMITED.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/VARINT/cdesc-VARINT.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Field/WireFormats/VARINT/cdesc-VARINT.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/%3d%3d-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/%3d%3d-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/attributes%3d-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/attributes%3d-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/cdesc-Message.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/cdesc-Message.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/clear%21-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/clear%21-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/default_changed-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/default_changed-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/dup-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/dup-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/eql%3f-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/eql%3f-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/field_for_name-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/field_for_name-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/field_for_tag-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/field_for_tag-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fields-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fields-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fields-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fields-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fully_qualified_name-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fully_qualified_name-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fully_qualified_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/fully_qualified_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/get%21-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/get%21-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/get-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/get-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/hash-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/hash-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/initialize_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/initialize_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/initial_set_fields-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/initial_set_fields-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/inspect-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/inspect-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/merge_from-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/merge_from-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/merge_from_string-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/merge_from_string-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/notify_on_change-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/notify_on_change-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse_from_text-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse_from_text-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse_from_text-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse_from_text-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/parse-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/remember_unknown_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/remember_unknown_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/serialize-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/serialize-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/serialize_to_string-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/serialize_to_string-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/set_fully_qualified_name-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/set_fully_qualified_name-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/set_value_for_tag-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/set_value_for_tag-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/text_format-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/text_format-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/text_format_to_string-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/text_format_to_string-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_hash-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_hash-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_hash-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_hash-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_s-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/to_s-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/unknown_field_count-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/unknown_field_count-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/valid%3f-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/valid%3f-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/valid%3f-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/valid%3f-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/validate%21-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/validate%21-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/validate%21-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/validate%21-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/value_for_tag%3f-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/value_for_tag%3f-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/value_for_tag-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Message/value_for_tag-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/RepeatedField/cdesc-RepeatedField.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/RepeatedField/cdesc-RepeatedField.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/cdesc-Rpc.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/cdesc-Rpc.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/proto_name-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/proto_name-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/request_class-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/request_class-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/response_class-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/response_class-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/service_class-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/service_class-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/to_s-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Rpc/to_s-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/cdesc-Service.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/cdesc-Service.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/fully_qualified_name-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/fully_qualified_name-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/rpc-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/rpc-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/rpcs-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/rpcs-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/set_fully_qualified_name-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Service/set_fully_qualified_name-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/cdesc-TextFormatter.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/cdesc-TextFormatter.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format_unknown_field-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/format_unknown_field-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextFormatter/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextParser/cdesc-TextParser.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextParser/cdesc-TextParser.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextParser/_reduce_none-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextParser/_reduce_none-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/cdesc-TextScanner.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/cdesc-TextScanner.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/lineno-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/lineno-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/new-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/new-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/scan-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/scan-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/unescape-i.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/TextScanner/unescape-i.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/utf8_sio-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/utf8_sio-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/cdesc-Varint.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/cdesc-Varint.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/decodeZigZag32-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/decodeZigZag32-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/decodeZigZag64-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/decodeZigZag64-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/encodeZigZag32-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/encodeZigZag32-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/encodeZigZag64-c.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/Varint/encodeZigZag64-c.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/VarintPure/cdesc-VarintPure.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/VarintPure/cdesc-VarintPure.ri differ
Binary files /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/WireTypes/cdesc-WireTypes.ri and /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/doc/ruby-protocol-buffers-1.6.1/ri/ProtocolBuffers/WireTypes/cdesc-WireTypes.ri differ
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/protoc-gen-ruby /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/protoc-gen-ruby
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/protoc-gen-ruby	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/protoc-gen-ruby	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,31 @@
+#!/usr/bin/env ruby
+require 'protocol_buffers/compiler/file_descriptor_to_ruby'
+require 'protocol_buffers/compiler/plugin.pb'
+require 'stringio'
+
+response = CodeGeneratorResponse.new
+begin
+  request = CodeGeneratorRequest.parse($stdin)
+
+  request.proto_file.each do |file_descriptor|
+    next unless request.file_to_generate.include? file_descriptor.name
+    dumper = FileDescriptorToRuby.new(file_descriptor)
+    io = StringIO.new
+    dumper.write(io)
+    filename = File.join(File.dirname(file_descriptor.name),
+                         File.basename(file_descriptor.name, '.proto') + '.pb.rb')
+    file = CodeGeneratorResponse::File.new(:name => filename, :content => io.string)
+    response.file << file
+  end
+rescue => error
+  response.file.clear
+  response.error = "%s\n%s\n\nBacktrace:\n%s" % [
+    "Failed to generate a Ruby file",
+    error.message,
+    error.backtrace.join("\n")
+  ]
+  $stderr.puts response.error
+else
+  $stdout.binmode
+  $stdout.print response.to_s
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/ruby-protoc /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/ruby-protoc
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/ruby-protoc	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/bin/ruby-protoc	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,59 @@
+#!/usr/bin/env ruby
+
+begin
+  require 'rubygems'
+rescue LoadError
+end
+
+require 'optparse'
+require 'tempfile'
+
+ruby_out = "."
+include_dirs = []
+
+require 'protocol_buffers'
+require 'protocol_buffers/compiler'
+
+opts = OptionParser.new
+opts.banner = <<BANNER
+Usage: #{opts.program_name} [OPTION] PROTO_FILES
+Parse PROTO_FILES and generate output based on the options given:
+BANNER
+opts.version = ProtocolBuffers::VERSION
+
+opts.on("-o", "--ruby_out", "=OUT_DIR",
+        "generates ruby code in OUT_DIR", "[defaults to pwd]",
+        String) { |val| ruby_out = val }
+opts.on("-I", "--proto_path", "=PATH",
+        "Specify a directory to search for includes/imports.") { |val| include_dirs << val }
+opts.on_tail("-h", "--help") { puts opts; exit }
+
+rest = opts.parse(ARGV)
+filenames = rest
+
+(puts "Missing input file.\n\n"; puts opts; exit) if filenames.empty?
+
+protocfile = Tempfile.new("ruby-protoc")
+protocfile.binmode
+ProtocolBuffers::Compiler.compile(protocfile.path, filenames, :include_dirs => include_dirs)
+descriptor_set = Google::Protobuf::FileDescriptorSet.parse(protocfile)
+protocfile.close(true)
+
+if ruby_out
+  require 'protocol_buffers/compiler/file_descriptor_to_ruby'
+end
+
+descriptor_set.file.each do |file_descriptor|
+
+  fullpath = filenames[filenames.index{|path| path.include? file_descriptor.name}]
+
+  if ruby_out
+    path = File.join(ruby_out,File.dirname(fullpath),File.basename(file_descriptor.name, ".proto") + ".pb.rb")
+    FileUtils.mkpath(File.dirname(path)) unless File.directory?(File.dirname(path))
+    File.open(path, "wb") do |file|
+      dumper = FileDescriptorToRuby.new(file_descriptor)
+      dumper.write(file)
+    end
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Changelog.md /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Changelog.md
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Changelog.md	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Changelog.md	2020-08-31 15:47:26.408000000 +0800
@@ -0,0 +1,84 @@
+# Change Log
+All notable changes to this project will be documented in this file.
+
+## 1.6.1 - 2014-09-24
+### Changed
+- Fix gem packaging error.
+
+## 1.6.0 - 2014-09-22
+### Added
+- More metaprogramming support via `get_expected_field`, `get_optional_field`.
+- Ruby 2.1 support.
+- Protocol Buffers text format support.
+
+### Changed
+- Fixed Windows line ending bug in encoder.
+- README syntax highlighting.
+
+### Removed
+- Dropped Ruby 1.8.7 support.
+
+## 1.5.1 - 2013-10-28
+### Added
+- Better value semantics for `Message`, including `==`, `eql?`, and `hash`.
+
+## 1.5.0 - 2013-09-19
+### Added
+- `Message#to_hash`
+- Service and RPC classes, as a common interface for other libraries to build on.
+
+### Changed
+- Fix for repeated fields being set to itself.
+
+## 1.4.1 - 2013-07-19
+### Changed
+- Fix for frozen strings as input.
+
+## 1.4.0 - 2013-06-18
+### Added
+- Support protobuf groups.
+- Add new executable protoc-gen-ruby, for the new protoc plugin support.
+
+## 1.3.3 - 2013-03-22
+### Added
+- Validate UTF8 while encoding.
+- Support packed fields.
+
+## 1.3.1 - 2013-02-17
+### Added
+- Move deactivated varint c extension to a separate gem.
+- Use the varint gem, if it has been loaded.
+
+## 1.3.0 - 2013-01-17
+### Added
+- Improved documentation and README.
+
+## 1.2.3.beta2 - 2012-12-18
+### Added
+- Better error reporting while parsing invalid messages.
+- UTF-8 validation of string fields in ruby 1.9+.
+
+### Changed
+- Fixed 32-bit negative numbers.
+- Fix encoding of strings in parsed messages.
+- Fix for recursive message types.
+
+## 1.2.1 - 2011-10-01
+### Added
+- Translate package names to submodules.
+- Mirror packages as directory structure.
+
+## 1.1.0 - 2011-09-19
+### Removed
+- Remove package unloading support.
+
+## 1.0.1 - 2011-03-20
+### Added
+- Treat unknown enum values as unknown fields.
+
+## 1.0.0
+
+## 0.8.5
+### Added
+- Add support for Microsoft Windows (tested on Windows 7)
+- Fix StringIO encoding issues on Ruby 1.9.2 by explicitly setting binary encoding.
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/CHANGELOG.md /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/CHANGELOG.md
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/CHANGELOG.md	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/CHANGELOG.md	2020-08-31 15:47:26.408000000 +0800
@@ -0,0 +1,84 @@
+# Change Log
+All notable changes to this project will be documented in this file.
+
+## 1.6.1 - 2014-09-24
+### Changed
+- Fix gem packaging error.
+
+## 1.6.0 - 2014-09-22
+### Added
+- More metaprogramming support via `get_expected_field`, `get_optional_field`.
+- Ruby 2.1 support.
+- Protocol Buffers text format support.
+
+### Changed
+- Fixed Windows line ending bug in encoder.
+- README syntax highlighting.
+
+### Removed
+- Dropped Ruby 1.8.7 support.
+
+## 1.5.1 - 2013-10-28
+### Added
+- Better value semantics for `Message`, including `==`, `eql?`, and `hash`.
+
+## 1.5.0 - 2013-09-19
+### Added
+- `Message#to_hash`
+- Service and RPC classes, as a common interface for other libraries to build on.
+
+### Changed
+- Fix for repeated fields being set to itself.
+
+## 1.4.1 - 2013-07-19
+### Changed
+- Fix for frozen strings as input.
+
+## 1.4.0 - 2013-06-18
+### Added
+- Support protobuf groups.
+- Add new executable protoc-gen-ruby, for the new protoc plugin support.
+
+## 1.3.3 - 2013-03-22
+### Added
+- Validate UTF8 while encoding.
+- Support packed fields.
+
+## 1.3.1 - 2013-02-17
+### Added
+- Move deactivated varint c extension to a separate gem.
+- Use the varint gem, if it has been loaded.
+
+## 1.3.0 - 2013-01-17
+### Added
+- Improved documentation and README.
+
+## 1.2.3.beta2 - 2012-12-18
+### Added
+- Better error reporting while parsing invalid messages.
+- UTF-8 validation of string fields in ruby 1.9+.
+
+### Changed
+- Fixed 32-bit negative numbers.
+- Fix encoding of strings in parsed messages.
+- Fix for recursive message types.
+
+## 1.2.1 - 2011-10-01
+### Added
+- Translate package names to submodules.
+- Mirror packages as directory structure.
+
+## 1.1.0 - 2011-09-19
+### Removed
+- Remove package unloading support.
+
+## 1.0.1 - 2011-03-20
+### Added
+- Treat unknown enum values as unknown fields.
+
+## 1.0.0
+
+## 0.8.5
+### Added
+- Add support for Microsoft Windows (tested on Windows 7)
+- Fix StringIO encoding issues on Ruby 1.9.2 by explicitly setting binary encoding.
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/changelog /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/changelog
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/changelog	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/changelog	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,105 @@
+protobuf-ruby (0.8.4) etch; urgency=low
+
+  * Fix decoding of varints into signed int32/int64 fields
+
+ -- Brian Palmer <brian@mozy.com>  Mon, 17 May 2010 22:10:42 +0000
+
+protobuf-ruby (0.8.3) etch; urgency=low
+
+  * fix for ruby 1.8 <-> 1.9 compat
+
+ -- Brian Palmer <brian@mozy.com>  Thu,  4 Feb 2010 00:02:23 +0000
+
+protobuf-ruby (0.8.2) etch; urgency=low
+
+  * Fix deb package for real. I think. Supporting both deb and gem is
+    tricky.
+
+ -- Brian Palmer <brian@mozy.com>  Tue,  2 Feb 2010 22:11:43 +0000
+
+protobuf-ruby (0.8.1) etch; urgency=low
+
+  * whoops fix deb install
+
+ -- Brian Palmer <brian@mozy.com>  Tue,  2 Feb 2010 21:35:43 +0000
+
+protobuf-ruby (0.8.0) etch; urgency=low
+
+  * fix whitespace
+  * Remove the pure-ruby experimental compiler.
+  * Updated bootstrapping step, and refactored enum support for easier
+    include.
+  * WIP D protobuf compiler
+  * Update README, add empty LICENSE, update Rakefile
+  * Remove support for compiling D protobufs from binary (no runtime
+    yet)
+  * gitignore update
+  * new name: s/protobuf/protocol_buffers and s/Protobuf/ProtocolBuffers
+  * update README with feature list
+  * add compiler helper methods and starting on some tests
+  * Add RDoc documentation to the Message class.
+  * More tests
+  * more tests
+  * More field and runtime tests
+  * Handle .proto files without a package specified
+  * update readme example
+  * more documentation
+  * Example: JSON-to-Protobuf and back
+  * test for unknown fields
+  * Drop InvalidFieldValue exception class, separate type checking/value
+    checking.
+  * validate required fields and improve validation on deserialization
+  * Refactor serialization/deserialization to not be so weird.
+  * dir rename: s/message/runtime
+  * Fix sub-message initialization to work like python.
+  * Type check repeated fields using an Array subclass as a proxy.
+  * make sure we always give protoc a -I option for the input file
+    dir(s)
+  * Version bump to 0.0.0
+  * clean up gem/rake/rdoc/rspec infrastructure using the Jeweler
+    library
+  * improved rcov test coverage, and prune a bit of unused code
+  * store and pass on unknown fields when re-serializing a message
+  * README update
+  * fixing deb dependency for ubuntu
+  * fix deb build
+
+ -- Brian Palmer <brian@mozy.com>  Fri, 29 Jan 2010 17:05:06 +0000
+
+protobuf-ruby (0.1.10) etch; urgency=low
+
+  * Support for imports.
+  * Merge branch 'master' of git@labs.dechocorp.com:ruby-protobufs
+  * maintenance work
+
+ -- Brian Palmer <brianp@decho.com>  Fri, 25 Sep 2009 21:26:05 +0000
+
+protobuf-ruby (0.1.9) unstable; urgency=low
+
+  * fix code generation outputting empty case statement (not allowed in ruby)
+
+ -- Brian Palmer <brianp@decho.com>  Fri, 11 Sep 2009 10:58:17 -0600
+
+protobuf-ruby (0.1.8) unstable; urgency=low
+
+  * support for float and double fields
+
+ -- Brian Palmer <brianp@decho.com>  Wed, 29 July 2009 16:36:15 -0600
+
+protobuf-ruby (0.1.7) unstable; urgency=low
+
+  * faster runtime and some code fixes
+
+ -- Brian Palmer <brianp@decho.com>  Wed, 29 July 2009 16:04:03 -0600
+
+protobuf-ruby (0.1.5) unstable; urgency=low
+
+  * deb fixes and generated file missing require fix
+
+ -- Brian Palmer <brian@cerebus.bds>  Sat, 30 May 2009 22:44:14 -0600
+
+protobuf-ruby (0.1.0) unstable; urgency=low
+
+  * First stab at packaging.
+
+ -- Brian Palmer <brian@mozy.com>  Sat, 30 May 2009 21:24:00 -0700
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/compatability /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/compatability
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/compatability	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/compatability	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1 @@
+4
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/control /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/control
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/control	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/control	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,12 @@
+Source: protobuf-ruby
+Section: non-free/net
+Maintainer: Brian Palmer <brian@mozy.com>
+Priority: optional
+Architecture: all
+Build-Depends: debhelper (>= 4), ruby1.8, ruby1.8-dev
+
+Package: libprotobuf-ruby1.8
+Architecture: any
+Depends: ruby1.8, protobuf | protobuf-compiler
+Description: Ruby implementation of a compiler and runtime for Google Protocol
+ Buffers.
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/libprotobuf-ruby1.8.install /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/libprotobuf-ruby1.8.install
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/libprotobuf-ruby1.8.install	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/libprotobuf-ruby1.8.install	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,7 @@
+debian/protocol_buffers.rb /usr/lib/ruby/1.8/
+bin/ruby-protoc            /usr/bin
+VERSION                    /usr/lib/ruby/1.8/protocol_buffers
+LICENSE                    /usr/lib/ruby/1.8/protocol_buffers
+README                     /usr/lib/ruby/1.8/protocol_buffers
+examples                   /usr/lib/ruby/1.8/protocol_buffers
+lib                        /usr/lib/ruby/1.8/protocol_buffers
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/protocol_buffers.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/protocol_buffers.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/protocol_buffers.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/protocol_buffers.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,3 @@
+$LOAD_PATH << File.join(File.dirname(__FILE__), "protocol_buffers", "lib")
+
+load(File.join(File.dirname(__FILE__), "protocol_buffers", "lib", "protocol_buffers.rb"))
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/rules /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/rules
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/rules	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/debian/rules	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,13 @@
+#!/usr/bin/make -f
+
+include /usr/share/cdbs/1/rules/debhelper.mk
+
+build/libprotobuf-ruby1.8::
+	-mv ext/extconf.disabled.rb ext/extconf.rb
+	cd ext && ruby1.8 extconf.rb --prefix=$(CURDIR)/debian/libprotobuf-ruby1.8/usr
+
+cleanbuilddir/libprotobuf-ruby1.8::
+	-cd ext && make clean && rm Makefile
+
+install/libprotobuf-ruby1.8::
+	cd ext && DESTDIR=$(CURDIR)/debian/libprotobuf-ruby1.8 make install
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.document /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.document
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.document	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.document	2020-08-31 15:47:26.408000000 +0800
@@ -0,0 +1,3 @@
+README
+lib/**/*.rb
+LICENSE
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/examples/json_protobuf.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/examples/json_protobuf.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/examples/json_protobuf.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/examples/json_protobuf.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,90 @@
+#!/usr/bin/env ruby
+
+# Example JSON/Protocol Buffer conversion using reflection.
+# Requires the json gem.
+
+begin
+  require 'rubygems'
+rescue LoadError; end
+
+require 'json'
+$LOAD_PATH << File.dirname(__FILE__) + '/../lib'
+require 'protocol_buffers'
+require 'protocol_buffers/compiler'
+
+class ProtocolBuffers::Message
+
+  def to_json(*args)
+    hash = {'json_class' => self.class.name}
+
+    # simpler version, includes all fields in the output, using the default
+    # values if unset. also includes empty repeated fields as empty arrays.
+    # fields.each do |tag, field|
+    #   hash[field.name] = value_for_tag(field.tag)
+    # end
+
+    # prettier output, only includes non-empty repeated fields and set fields
+    fields.each do |tag, field|
+      if field.repeated?
+        value = value_for_tag(field.tag)
+        hash[field.name] = value unless value.empty?
+      else
+        hash[field.name] = value_for_tag(field.tag) if value_for_tag?(field.tag)
+      end
+    end
+    hash.to_json(*args)
+  end
+
+  def self.json_create(hash)
+    hash.delete('json_class')
+
+    # initialize takes a hash of { attribute_name => value } so you can just
+    # pass the hash into the constructor. but we're supposed to be showing off
+    # reflection, here. plus, that raises an exception if there is an unknown
+    # key in the hash.
+    # new(hash)
+
+    message = new
+    fields.each do |tag, field|
+      if value = hash[field.name.to_s]
+        message.set_value_for_tag(field.tag, value)
+      end
+    end
+    message
+  end
+end
+
+# and that's it... all the rest of this code is just to show it off
+
+ProtocolBuffers::Compiler.compile_and_load_string <<-EOS
+message Foo {
+  enum Bar {
+    A = 1;
+    B = 2;
+    C = 3;
+  };
+
+  message Baz {
+    optional string subby = 1;
+  };
+
+  repeated Bar bars = 1;
+  optional string name = 2;
+  repeated string bazzesses = 3;
+  optional Baz subbaz = 4;
+};
+EOS
+
+foo = Foo.new(:name => 'foo1')
+foo.bars += [Foo::Bar::A, Foo::Bar::A, Foo::Bar::C]
+foo.subbaz = Foo::Baz.new(:subby => "subby!")
+
+puts "Input protobuf:", foo.inspect, ""
+
+json = JSON.pretty_generate(foo)
+puts "JSON representation:", json, ""
+
+foo2 = JSON.parse(json)
+puts "Parsed from JSON:", foo2.inspect, ""
+
+puts "Are they equal: #{foo == foo2}"
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile	2020-08-31 15:47:26.408000000 +0800
@@ -0,0 +1,8 @@
+source "https://rubygems.org"
+
+# Specify your gem's dependencies in ruby-protocol-buffers.gemspec
+gemspec
+
+group :varint do
+  gem 'varint'
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile.no_varint /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile.no_varint
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile.no_varint	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Gemfile.no_varint	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,4 @@
+source "https://rubygems.org"
+
+# Specify your gem's dependencies in ruby-protocol-buffers.gemspec
+gemspec
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.gitignore /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.gitignore
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.gitignore	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/.gitignore	2020-08-31 15:47:26.408000000 +0800
@@ -0,0 +1,15 @@
+.rvmrc
+.yardoc/
+/*.d
+/*.pb.rb
+/*.proto
+Gemfile.lock
+coverage
+d/*
+doc/*
+pkg
+prof
+rdoc
+tests
+tmp
+/lib/protocol_buffers/runtime/text_parser.rb
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.pb.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,285 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Google
+  module Protobuf
+    # forward declarations
+    class FileDescriptorSet < ::ProtocolBuffers::Message; end
+    class FileDescriptorProto < ::ProtocolBuffers::Message; end
+    class DescriptorProto < ::ProtocolBuffers::Message; end
+    class FieldDescriptorProto < ::ProtocolBuffers::Message; end
+    class EnumDescriptorProto < ::ProtocolBuffers::Message; end
+    class EnumValueDescriptorProto < ::ProtocolBuffers::Message; end
+    class ServiceDescriptorProto < ::ProtocolBuffers::Message; end
+    class MethodDescriptorProto < ::ProtocolBuffers::Message; end
+    class FileOptions < ::ProtocolBuffers::Message; end
+    class MessageOptions < ::ProtocolBuffers::Message; end
+    class FieldOptions < ::ProtocolBuffers::Message; end
+    class EnumOptions < ::ProtocolBuffers::Message; end
+    class EnumValueOptions < ::ProtocolBuffers::Message; end
+    class ServiceOptions < ::ProtocolBuffers::Message; end
+    class MethodOptions < ::ProtocolBuffers::Message; end
+    class UninterpretedOption < ::ProtocolBuffers::Message; end
+    class SourceCodeInfo < ::ProtocolBuffers::Message; end
+
+    class FileDescriptorSet < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.FileDescriptorSet"
+
+      repeated ::Google::Protobuf::FileDescriptorProto, :file, 1
+    end
+
+    class FileDescriptorProto < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.FileDescriptorProto"
+
+      optional :string, :name, 1
+      optional :string, :package, 2
+      repeated :string, :dependency, 3
+      repeated :int32, :public_dependency, 10
+      repeated :int32, :weak_dependency, 11
+      repeated ::Google::Protobuf::DescriptorProto, :message_type, 4
+      repeated ::Google::Protobuf::EnumDescriptorProto, :enum_type, 5
+      repeated ::Google::Protobuf::ServiceDescriptorProto, :service, 6
+      repeated ::Google::Protobuf::FieldDescriptorProto, :extension, 7
+      optional ::Google::Protobuf::FileOptions, :options, 8
+      optional ::Google::Protobuf::SourceCodeInfo, :source_code_info, 9
+    end
+
+    class DescriptorProto < ::ProtocolBuffers::Message
+      # forward declarations
+      class ExtensionRange < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "google.protobuf.DescriptorProto"
+
+      # nested messages
+      class ExtensionRange < ::ProtocolBuffers::Message
+        set_fully_qualified_name "google.protobuf.DescriptorProto.ExtensionRange"
+
+        optional :int32, :start, 1
+        optional :int32, :end, 2
+      end
+
+      optional :string, :name, 1
+      repeated ::Google::Protobuf::FieldDescriptorProto, :field, 2
+      repeated ::Google::Protobuf::FieldDescriptorProto, :extension, 6
+      repeated ::Google::Protobuf::DescriptorProto, :nested_type, 3
+      repeated ::Google::Protobuf::EnumDescriptorProto, :enum_type, 4
+      repeated ::Google::Protobuf::DescriptorProto::ExtensionRange, :extension_range, 5
+      optional ::Google::Protobuf::MessageOptions, :options, 7
+    end
+
+    class FieldDescriptorProto < ::ProtocolBuffers::Message
+      # forward declarations
+
+      # enums
+      module Type
+        include ::ProtocolBuffers::Enum
+
+        set_fully_qualified_name "google.protobuf.FieldDescriptorProto.Type"
+
+        TYPE_DOUBLE = 1
+        TYPE_FLOAT = 2
+        TYPE_INT64 = 3
+        TYPE_UINT64 = 4
+        TYPE_INT32 = 5
+        TYPE_FIXED64 = 6
+        TYPE_FIXED32 = 7
+        TYPE_BOOL = 8
+        TYPE_STRING = 9
+        TYPE_GROUP = 10
+        TYPE_MESSAGE = 11
+        TYPE_BYTES = 12
+        TYPE_UINT32 = 13
+        TYPE_ENUM = 14
+        TYPE_SFIXED32 = 15
+        TYPE_SFIXED64 = 16
+        TYPE_SINT32 = 17
+        TYPE_SINT64 = 18
+      end
+
+      module Label
+        include ::ProtocolBuffers::Enum
+
+        set_fully_qualified_name "google.protobuf.FieldDescriptorProto.Label"
+
+        LABEL_OPTIONAL = 1
+        LABEL_REQUIRED = 2
+        LABEL_REPEATED = 3
+      end
+
+      set_fully_qualified_name "google.protobuf.FieldDescriptorProto"
+
+      optional :string, :name, 1
+      optional :int32, :number, 3
+      optional ::Google::Protobuf::FieldDescriptorProto::Label, :label, 4
+      optional ::Google::Protobuf::FieldDescriptorProto::Type, :type, 5
+      optional :string, :type_name, 6
+      optional :string, :extendee, 2
+      optional :string, :default_value, 7
+      optional ::Google::Protobuf::FieldOptions, :options, 8
+    end
+
+    class EnumDescriptorProto < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.EnumDescriptorProto"
+
+      optional :string, :name, 1
+      repeated ::Google::Protobuf::EnumValueDescriptorProto, :value, 2
+      optional ::Google::Protobuf::EnumOptions, :options, 3
+    end
+
+    class EnumValueDescriptorProto < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.EnumValueDescriptorProto"
+
+      optional :string, :name, 1
+      optional :int32, :number, 2
+      optional ::Google::Protobuf::EnumValueOptions, :options, 3
+    end
+
+    class ServiceDescriptorProto < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.ServiceDescriptorProto"
+
+      optional :string, :name, 1
+      repeated ::Google::Protobuf::MethodDescriptorProto, :method, 2
+      optional ::Google::Protobuf::ServiceOptions, :options, 3
+    end
+
+    class MethodDescriptorProto < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.MethodDescriptorProto"
+
+      optional :string, :name, 1
+      optional :string, :input_type, 2
+      optional :string, :output_type, 3
+      optional ::Google::Protobuf::MethodOptions, :options, 4
+    end
+
+    class FileOptions < ::ProtocolBuffers::Message
+      # forward declarations
+
+      # enums
+      module OptimizeMode
+        include ::ProtocolBuffers::Enum
+
+        set_fully_qualified_name "google.protobuf.FileOptions.OptimizeMode"
+
+        SPEED = 1
+        CODE_SIZE = 2
+        LITE_RUNTIME = 3
+      end
+
+      set_fully_qualified_name "google.protobuf.FileOptions"
+
+      optional :string, :java_package, 1
+      optional :string, :java_outer_classname, 8
+      optional :bool, :java_multiple_files, 10, :default => false
+      optional :bool, :java_generate_equals_and_hash, 20, :default => false
+      optional ::Google::Protobuf::FileOptions::OptimizeMode, :optimize_for, 9, :default => ::Google::Protobuf::FileOptions::OptimizeMode::SPEED
+      optional :string, :go_package, 11
+      optional :bool, :cc_generic_services, 16, :default => false
+      optional :bool, :java_generic_services, 17, :default => false
+      optional :bool, :py_generic_services, 18, :default => false
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class MessageOptions < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.MessageOptions"
+
+      optional :bool, :message_set_wire_format, 1, :default => false
+      optional :bool, :no_standard_descriptor_accessor, 2, :default => false
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class FieldOptions < ::ProtocolBuffers::Message
+      # forward declarations
+
+      # enums
+      module CType
+        include ::ProtocolBuffers::Enum
+
+        set_fully_qualified_name "google.protobuf.FieldOptions.CType"
+
+        STRING = 0
+        CORD = 1
+        STRING_PIECE = 2
+      end
+
+      set_fully_qualified_name "google.protobuf.FieldOptions"
+
+      optional ::Google::Protobuf::FieldOptions::CType, :ctype, 1, :default => ::Google::Protobuf::FieldOptions::CType::STRING
+      optional :bool, :packed, 2
+      optional :bool, :lazy, 5, :default => false
+      optional :bool, :deprecated, 3, :default => false
+      optional :string, :experimental_map_key, 9
+      optional :bool, :weak, 10, :default => false
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class EnumOptions < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.EnumOptions"
+
+      optional :bool, :allow_alias, 2, :default => true
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class EnumValueOptions < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.EnumValueOptions"
+
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class ServiceOptions < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.ServiceOptions"
+
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class MethodOptions < ::ProtocolBuffers::Message
+      set_fully_qualified_name "google.protobuf.MethodOptions"
+
+      repeated ::Google::Protobuf::UninterpretedOption, :uninterpreted_option, 999
+    end
+
+    class UninterpretedOption < ::ProtocolBuffers::Message
+      # forward declarations
+      class NamePart < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "google.protobuf.UninterpretedOption"
+
+      # nested messages
+      class NamePart < ::ProtocolBuffers::Message
+        set_fully_qualified_name "google.protobuf.UninterpretedOption.NamePart"
+
+        required :string, :name_part, 1
+        required :bool, :is_extension, 2
+      end
+
+      repeated ::Google::Protobuf::UninterpretedOption::NamePart, :name, 2
+      optional :string, :identifier_value, 3
+      optional :uint64, :positive_int_value, 4
+      optional :int64, :negative_int_value, 5
+      optional :double, :double_value, 6
+      optional :bytes, :string_value, 7
+      optional :string, :aggregate_value, 8
+    end
+
+    class SourceCodeInfo < ::ProtocolBuffers::Message
+      # forward declarations
+      class Location < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "google.protobuf.SourceCodeInfo"
+
+      # nested messages
+      class Location < ::ProtocolBuffers::Message
+        set_fully_qualified_name "google.protobuf.SourceCodeInfo.Location"
+
+        repeated :int32, :path, 1, :packed => true
+        repeated :int32, :span, 2, :packed => true
+        optional :string, :leading_comments, 3
+        optional :string, :trailing_comments, 4
+      end
+
+      repeated ::Google::Protobuf::SourceCodeInfo::Location, :location, 1
+    end
+
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/descriptor.proto	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,620 @@
+// Protocol Buffers - Google's data interchange format
+// Copyright 2008 Google Inc.  All rights reserved.
+// http://code.google.com/p/protobuf/
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//     * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+// Author: kenton@google.com (Kenton Varda)
+//  Based on original Protocol Buffers design by
+//  Sanjay Ghemawat, Jeff Dean, and others.
+//
+// The messages in this file describe the definitions found in .proto files.
+// A valid .proto file can be translated directly to a FileDescriptorProto
+// without any other information (e.g. without reading its imports).
+
+
+
+package google.protobuf;
+option java_package = "com.google.protobuf";
+option java_outer_classname = "DescriptorProtos";
+
+// descriptor.proto must be optimized for speed because reflection-based
+// algorithms don't work during bootstrapping.
+option optimize_for = SPEED;
+
+// The protocol compiler can output a FileDescriptorSet containing the .proto
+// files it parses.
+message FileDescriptorSet {
+  repeated FileDescriptorProto file = 1;
+}
+
+// Describes a complete .proto file.
+message FileDescriptorProto {
+  optional string name = 1;       // file name, relative to root of source tree
+  optional string package = 2;    // e.g. "foo", "foo.bar", etc.
+
+  // Names of files imported by this file.
+  repeated string dependency = 3;
+  // Indexes of the public imported files in the dependency list above.
+  repeated int32 public_dependency = 10;
+  // Indexes of the weak imported files in the dependency list.
+  // For Google-internal migration only. Do not use.
+  repeated int32 weak_dependency = 11;
+
+  // All top-level definitions in this file.
+  repeated DescriptorProto message_type = 4;
+  repeated EnumDescriptorProto enum_type = 5;
+  repeated ServiceDescriptorProto service = 6;
+  repeated FieldDescriptorProto extension = 7;
+
+  optional FileOptions options = 8;
+
+  // This field contains optional information about the original source code.
+  // You may safely remove this entire field whithout harming runtime
+  // functionality of the descriptors -- the information is needed only by
+  // development tools.
+  optional SourceCodeInfo source_code_info = 9;
+}
+
+// Describes a message type.
+message DescriptorProto {
+  optional string name = 1;
+
+  repeated FieldDescriptorProto field = 2;
+  repeated FieldDescriptorProto extension = 6;
+
+  repeated DescriptorProto nested_type = 3;
+  repeated EnumDescriptorProto enum_type = 4;
+
+  message ExtensionRange {
+    optional int32 start = 1;
+    optional int32 end = 2;
+  }
+  repeated ExtensionRange extension_range = 5;
+
+  optional MessageOptions options = 7;
+}
+
+// Describes a field within a message.
+message FieldDescriptorProto {
+  enum Type {
+    // 0 is reserved for errors.
+    // Order is weird for historical reasons.
+    TYPE_DOUBLE         = 1;
+    TYPE_FLOAT          = 2;
+    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
+    // negative values are likely.
+    TYPE_INT64          = 3;
+    TYPE_UINT64         = 4;
+    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
+    // negative values are likely.
+    TYPE_INT32          = 5;
+    TYPE_FIXED64        = 6;
+    TYPE_FIXED32        = 7;
+    TYPE_BOOL           = 8;
+    TYPE_STRING         = 9;
+    TYPE_GROUP          = 10;  // Tag-delimited aggregate.
+    TYPE_MESSAGE        = 11;  // Length-delimited aggregate.
+
+    // New in version 2.
+    TYPE_BYTES          = 12;
+    TYPE_UINT32         = 13;
+    TYPE_ENUM           = 14;
+    TYPE_SFIXED32       = 15;
+    TYPE_SFIXED64       = 16;
+    TYPE_SINT32         = 17;  // Uses ZigZag encoding.
+    TYPE_SINT64         = 18;  // Uses ZigZag encoding.
+  };
+
+  enum Label {
+    // 0 is reserved for errors
+    LABEL_OPTIONAL      = 1;
+    LABEL_REQUIRED      = 2;
+    LABEL_REPEATED      = 3;
+    // TODO(sanjay): Should we add LABEL_MAP?
+  };
+
+  optional string name = 1;
+  optional int32 number = 3;
+  optional Label label = 4;
+
+  // If type_name is set, this need not be set.  If both this and type_name
+  // are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
+  optional Type type = 5;
+
+  // For message and enum types, this is the name of the type.  If the name
+  // starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
+  // rules are used to find the type (i.e. first the nested types within this
+  // message are searched, then within the parent, on up to the root
+  // namespace).
+  optional string type_name = 6;
+
+  // For extensions, this is the name of the type being extended.  It is
+  // resolved in the same manner as type_name.
+  optional string extendee = 2;
+
+  // For numeric types, contains the original text representation of the value.
+  // For booleans, "true" or "false".
+  // For strings, contains the default text contents (not escaped in any way).
+  // For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
+  // TODO(kenton):  Base-64 encode?
+  optional string default_value = 7;
+
+  optional FieldOptions options = 8;
+}
+
+// Describes an enum type.
+message EnumDescriptorProto {
+  optional string name = 1;
+
+  repeated EnumValueDescriptorProto value = 2;
+
+  optional EnumOptions options = 3;
+}
+
+// Describes a value within an enum.
+message EnumValueDescriptorProto {
+  optional string name = 1;
+  optional int32 number = 2;
+
+  optional EnumValueOptions options = 3;
+}
+
+// Describes a service.
+message ServiceDescriptorProto {
+  optional string name = 1;
+  repeated MethodDescriptorProto method = 2;
+
+  optional ServiceOptions options = 3;
+}
+
+// Describes a method of a service.
+message MethodDescriptorProto {
+  optional string name = 1;
+
+  // Input and output type names.  These are resolved in the same way as
+  // FieldDescriptorProto.type_name, but must refer to a message type.
+  optional string input_type = 2;
+  optional string output_type = 3;
+
+  optional MethodOptions options = 4;
+}
+
+
+// ===================================================================
+// Options
+
+// Each of the definitions above may have "options" attached.  These are
+// just annotations which may cause code to be generated slightly differently
+// or may contain hints for code that manipulates protocol messages.
+//
+// Clients may define custom options as extensions of the *Options messages.
+// These extensions may not yet be known at parsing time, so the parser cannot
+// store the values in them.  Instead it stores them in a field in the *Options
+// message called uninterpreted_option. This field must have the same name
+// across all *Options messages. We then use this field to populate the
+// extensions when we build a descriptor, at which point all protos have been
+// parsed and so all extensions are known.
+//
+// Extension numbers for custom options may be chosen as follows:
+// * For options which will only be used within a single application or
+//   organization, or for experimental options, use field numbers 50000
+//   through 99999.  It is up to you to ensure that you do not use the
+//   same number for multiple options.
+// * For options which will be published and used publicly by multiple
+//   independent entities, e-mail protobuf-global-extension-registry@google.com
+//   to reserve extension numbers. Simply provide your project name (e.g.
+//   Object-C plugin) and your porject website (if available) -- there's no need
+//   to explain how you intend to use them. Usually you only need one extension
+//   number. You can declare multiple options with only one extension number by
+//   putting them in a sub-message. See the Custom Options section of the docs
+//   for examples:
+//   http://code.google.com/apis/protocolbuffers/docs/proto.html#options
+//   If this turns out to be popular, a web service will be set up
+//   to automatically assign option numbers.
+
+
+message FileOptions {
+
+  // Sets the Java package where classes generated from this .proto will be
+  // placed.  By default, the proto package is used, but this is often
+  // inappropriate because proto packages do not normally start with backwards
+  // domain names.
+  optional string java_package = 1;
+
+
+  // If set, all the classes from the .proto file are wrapped in a single
+  // outer class with the given name.  This applies to both Proto1
+  // (equivalent to the old "--one_java_file" option) and Proto2 (where
+  // a .proto always translates to a single class, but you may want to
+  // explicitly choose the class name).
+  optional string java_outer_classname = 8;
+
+  // If set true, then the Java code generator will generate a separate .java
+  // file for each top-level message, enum, and service defined in the .proto
+  // file.  Thus, these types will *not* be nested inside the outer class
+  // named by java_outer_classname.  However, the outer class will still be
+  // generated to contain the file's getDescriptor() method as well as any
+  // top-level extensions defined in the file.
+  optional bool java_multiple_files = 10 [default=false];
+
+  // If set true, then the Java code generator will generate equals() and
+  // hashCode() methods for all messages defined in the .proto file. This is
+  // purely a speed optimization, as the AbstractMessage base class includes
+  // reflection-based implementations of these methods.
+  optional bool java_generate_equals_and_hash = 20 [default=false];
+
+  // Generated classes can be optimized for speed or code size.
+  enum OptimizeMode {
+    SPEED = 1;        // Generate complete code for parsing, serialization,
+                      // etc.
+    CODE_SIZE = 2;    // Use ReflectionOps to implement these methods.
+    LITE_RUNTIME = 3; // Generate code using MessageLite and the lite runtime.
+  }
+  optional OptimizeMode optimize_for = 9 [default=SPEED];
+
+  // Sets the Go package where structs generated from this .proto will be
+  // placed.  There is no default.
+  optional string go_package = 11;
+
+
+
+  // Should generic services be generated in each language?  "Generic" services
+  // are not specific to any particular RPC system.  They are generated by the
+  // main code generators in each language (without additional plugins).
+  // Generic services were the only kind of service generation supported by
+  // early versions of proto2.
+  //
+  // Generic services are now considered deprecated in favor of using plugins
+  // that generate code specific to your particular RPC system.  Therefore,
+  // these default to false.  Old code which depends on generic services should
+  // explicitly set them to true.
+  optional bool cc_generic_services = 16 [default=false];
+  optional bool java_generic_services = 17 [default=false];
+  optional bool py_generic_services = 18 [default=false];
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message MessageOptions {
+  // Set true to use the old proto1 MessageSet wire format for extensions.
+  // This is provided for backwards-compatibility with the MessageSet wire
+  // format.  You should not use this for any other reason:  It's less
+  // efficient, has fewer features, and is more complicated.
+  //
+  // The message must be defined exactly as follows:
+  //   message Foo {
+  //     option message_set_wire_format = true;
+  //     extensions 4 to max;
+  //   }
+  // Note that the message cannot have any defined fields; MessageSets only
+  // have extensions.
+  //
+  // All extensions of your type must be singular messages; e.g. they cannot
+  // be int32s, enums, or repeated messages.
+  //
+  // Because this is an option, the above two restrictions are not enforced by
+  // the protocol compiler.
+  optional bool message_set_wire_format = 1 [default=false];
+
+  // Disables the generation of the standard "descriptor()" accessor, which can
+  // conflict with a field of the same name.  This is meant to make migration
+  // from proto1 easier; new code should avoid fields named "descriptor".
+  optional bool no_standard_descriptor_accessor = 2 [default=false];
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message FieldOptions {
+  // The ctype option instructs the C++ code generator to use a different
+  // representation of the field than it normally would.  See the specific
+  // options below.  This option is not yet implemented in the open source
+  // release -- sorry, we'll try to include it in a future version!
+  optional CType ctype = 1 [default = STRING];
+  enum CType {
+    // Default mode.
+    STRING = 0;
+
+    CORD = 1;
+
+    STRING_PIECE = 2;
+  }
+  // The packed option can be enabled for repeated primitive fields to enable
+  // a more efficient representation on the wire. Rather than repeatedly
+  // writing the tag and type for each element, the entire array is encoded as
+  // a single length-delimited blob.
+  optional bool packed = 2;
+
+
+
+  // Should this field be parsed lazily?  Lazy applies only to message-type
+  // fields.  It means that when the outer message is initially parsed, the
+  // inner message's contents will not be parsed but instead stored in encoded
+  // form.  The inner message will actually be parsed when it is first accessed.
+  //
+  // This is only a hint.  Implementations are free to choose whether to use
+  // eager or lazy parsing regardless of the value of this option.  However,
+  // setting this option true suggests that the protocol author believes that
+  // using lazy parsing on this field is worth the additional bookkeeping
+  // overhead typically needed to implement it.
+  //
+  // This option does not affect the public interface of any generated code;
+  // all method signatures remain the same.  Furthermore, thread-safety of the
+  // interface is not affected by this option; const methods remain safe to
+  // call from multiple threads concurrently, while non-const methods continue
+  // to require exclusive access.
+  //
+  //
+  // Note that implementations may choose not to check required fields within
+  // a lazy sub-message.  That is, calling IsInitialized() on the outher message
+  // may return true even if the inner message has missing required fields.
+  // This is necessary because otherwise the inner message would have to be
+  // parsed in order to perform the check, defeating the purpose of lazy
+  // parsing.  An implementation which chooses not to check required fields
+  // must be consistent about it.  That is, for any particular sub-message, the
+  // implementation must either *always* check its required fields, or *never*
+  // check its required fields, regardless of whether or not the message has
+  // been parsed.
+  optional bool lazy = 5 [default=false];
+
+  // Is this field deprecated?
+  // Depending on the target platform, this can emit Deprecated annotations
+  // for accessors, or it will be completely ignored; in the very least, this
+  // is a formalization for deprecating fields.
+  optional bool deprecated = 3 [default=false];
+
+  // EXPERIMENTAL.  DO NOT USE.
+  // For "map" fields, the name of the field in the enclosed type that
+  // is the key for this map.  For example, suppose we have:
+  //   message Item {
+  //     required string name = 1;
+  //     required string value = 2;
+  //   }
+  //   message Config {
+  //     repeated Item items = 1 [experimental_map_key="name"];
+  //   }
+  // In this situation, the map key for Item will be set to "name".
+  // TODO: Fully-implement this, then remove the "experimental_" prefix.
+  optional string experimental_map_key = 9;
+
+  // For Google-internal migration only. Do not use.
+  optional bool weak = 10 [default=false];
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message EnumOptions {
+
+  // Set this option to false to disallow mapping different tag names to a same
+  // value.
+  optional bool allow_alias = 2 [default=true];
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message EnumValueOptions {
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message ServiceOptions {
+
+  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
+  //   framework.  We apologize for hoarding these numbers to ourselves, but
+  //   we were already using them long before we decided to release Protocol
+  //   Buffers.
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+message MethodOptions {
+
+  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
+  //   framework.  We apologize for hoarding these numbers to ourselves, but
+  //   we were already using them long before we decided to release Protocol
+  //   Buffers.
+
+  // The parser stores options it doesn't recognize here. See above.
+  repeated UninterpretedOption uninterpreted_option = 999;
+
+  // Clients can define custom options in extensions of this message. See above.
+  extensions 1000 to max;
+}
+
+
+// A message representing a option the parser does not recognize. This only
+// appears in options protos created by the compiler::Parser class.
+// DescriptorPool resolves these when building Descriptor objects. Therefore,
+// options protos in descriptor objects (e.g. returned by Descriptor::options(),
+// or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
+// in them.
+message UninterpretedOption {
+  // The name of the uninterpreted option.  Each string represents a segment in
+  // a dot-separated name.  is_extension is true iff a segment represents an
+  // extension (denoted with parentheses in options specs in .proto files).
+  // E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
+  // "foo.(bar.baz).qux".
+  message NamePart {
+    required string name_part = 1;
+    required bool is_extension = 2;
+  }
+  repeated NamePart name = 2;
+
+  // The value of the uninterpreted option, in whatever type the tokenizer
+  // identified it as during parsing. Exactly one of these should be set.
+  optional string identifier_value = 3;
+  optional uint64 positive_int_value = 4;
+  optional int64 negative_int_value = 5;
+  optional double double_value = 6;
+  optional bytes string_value = 7;
+  optional string aggregate_value = 8;
+}
+
+// ===================================================================
+// Optional source code info
+
+// Encapsulates information about the original source file from which a
+// FileDescriptorProto was generated.
+message SourceCodeInfo {
+  // A Location identifies a piece of source code in a .proto file which
+  // corresponds to a particular definition.  This information is intended
+  // to be useful to IDEs, code indexers, documentation generators, and similar
+  // tools.
+  //
+  // For example, say we have a file like:
+  //   message Foo {
+  //     optional string foo = 1;
+  //   }
+  // Let's look at just the field definition:
+  //   optional string foo = 1;
+  //   ^       ^^     ^^  ^  ^^^
+  //   a       bc     de  f  ghi
+  // We have the following locations:
+  //   span   path               represents
+  //   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
+  //   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
+  //   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
+  //   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
+  //   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
+  //
+  // Notes:
+  // - A location may refer to a repeated field itself (i.e. not to any
+  //   particular index within it).  This is used whenever a set of elements are
+  //   logically enclosed in a single code segment.  For example, an entire
+  //   extend block (possibly containing multiple extension definitions) will
+  //   have an outer location whose path refers to the "extensions" repeated
+  //   field without an index.
+  // - Multiple locations may have the same path.  This happens when a single
+  //   logical declaration is spread out across multiple places.  The most
+  //   obvious example is the "extend" block again -- there may be multiple
+  //   extend blocks in the same scope, each of which will have the same path.
+  // - A location's span is not always a subset of its parent's span.  For
+  //   example, the "extendee" of an extension declaration appears at the
+  //   beginning of the "extend" block and is shared by all extensions within
+  //   the block.
+  // - Just because a location's span is a subset of some other location's span
+  //   does not mean that it is a descendent.  For example, a "group" defines
+  //   both a type and a field in a single declaration.  Thus, the locations
+  //   corresponding to the type and field and their components will overlap.
+  // - Code which tries to interpret locations should probably be designed to
+  //   ignore those that it doesn't understand, as more types of locations could
+  //   be recorded in the future.
+  repeated Location location = 1;
+  message Location {
+    // Identifies which part of the FileDescriptorProto was defined at this
+    // location.
+    //
+    // Each element is a field number or an index.  They form a path from
+    // the root FileDescriptorProto to the place where the definition.  For
+    // example, this path:
+    //   [ 4, 3, 2, 7, 1 ]
+    // refers to:
+    //   file.message_type(3)  // 4, 3
+    //       .field(7)         // 2, 7
+    //       .name()           // 1
+    // This is because FileDescriptorProto.message_type has field number 4:
+    //   repeated DescriptorProto message_type = 4;
+    // and DescriptorProto.field has field number 2:
+    //   repeated FieldDescriptorProto field = 2;
+    // and FieldDescriptorProto.name has field number 1:
+    //   optional string name = 1;
+    //
+    // Thus, the above path gives the location of a field name.  If we removed
+    // the last element:
+    //   [ 4, 3, 2, 7 ]
+    // this path refers to the whole field declaration (from the beginning
+    // of the label to the terminating semicolon).
+    repeated int32 path = 1 [packed=true];
+
+    // Always has exactly three or four elements: start line, start column,
+    // end line (optional, otherwise assumed same as start line), end column.
+    // These are packed into a single field for efficiency.  Note that line
+    // and column numbers are zero-based -- typically you will want to add
+    // 1 to each before displaying to a user.
+    repeated int32 span = 2 [packed=true];
+
+    // If this SourceCodeInfo represents a complete declaration, these are any
+    // comments appearing before and after the declaration which appear to be
+    // attached to the declaration.
+    //
+    // A series of line comments appearing on consecutive lines, with no other
+    // tokens appearing on those lines, will be treated as a single comment.
+    //
+    // Only the comment content is provided; comment markers (e.g. //) are
+    // stripped out.  For block comments, leading whitespace and an asterisk
+    // will be stripped from the beginning of each line other than the first.
+    // Newlines are included in the output.
+    //
+    // Examples:
+    //
+    //   optional int32 foo = 1;  // Comment attached to foo.
+    //   // Comment attached to bar.
+    //   optional int32 bar = 2;
+    //
+    //   optional string baz = 3;
+    //   // Comment attached to baz.
+    //   // Another line attached to baz.
+    //
+    //   // Comment attached to qux.
+    //   //
+    //   // Another line attached to qux.
+    //   optional double qux = 4;
+    //
+    //   optional string corge = 5;
+    //   /* Block comment attached
+    //    * to corge.  Leading asterisks
+    //    * will be removed. */
+    //   /* Block comment attached to
+    //    * grault. */
+    //   optional int32 grault = 6;
+    optional string leading_comments = 3;
+    optional string trailing_comments = 4;
+  }
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_d.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_d.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_d.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_d.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,195 @@
+require 'protocol_buffers/compiler/descriptor.pb'
+require 'stringio'
+
+class FileDescriptorToD < Struct.new(:descriptor)
+
+  include Google::Protobuf::FieldDescriptorProto::Type
+  include Google::Protobuf::FieldDescriptorProto::Label
+
+  def initialize(descriptor)
+    super
+    @module = descriptor.package_
+    @ns = []
+  end
+
+  def module_name
+    @module
+  end
+
+  def class_name(klass)
+    klass
+  end
+
+  def write(io)
+    @io = io
+
+    @io.write <<HEADER
+// Generated by the protocol buffer compiler. DO NOT EDIT!
+
+static import std.string;
+import protocol_buffers.message;
+
+HEADER
+
+    descriptor.message_type.each do |message|
+      dump_message(message)
+    end
+  end
+
+  protected
+
+  def dump_message(message)
+    in_namespace("final class", class_name(message.name), " : Message") do
+
+      line %{static const #{class_name(message.name)} default_instance;}
+      line %{string typeName() { return "#{class_name(message.name)}"; }}
+
+      line %{// nested messages} unless message.nested_type.empty?
+      message.nested_type.each { |inner| dump_message(inner) }
+
+      line %{// nested enums} unless message.enum_type.empty?
+      message.enum_type.each { |inner| dump_enum(inner) }
+
+      singular_fields = message.field.find_all { |f|
+        f.label == LABEL_OPTIONAL || f.label == LABEL_REQUIRED }
+      repeated_fields = message.field.find_all { |f| f.label == LABEL_REPEATED }
+
+      line
+
+      singular_fields.each { |f| define_field(f, false) }
+      repeated_fields.each { |f| define_field(f, true) }
+
+      line %{enum __tags { #{message.field.map { |f| "#{f.name} = #{f.number}" }.join(", ")} }}
+
+      unless singular_fields.empty?
+        in_namespace("private", "") do
+          line "ubyte[(#{singular_fields.size}/32)+1] _tags;"
+          line %{void _set_bit(uint idx)   { _tags[idx / 32] |= (1u << (idx % 32)); }}
+          line %{void _clear_bit(uint idx) { _tags[idx / 32] &= ~(1u << (idx % 32)); }}
+          line %{bool _check_bit(uint idx) { return (_tags[idx / 32] & (1u << (idx % 32))) != 0; }}
+        end
+        line %{enum __bits { #{m=0; singular_fields.map { |f| "#{f.name} = #{m+=1}" }.join(", ")} }} unless singular_fields.empty?
+      end
+
+      in_namespace("void clear()", "") do
+        message.field.each { |f| line %{clear_#{f.name}();} }
+      end
+
+      in_namespace("bool mergeFromString(string s)", "") do
+        body = <<-BODY
+        uint i;
+        while(i < s.length) {
+          long nextTag = decodeVarint(s[i++]);
+          long tag = nextTag >> 3;
+          uint wire_type = nextTag & 0b111;
+          switch(tag) {
+          }
+        }
+        return true;
+        BODY
+
+        body.each_line { |l| line(l.sub("        ", '').chomp) }
+      end
+
+      line
+    end
+  end
+
+  def field_typename(field)
+    (TYPE_MAPPING[field.type] || field.type_name).sub(/^.#{module_name}/, '')
+  end
+
+  def define_field(field, repeated)
+    typename = field_typename(field)
+    if repeated
+      line "private #{typename}[] _#{field.name};"
+      line "#{typename}[] #{field.name}() { return _#{field.name}; }"
+    else
+      line "private #{typename} _#{field.name};"
+      line "#{typename} #{field.name}() { return _#{field.name}; }"
+    end
+
+    if !repeated
+      line "static const #{typename} default_#{field.name} = #{default_value(field)};"
+      line "bool has_#{field.name}() { return _check_bit(__bits.#{field.name}); }"
+      line "void #{field.name}(#{typename} val) { _set_bit(__bits.#{field.name}); _#{field.name} = val; }"
+    end
+
+    if repeated
+      line "void clear_#{field.name}() { _#{field.name} = []; }"
+    else
+      line "void clear_#{field.name}() { _clear_bit(__bits.#{field.name}); _#{field.name} = default_#{field.name}; }"
+    end
+    line
+  end
+
+  def dump_enum(enum)
+    in_namespace("enum", enum.name) do
+      enum.value.each do |value|
+        line %{#{value.name} = #{value.number},}
+      end
+    end
+  end
+
+  TYPE_MAPPING = {
+    TYPE_DOUBLE => "double",
+    TYPE_FLOAT => "float",
+    TYPE_INT64 => "long",
+    TYPE_UINT64 => "ulong",
+    TYPE_INT32 => "int",
+    TYPE_FIXED64 => "long",
+    TYPE_FIXED32 => "int",
+    TYPE_BOOL => "bool",
+    TYPE_STRING => "string",
+    TYPE_BYTES => "ubyte[]",
+    TYPE_UINT32 => "uint",
+    TYPE_SFIXED32 => "int",
+    TYPE_SFIXED64 => "long",
+    TYPE_SINT32 => "int",
+    TYPE_SINT64 => "long",
+  }
+
+  def default_value(field)
+    typename = field_typename(field)
+
+    if field.default_value && field.default_value != ""
+      case field.type
+      when TYPE_STRING, TYPE_BYTES
+        %{"#{field.default_value}"}
+      when TYPE_BOOL
+        field.default_value || "false"
+      when TYPE_ENUM
+        %{#{typename}.#{field.default_value}}
+      else
+        field.default_value || "0"
+      end
+    else
+        %{(#{typename}).init}
+    end
+  end
+
+  def in_namespace(type, name, rest = "")
+    if !name
+      yield
+    else
+      line "#{type} #{capfirst(name)}#{rest} {"
+      @ns.push name
+      yield
+      @ns.pop
+      line "}"
+    end
+  end
+
+  def capfirst(s)
+    "#{s[0,1].capitalize}#{s[1..-1]}" if s
+  end
+
+  def line(str = nil)
+    if str
+      @ns.size.times { @io.write("  ") }
+      @io.write(str)
+    end
+    @io.write("\n")
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_ruby.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_ruby.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_ruby.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/file_descriptor_to_ruby.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,230 @@
+require 'protocol_buffers/compiler/descriptor.pb'
+require 'stringio'
+
+class FileDescriptorToRuby < Struct.new(:descriptor)
+
+  include Google::Protobuf::FieldDescriptorProto::Type
+  include Google::Protobuf::FieldDescriptorProto::Label
+
+  def initialize(descriptor)
+    super
+    @package_modules = descriptor.package ? descriptor.package.split('.') : []
+    @ns = []
+  end
+
+  def write(io)
+    @io = io
+
+    @io.write <<HEADER
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+HEADER
+
+    descriptor.dependency.each do |dep|
+      dir      = File.dirname(dep)
+      filename = File.basename(dep, ".proto") + ".pb"
+      path = if dir == '.'
+        filename
+      else
+        File.join(dir, filename)
+      end
+      @io.write("begin; require '#{path}'; rescue LoadError; end\n")
+    end
+    @io.write("\n") unless descriptor.dependency.empty?
+
+    in_namespace("module", @package_modules) do
+      declare(descriptor.package, descriptor.message_type, descriptor.enum_type)
+
+      descriptor.message_type.each do |message|
+        dump_message(descriptor.package, message)
+      end
+
+      descriptor.service.each do |service|
+        dump_service(descriptor.package, service)
+      end
+    end
+
+  end
+
+  protected
+
+  def declare(package, messages, enums)
+    return if messages.empty? && enums.empty?
+
+    line %{# forward declarations}
+    messages.each do |message|
+      line %{class #{name([@package_modules, message.name].flatten)} < ::ProtocolBuffers::Message; end}
+    end
+
+    if enums.empty?
+      line
+    else
+      line
+      line %{# enums}
+      enums.each do |enum|
+        dump_enum(package, enum)
+      end
+    end
+  end
+
+  def line(str = nil)
+    if str
+      @ns.size.times { @io.write("  ") }
+      @io.write(str)
+    end
+    @io.write("\n")
+  end
+
+  def in_namespace(type, namespace, rest = "")
+
+    namespace_array = [namespace].flatten
+
+    namespace_array.each do |n|
+      line "#{type} #{camelize(n)}#{rest}"
+      @ns.push n
+    end
+    yield
+    namespace_array.each do |n|
+      @ns.pop
+      line "end"
+    end
+  end
+
+  def name(parts)
+    ns = @ns.dup
+    (parts.shift; ns.shift) while !parts.empty? && parts.first == ns.first
+    parts.map { |p| camelize(p) }.join("::")
+  end
+
+  LABEL_MAPPING = {
+    LABEL_OPTIONAL => "optional",
+    LABEL_REQUIRED => "required",
+    LABEL_REPEATED => "repeated",
+  }
+
+  TYPE_MAPPING = {
+    TYPE_DOUBLE => ":double",
+    TYPE_FLOAT => ":float",
+    TYPE_INT64 => ":int64",
+    TYPE_UINT64 => ":uint64",
+    TYPE_INT32 => ":int32",
+    TYPE_FIXED64 => ":fixed64",
+    TYPE_FIXED32 => ":fixed32",
+    TYPE_BOOL => ":bool",
+    TYPE_STRING => ":string",
+    TYPE_BYTES => ":bytes",
+    TYPE_UINT32 => ":uint32",
+    TYPE_SFIXED32 => ":sfixed32",
+    TYPE_SFIXED64 => ":sfixed64",
+    TYPE_SINT32 => ":sint32",
+    TYPE_SINT64 => ":sint64",
+  }
+
+  def dump_message(package, message)
+    in_namespace("class", message.name, " < ::ProtocolBuffers::Message") do
+      fully_qualified_name = fully_qualified_name(package, message.name)
+      declare(fully_qualified_name, message.nested_type, message.enum_type)
+
+      line %{set_fully_qualified_name "#{fully_qualified_name}"}
+      line
+
+      line %{# nested messages} unless message.nested_type.empty?
+      message.nested_type.each { |inner| dump_message(fully_qualified_name, inner) }
+
+      message.field.each do |field|
+        typename = field_typename(field)
+        fieldline = %{#{LABEL_MAPPING[field.label]} #{typename}, :#{field.name}, #{field.number}}
+        if field.type == TYPE_GROUP
+          fieldline << %{, :group => true}
+        end
+        if field.default_value && field.default_value != ""
+          fieldline << %{, :default => #{default_value(field)}}
+        end
+
+        # Dont need to check for 'repeated' attribute or type, protoc will take care of this.
+        if field.options.packed
+          fieldline << %{, :packed => true }
+        end
+
+        line fieldline
+      end
+    end
+    line
+  end
+
+  def dump_enum(package, enum)
+    in_namespace("module", enum.name) do
+      line %{include ::ProtocolBuffers::Enum}
+      line
+
+      line %{set_fully_qualified_name "#{fully_qualified_name(package, enum.name)}"}
+      line
+
+      enum.value.each do |value|
+        line %{#{capfirst(value.name)} = #{value.number}}
+      end
+    end
+    line
+  end
+
+  def dump_service(package, service)
+    in_namespace("class", service.name, " < ::ProtocolBuffers::Service") do
+      fully_qualified_name = fully_qualified_name(package, service.name)
+      line %{set_fully_qualified_name "#{fully_qualified_name}"}
+      line
+      service.method.each do |method|
+        line %{rpc :#{underscore(method.name)}, "#{method.name}", #{service_typename(method.input_type)}, #{service_typename(method.output_type)}}
+      end
+    end
+  end
+
+  def field_typename(field)
+    TYPE_MAPPING[field.type] || service_typename(field.type_name)
+  end
+
+  def service_typename(type_name)
+    type_name.split(".").map { |t| camelize(t) }.join("::")
+  end
+
+  # TODO: this probably doesn't work for all default values, expand
+  def default_value(field)
+    case field.type
+    when TYPE_STRING, TYPE_BYTES
+      %{"#{field.default_value}"}
+    when TYPE_BOOL
+      field.default_value
+    when TYPE_ENUM
+      typename = field_typename(field)
+      %{#{typename}::#{field.default_value}}
+    else
+      field.default_value
+    end
+  end
+
+  def fully_qualified_name(package, name)
+    package == nil || package.empty? ? name : "#{package}.#{name}"
+  end
+
+  def capfirst(s)
+    "#{s[0,1].capitalize}#{s[1..-1]}" if s
+  end
+
+  def camelize(lower_case_and_underscored_word)
+    lower_case_and_underscored_word.to_s.gsub(/(?:^|_)(.)/) { $1.upcase }
+  end
+
+  def underscore(camelized_word)
+    word = camelized_word.to_s.dup
+    word.gsub!(/::/, '/')
+    word.gsub!(/(?:([A-Za-z\d])|^)((?=\a)\b)(?=\b|[^a-z])/) { "#{$1}#{$1 && '_'}#{$2.downcase}" }
+    word.gsub!(/([A-Z\d]+)([A-Z][a-z])/,'\1_\2')
+    word.gsub!(/([a-z\d])([A-Z])/,'\1_\2')
+    word.tr!("-", "_")
+    word.downcase!
+    word
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.pb.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,32 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+begin; require 'descriptor.pb'; rescue LoadError; end
+
+# forward declarations
+class CodeGeneratorRequest < ::ProtocolBuffers::Message; end
+class CodeGeneratorResponse < ::ProtocolBuffers::Message; end
+
+class CodeGeneratorRequest < ::ProtocolBuffers::Message
+  repeated :string, :file_to_generate, 1
+  optional :string, :parameter, 2
+  repeated ::Google::Protobuf::FileDescriptorProto, :proto_file, 15
+end
+
+class CodeGeneratorResponse < ::ProtocolBuffers::Message
+  # forward declarations
+  class File < ::ProtocolBuffers::Message; end
+
+  # nested messages
+  class File < ::ProtocolBuffers::Message
+    optional :string, :name, 1
+    optional :string, :insertion_point, 2
+    optional :string, :content, 15
+  end
+
+  optional :string, :error, 1
+  repeated ::CodeGeneratorResponse::File, :file, 15
+end
+
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler/plugin.proto	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,146 @@
+// Protocol Buffers - Google's data interchange format
+// Copyright 2008 Google Inc.  All rights reserved.
+// http://code.google.com/p/protobuf/
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//     * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//     * Neither the name of Google Inc. nor the names of its
+// contributors may be used to endorse or promote products derived from
+// this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+// Author: kenton@google.com (Kenton Varda)
+//
+// WARNING:  The plugin interface is currently EXPERIMENTAL and is subject to
+//   change.
+//
+// protoc (aka the Protocol Compiler) can be extended via plugins.  A plugin is
+// just a program that reads a CodeGeneratorRequest from stdin and writes a
+// CodeGeneratorResponse to stdout.
+//
+// Plugins written using C++ can use google/protobuf/compiler/plugin.h instead
+// of dealing with the raw protocol defined here.
+//
+// A plugin executable needs only to be placed somewhere in the path.  The
+// plugin should be named "protoc-gen-$NAME", and will then be used when the
+// flag "--${NAME}_out" is passed to protoc.
+
+//package google.protobuf.compiler;
+
+//import "google/protobuf/descriptor.proto";
+import "descriptor.proto";
+
+// An encoded CodeGeneratorRequest is written to the plugin's stdin.
+message CodeGeneratorRequest {
+  // The .proto files that were explicitly listed on the command-line.  The
+  // code generator should generate code only for these files.  Each file's
+  // descriptor will be included in proto_file, below.
+  repeated string file_to_generate = 1;
+
+  // The generator parameter passed on the command-line.
+  optional string parameter = 2;
+
+  // FileDescriptorProtos for all files in files_to_generate and everything
+  // they import.  The files will appear in topological order, so each file
+  // appears before any file that imports it.
+  //
+  // protoc guarantees that all proto_files will be written after
+  // the fields above, even though this is not technically guaranteed by the
+  // protobuf wire format.  This theoretically could allow a plugin to stream
+  // in the FileDescriptorProtos and handle them one by one rather than read
+  // the entire set into memory at once.  However, as of this writing, this
+  // is not similarly optimized on protoc's end -- it will store all fields in
+  // memory at once before sending them to the plugin.
+  repeated FileDescriptorProto proto_file = 15;
+}
+
+// The plugin writes an encoded CodeGeneratorResponse to stdout.
+message CodeGeneratorResponse {
+  // Error message.  If non-empty, code generation failed.  The plugin process
+  // should exit with status code zero even if it reports an error in this way.
+  //
+  // This should be used to indicate errors in .proto files which prevent the
+  // code generator from generating correct code.  Errors which indicate a
+  // problem in protoc itself -- such as the input CodeGeneratorRequest being
+  // unparseable -- should be reported by writing a message to stderr and
+  // exiting with a non-zero status code.
+  optional string error = 1;
+
+  // Represents a single generated file.
+  message File {
+    // The file name, relative to the output directory.  The name must not
+    // contain "." or ".." components and must be relative, not be absolute (so,
+    // the file cannot lie outside the output directory).  "/" must be used as
+    // the path separator, not "\".
+    //
+    // If the name is omitted, the content will be appended to the previous
+    // file.  This allows the generator to break large files into small chunks,
+    // and allows the generated text to be streamed back to protoc so that large
+    // files need not reside completely in memory at one time.  Note that as of
+    // this writing protoc does not optimize for this -- it will read the entire
+    // CodeGeneratorResponse before writing files to disk.
+    optional string name = 1;
+
+    // If non-empty, indicates that the named file should already exist, and the
+    // content here is to be inserted into that file at a defined insertion
+    // point.  This feature allows a code generator to extend the output
+    // produced by another code generator.  The original generator may provide
+    // insertion points by placing special annotations in the file that look
+    // like:
+    //   @@protoc_insertion_point(NAME)
+    // The annotation can have arbitrary text before and after it on the line,
+    // which allows it to be placed in a comment.  NAME should be replaced with
+    // an identifier naming the point -- this is what other generators will use
+    // as the insertion_point.  Code inserted at this point will be placed
+    // immediately above the line containing the insertion point (thus multiple
+    // insertions to the same point will come out in the order they were added).
+    // The double-@ is intended to make it unlikely that the generated code
+    // could contain things that look like insertion points by accident.
+    //
+    // For example, the C++ code generator places the following line in the
+    // .pb.h files that it generates:
+    //   // @@protoc_insertion_point(namespace_scope)
+    // This line appears within the scope of the file's package namespace, but
+    // outside of any particular class.  Another plugin can then specify the
+    // insertion_point "namespace_scope" to generate additional classes or
+    // other declarations that should be placed in this scope.
+    //
+    // Note that if the line containing the insertion point begins with
+    // whitespace, the same whitespace will be added to every line of the
+    // inserted text.  This is useful for languages like Python, where
+    // indentation matters.  In these languages, the insertion point comment
+    // should be indented the same amount as any inserted code will need to be
+    // in order to work correctly in that context.
+    //
+    // The code generator that generates the initial file and the one which
+    // inserts into it must both run as part of a single invocation of protoc.
+    // Code generators are executed in the order in which they appear on the
+    // command line.
+    //
+    // If |insertion_point| is present, |name| must also be present.
+    optional string insertion_point = 2;
+
+    // The file contents.
+    optional string content = 15;
+  }
+  repeated File file = 15;
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/compiler.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,63 @@
+require 'protocol_buffers/compiler/descriptor.pb'
+
+module ProtocolBuffers
+  class CompileError < StandardError; end
+
+  module Compiler
+    def self.compile(output_filename, input_files, opts = {})
+      input_files = Array(input_files) unless input_files.is_a?(Array)
+      raise(ArgumentError, "Need at least one input file") if input_files.empty?
+      other_opts = ""
+      (opts[:include_dirs] || []).each { |d| other_opts += " -I#{d}" }
+
+      cmd = "protoc #{other_opts} -o#{output_filename} #{input_files.join(' ')}"
+      rc = system(cmd)
+      raise(CompileError, $?.exitstatus.to_s) unless rc
+      true
+    end
+
+    def self.compile_and_load(input_files, opts = {})
+      require 'tempfile'
+      require 'protocol_buffers/compiler/file_descriptor_to_ruby'
+
+      input_files = Array(input_files) unless input_files.is_a?(Array)
+
+      tempfile = Tempfile.new("protocol_buffers_spec")
+      tempfile.binmode
+
+      include_dirs = (opts[:include_dirs] ||= [])
+      include_dirs.concat(input_files.map { |i| File.dirname(i) }.uniq)
+
+      compile(tempfile.path, input_files, opts)
+      descriptor_set = Google::Protobuf::FileDescriptorSet.parse(tempfile)
+      tempfile.close(true)
+      descriptor_set.file.each do |file|
+        parsed = FileDescriptorToRuby.new(file)
+        output = Tempfile.new("protocol_buffers_spec_parsed")
+        output.binmode
+        parsed.write(output)
+        output.flush
+        load output.path
+        output.close(true)
+      end
+      true
+    end
+
+    def self.compile_and_load_string(input, opts = {})
+      require 'tempfile'
+      tempfile = Tempfile.new("protocol_buffers_load_string")
+      tempfile.binmode
+      tempfile.write(input)
+      tempfile.flush
+      (opts[:include_dirs] ||= []) << File.dirname(tempfile.path)
+      compile_and_load(tempfile.path, opts)
+    end
+
+    def self.available?
+      version = `protoc --version`.match(/[\d\.]+/)
+      version && version[0] >= "2.2"
+    rescue Errno::ENOENT
+      false
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/limited_io.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/limited_io.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/limited_io.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/limited_io.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,25 @@
+class LimitedIO < Struct.new(:parent, :limit)
+  def read(length = nil, buffer = nil)
+    length = length || limit
+    length = limit if length > limit
+    self.limit -= length
+    # seems silly to check for buffer, but some IO#read methods implemented in C
+    # barf if you pass nil, rather than treat it as an argument that wasn't
+    # passed at all.
+    if buffer
+      parent.read(length, buffer)
+    else
+      parent.read(length)
+    end
+  end
+
+  def eof?
+    limit == 0 || parent.eof?
+  end
+
+  def getbyte
+    return nil if limit == 0
+    self.limit -= 1
+    parent.getbyte
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/decoder.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/decoder.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/decoder.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/decoder.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,95 @@
+require 'protocol_buffers/limited_io'
+
+module ProtocolBuffers
+
+  class DecodeError < StandardError; end
+
+  module Decoder # :nodoc: all
+    def self.decode(io, message)
+      fields = message.fields
+
+      until io.eof?
+        tag_int = Varint.decode(io)
+        tag = tag_int >> 3
+        wire_type = tag_int & 0b111
+        break if wire_type == 4
+        field = fields[tag]
+
+        if field && ( !( field.packed? || wire_type == field.wire_type ) || ( field.packed? && wire_type != 2 ) )
+          raise(DecodeError, "incorrect wire type for tag: #{field.tag}, expected #{field.wire_type} but got #{wire_type}\n#{field.inspect}")
+        end
+
+        # replacing const lookups with hard-coded ints removed an entire 10%
+        # from an earlier decoding benchmark. these values can't change without
+        # breaking the protocol anyway, so we decided it was worth it.
+        case wire_type
+        when 0 # VARINT
+          value = Varint.decode(io)
+        when 1 # FIXED64
+          value = io.read(8)
+        when 2 # LENGTH_DELIMITED
+          length = Varint.decode(io)
+          value = LimitedIO.new(io, length)
+        when 5 # FIXED32
+          value = io.read(4)
+        when 3 # START_GROUP
+          value = io
+        when 4 # END_GROUP
+          break
+        else
+          raise(DecodeError, "unknown wire type: #{wire_type}")
+        end
+
+        if field
+          begin
+            if field.packed?
+              deserialized = []
+              until value.eof?
+
+                decoded = case field.wire_type
+                  when 0 # VARINT
+                    Varint.decode(value)
+                  when 1 # FIXED64
+                    value.read(8)
+                  when 5 # FIXED32
+                    value.read(4)
+                  end
+                deserialized << field.deserialize(decoded)
+              end
+            else
+              deserialized = field.deserialize(value)
+            end
+            # merge_field handles repeated field logic
+            message.merge_field(tag, deserialized, field)
+          rescue ArgumentError
+            # for enum fields, treat bad values as unknown fields
+            if field.is_a?(Field::EnumField)
+              field = nil
+            else
+              raise
+            end
+          end
+        end
+
+        unless field
+          # ignore unknown fields, pass them on when re-serializing this message
+
+          # special handling -- if it's a LENGTH_DELIMITED field, we need to
+          # actually read the IO so that extra bytes aren't left on the wire
+          value = value.read if wire_type == 2 # LENGTH_DELIMITED
+
+          message.remember_unknown_field(tag_int, value)
+        end
+      end
+
+      unless message.valid?
+        raise(DecodeError, "invalid message")
+      end
+
+      return message
+    rescue TypeError, ArgumentError
+      raise(DecodeError, "error parsing message")
+    end
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/encoder.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/encoder.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/encoder.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/encoder.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,75 @@
+module ProtocolBuffers
+
+  class EncodeError < StandardError
+    attr_reader :invalid_field
+
+    def initialize(invalid_field)
+      @invalid_field = invalid_field
+    end
+  end
+
+  module Encoder # :nodoc: all
+    def self.encode(io, message)
+      message.validate!
+
+      message.fields.each do |tag, field|
+        next unless message.value_for_tag?(tag)
+
+        value = message.value_for_tag(tag)
+        wire_type = field.wire_type
+        tag = (field.tag << 3) | wire_type
+
+        if field.repeated?
+          next if value.size == 0
+
+          if field.packed?
+            # encode packed field in a LENGTH_DELIMITED wire
+            wire_type = 2
+            tag = (field.tag << 3) | wire_type
+            buf = ProtocolBuffers.bin_sio
+            value.each { |i| serialize_field_value(buf, field.wire_type, field.serialize(i)) }
+            Varint.encode(io, tag)
+            Varint.encode(io, buf.size)
+            io.write(buf.string)
+          else
+            value.each { |i| serialize_field(io, tag, wire_type, field.serialize(i)) }
+          end
+        else
+          serialize_field(io, tag, wire_type, field.serialize(value))
+        end
+      end
+
+      message.each_unknown_field do |tag_int, value|
+        wire_type = tag_int & 0b111
+        serialize_field(io, tag_int, wire_type, value)
+      end
+    end
+
+    def self.serialize_field(io, tag, wire_type, serialized)
+      # write the tag
+      Varint.encode(io, tag)
+      self.serialize_field_value(io, wire_type, serialized)
+      Varint.encode(io, tag & ~3 | 4) if wire_type == 3
+    end
+
+    def self.serialize_field_value(io, wire_type, serialized)
+      # see comment in decoder.rb about magic numbers
+      case wire_type
+      when 0 # VARINT
+        Varint.encode(io, serialized)
+      when 1, 5 # FIXED64, FIXED32
+        io.write(serialized)
+      when 2 # LENGTH_DELIMITED
+        Varint.encode(io, serialized.bytesize)
+        io.write(serialized)
+      when 3 # START_GROUP
+        io.write(serialized)
+      when 4 # END_GROUP: never appear
+        raise(EncodeError, "Unexpected wire type END_GROUP")
+      else
+        raise(EncodeError, "unknown wire type: #{wire_type}")
+      end
+    end
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/enum.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/enum.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/enum.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/enum.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,36 @@
+module ProtocolBuffers
+  module Enum
+    def self.included(clazz)
+      clazz.extend(EnumClassMethods)
+    end
+  end
+
+  module EnumClassMethods
+    def set_fully_qualified_name(fully_qualified_name)
+      @fully_qualified_name = fully_qualified_name.dup.freeze
+    end
+
+    def fully_qualified_name
+      @fully_qualified_name
+    end
+
+    def value_to_names_map
+      @value_to_names_map ||= self.constants.inject(Hash.new) do |hash, constant|
+        # values do not have to be unique
+        value = self.const_get(constant)
+        hash[value] ||= Array.new
+        hash[value] << constant.to_sym
+        hash
+      end
+      @value_to_names_map
+    end
+
+    def name_to_value_map
+      @name_to_value_map ||= self.constants.inject(Hash.new) do |hash, constant|
+        hash[constant.to_sym] = self.const_get(constant)
+        hash
+      end
+      @name_to_value_map
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/extend.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/extend.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/extend.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/extend.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1 @@
+# TODO
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/field.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/field.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/field.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/field.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,671 @@
+require 'protocol_buffers'
+require 'protocol_buffers/runtime/enum'
+require 'protocol_buffers/runtime/varint'
+require 'protocol_buffers/limited_io'
+
+module ProtocolBuffers
+
+  module WireTypes # :nodoc:
+    VARINT = 0
+    FIXED64 = 1
+    LENGTH_DELIMITED = 2
+    START_GROUP = 3 # deprecated, not supported in ruby
+    END_GROUP = 4   # ditto
+    FIXED32 = 5
+  end
+
+  # Acts like an Array, but type-checks each element
+  class RepeatedField < Array # :nodoc:
+    def initialize(field)
+      super()
+      @field = field
+    end
+
+    # ovverride all mutating methods.
+    # I'm sure this will break down on each new major Ruby release, as new
+    # mutating methods are added to Array. Ah, well. caveat emptor.
+
+    def <<(obj)
+      check(obj)
+      super
+    end
+
+    def []=(*args)
+      obj = args.last
+      case obj
+      when nil
+        check(obj) if args.length == 2 && !args.first.is_a?(Range)
+      when Array
+        check_each(obj)
+      else
+        check(obj)
+      end
+      super
+    end
+
+    def collect!(&b)
+      replace(collect(&b))
+    end
+    alias_method :map!, :collect!
+
+    def concat(rhs)
+      check_each(rhs)
+      super
+    end
+
+    def fill(*args, &b)
+      if block_given?
+        super(*args) { |v| check(b.call(v)) }
+      else
+        check(args.first)
+        super
+      end
+    end
+
+    def insert(index, *objs)
+      check_each(objs)
+      super
+    end
+
+    def push(*objs)
+      check_each(objs)
+      super
+    end
+
+    def replace(array)
+      check_each(array)
+      super
+    end
+
+    def unshift(*objs)
+      check_each(objs)
+      super
+    end
+
+    private
+
+    def check(value)
+      @field.check_valid(value)
+    end
+
+    def check_each(iter)
+      iter.each { |value| @field.check_valid(value) }
+    end
+  end
+
+  class Field # :nodoc: all
+    attr_reader :otype, :name, :tag
+
+    def repeated?; otype == :repeated end
+    def packed?; repeated? && @opts[:packed] end
+
+    def self.create(sender, otype, type, name, tag, opts = {})
+      if type.is_a?(Symbol)
+        klass = Field.const_get("#{type.to_s.capitalize}Field") rescue nil
+        raise("Type not found: #{type}") if klass.nil?
+        field = klass.new(otype, name, tag, opts)
+      elsif type.ancestors.include?(ProtocolBuffers::Enum)
+        field = Field::EnumField.new(type, otype, name, tag, opts)
+      elsif type.ancestors.include?(ProtocolBuffers::Message)
+        if opts[:group]
+          field = Field::GroupField.new(type, otype, name, tag, opts)
+        else
+          field = Field::MessageField.new(type, otype, name, tag, opts)
+        end
+      else
+        raise("Type not found: #{type}")
+      end
+      return field
+    end
+
+    def initialize(otype, name, tag, opts = {})
+      @otype = otype
+      @name = name
+      @tag = tag
+      @opts = opts.dup
+    end
+
+    def add_reader_to(klass)
+      if repeated?
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+        def #{name}
+          unless @#{name}
+            @#{name} = RepeatedField.new(fields[#{tag}])
+          end
+          @#{name}
+        end
+        EOF
+      else
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+        def #{name}
+          if @set_fields[#{tag}] == nil
+            # first access of this field, generate it
+            initialize_field(#{tag})
+          end
+          @#{name}
+        end
+        EOF
+      end
+    end
+
+    def add_writer_to(klass)
+      if repeated?
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+          def #{name}=(__value)
+            if __value.nil?
+              #{name}.clear
+            else
+              unless __value.equal?(#{name})
+                #{name}.clear
+                __value.each { |i| @#{name}.push i }
+              end
+              if @parent_for_notify
+                @parent_for_notify.default_changed(@tag_for_notify)
+                @parent_for_notify = @tag_for_notify = nil
+              end
+            end
+          end
+        EOF
+      else
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+          def #{name}=(__value)
+            field = fields[#{tag}]
+            if __value.nil?
+              @set_fields[#{tag}] = false
+              @#{name} = field.default_value
+            else
+              field.check_valid(__value)
+              @set_fields[#{tag}] = true
+              @#{name} = __value
+              if @parent_for_notify
+                @parent_for_notify.default_changed(@tag_for_notify)
+                @parent_for_notify = @tag_for_notify = nil
+              end
+            end
+          end
+        EOF
+      end
+    end
+
+    def add_methods_to(klass)
+      add_reader_to(klass)
+      add_writer_to(klass)
+
+      if repeated?
+        # repeated fields are always "set"
+        klass.initial_set_fields[tag] = true
+
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+          def has_#{name}?; true; end
+        EOF
+      else
+        klass.class_eval <<-EOF, __FILE__, __LINE__+1
+          def has_#{name}?
+            value_for_tag?(#{tag})
+          end
+        EOF
+      end
+    end
+
+    def check_value(value)
+      # pass
+    end
+
+    def valid_type?(value)
+      true
+    end
+
+    def inspect_value(value)
+      value.inspect
+    end
+
+    def check_valid(value)
+      raise(TypeError, "can't assign #{value.class.name} to #{self.class.name}") unless valid_type?(value)
+      check_value(value)
+    end
+
+    # the type of value to return depends on the wire_type of the field:
+    # VARINT => Integer
+    # FIXED64 => 8-byte string
+    # LENGTH_DELIMITED => string
+    # FIXED32 => 4-byte string
+    def serialize(value)
+      value
+    end
+
+    # the type of value passed in depends on the wire_type of the field:
+    # VARINT => Integer (Fixnum or Bignum)
+    # FIXED64 => 8-byte string
+    # LENGTH_DELIMITED => IO class, make sure to consume all data available
+    # FIXED32 => 4-byte string
+    def deserialize(value)
+      value
+    end
+
+    def text_format(io, value, options = nil)
+      io.write value.to_s
+    end
+
+    module WireFormats
+      module LENGTH_DELIMITED
+        def wire_type
+          WireTypes::LENGTH_DELIMITED
+        end
+      end
+
+      module GROUP
+        def wire_type
+          WireTypes::START_GROUP
+        end
+      end
+
+      module VARINT
+        def wire_type
+          WireTypes::VARINT
+        end
+      end
+
+      module FIXED32
+        def wire_type
+          WireTypes::FIXED32
+        end
+
+        def serialize(value)
+          [value].pack(pack_code)
+        end
+
+        def deserialize(value)
+          value.unpack(pack_code).first
+        end
+      end
+
+      module FIXED64
+        def wire_type
+          WireTypes::FIXED64
+        end
+
+        def serialize(value)
+          [value].pack(pack_code)
+        end
+
+        def deserialize(value)
+          value.unpack(pack_code).first
+        end
+      end
+    end
+
+    class BytesField < Field
+      include WireFormats::LENGTH_DELIMITED
+
+      def valid_type?(value)
+        value.is_a?(String)
+      end
+
+      def default_value
+        @default_value || @default_value = (@opts[:default] || "").freeze
+      end
+
+      def deserialize(value)
+        value.read
+      end
+
+      def text_format(io, value, options = nil)
+        value = value.unpack("C*").map { |b| "\\x%02x" % b }.join(nil)
+        io.write "\"#{value}\""
+      end
+    end
+
+    class StringField < BytesField
+      HAS_ENCODING = (''.respond_to?(:valid_encoding?) && ''.respond_to?(:force_encoding))
+
+      def check_value(value)
+        if HAS_ENCODING
+          value.dup.force_encoding(Encoding::UTF_8).valid_encoding? || raise(ArgumentError, "string value is not valid utf-8")
+        end
+      end
+
+      def serialize(value)
+        check_value(value)
+        if HAS_ENCODING
+          value.dup.force_encoding(Encoding::UTF_8)
+        else
+          value
+        end
+      end
+
+      def deserialize(value)
+        read_value = value.read.to_s
+        if HAS_ENCODING
+          read_value.force_encoding(Encoding::UTF_8)
+        else
+          read_value
+        end
+      end
+
+      def text_format(io, value, options = nil)
+        if HAS_ENCODING
+          io.write value.dup.force_encoding(Encoding::ASCII_8BIT).dump
+        else
+          io.write value.dump
+        end
+      end
+    end
+
+    class NumericField < Field
+      def min
+        0
+      end
+
+      def max
+        1.0 / 0.0
+      end
+
+      def check_value(value)
+        raise(ArgumentError, "value is out of range for type #{self.class.name}: #{value}") unless value >= min && value <= max
+      end
+
+      def default_value
+        @opts[:default] || 0
+      end
+
+      private
+      # base class, not used directly
+      def initialize(*a); super; end
+    end
+
+    class VarintField < NumericField
+      include WireFormats::VARINT
+
+      def valid_type?(value)
+        value.is_a?(Integer)
+      end
+
+      private
+      # base class, not used directly
+      def initialize(*a); super; end
+    end
+
+    class SignedVarintField < VarintField
+      def deserialize(value)
+        # This is to handle negatives...they are always 64-bit
+        if value > max
+          value - (1<<64)
+        else
+          value
+        end
+      end
+    end
+
+    class Uint32Field < VarintField
+      def max
+        0xFFFFFFFF
+      end
+    end
+
+    class Uint64Field < VarintField
+      def max
+        0xFFFFFFFF_FFFFFFFF
+      end
+    end
+
+    class Fixed32Field < NumericField
+      include WireFormats::FIXED32
+
+      def pack_code
+        'L'
+      end
+
+      def max
+        0xFFFFFFFF
+      end
+
+      def valid_type?(value)
+        value.is_a?(Integer)
+      end
+    end
+
+    class Fixed64Field < NumericField
+      include WireFormats::FIXED64
+
+      def pack_code
+        'Q'
+      end
+
+      def max
+        0xFFFFFFFF_FFFFFFFF
+      end
+
+      def valid_type?(value)
+        value.is_a?(Integer)
+      end
+    end
+
+    class Int32Field < SignedVarintField
+      def min
+        -(1 << 31)
+      end
+
+      def max
+        (1 << 31) - 1
+      end
+
+      def bits
+        32
+      end
+    end
+
+    class Sint32Field < Int32Field
+      def serialize(value)
+        Varint.encodeZigZag32(value)
+      end
+
+      def deserialize(value)
+        Varint.decodeZigZag32(value)
+      end
+    end
+
+    class Sfixed32Field < NumericField
+      include WireFormats::FIXED32
+
+      def pack_code
+        'l'
+      end
+
+      def min
+        -(1 << 31)
+      end
+
+      def max
+        (1 << 31) - 1
+      end
+
+      def valid_type?(value)
+        value.is_a?(Integer)
+      end
+    end
+
+    class Int64Field < SignedVarintField
+      def min
+        -(1 << 63)
+      end
+
+      def max
+        (1 << 63) - 1
+      end
+
+      def bits
+        64
+      end
+    end
+
+    class Sint64Field < Int64Field
+      def serialize(value)
+        Varint.encodeZigZag64(value)
+      end
+
+      def deserialize(value)
+        Varint.decodeZigZag64(value)
+      end
+    end
+
+    class Sfixed64Field < NumericField
+      include WireFormats::FIXED64
+
+      def pack_code
+        'q'
+      end
+
+      def min
+        -(1 << 63)
+      end
+
+      def max
+        (1 << 63) - 1
+      end
+
+      def valid_type?(value)
+        value.is_a?(Integer)
+      end
+    end
+
+    class FloatField < Field
+      include WireFormats::FIXED32
+
+      def pack_code
+        'e'
+      end
+
+      def valid_type?(value)
+        value.is_a?(Numeric)
+      end
+
+      def default_value
+        @opts[:default] || 0.0
+      end
+    end
+
+    class DoubleField < Field
+      include WireFormats::FIXED64
+
+      def pack_code
+        'E'
+      end
+
+      def valid_type?(value)
+        value.is_a?(Numeric)
+      end
+
+      def default_value
+        @opts[:default] || 0.0
+      end
+    end
+
+    class BoolField < VarintField
+      def serialize(value)
+        value ? 1 : 0
+      end
+
+      def valid_type?(value)
+        value == true || value == false
+      end
+
+      def check_value(value); end
+
+      def deserialize(value)
+        value != 0
+      end
+
+      def default_value
+        @opts[:default] || false
+      end
+    end
+
+    class EnumField < Int32Field
+      attr_reader :valid_values, :value_to_name
+
+      def initialize(proxy_enum, otype, name, tag, opts = {})
+        super(otype, name, tag, opts)
+        @proxy_enum = proxy_enum
+        @valid_values = @proxy_enum.constants.map { |c| @proxy_enum.const_get(c) }.sort
+        @value_to_name = @proxy_enum.constants.inject({}) { |h, c|
+          h[@proxy_enum.const_get(c)] = c.to_s; h
+        }
+      end
+
+      def check_value(value)
+        raise(ArgumentError, "value is out of range for #{self.class.name}: #{value}") unless @valid_values.include?(value)
+      end
+
+      def default_value
+        @opts[:default] || @valid_values.first
+      end
+
+      def value_from_name(name)
+        @proxy_enum.name_to_value_map[name.to_sym]
+      end
+
+      def inspect_value(value)
+        "#{@value_to_name[value]}(#{value})"
+      end
+
+      def text_format(io, value, options = nil)
+        formatted = @value_to_name[value] || value.to_s
+        io.write formatted
+      end
+    end
+
+    class AggregateField < Field
+      attr_reader :proxy_class
+
+      def initialize(proxy_class, otype, name, tag, opts = {})
+        super(otype, name, tag, opts)
+        @proxy_class = proxy_class
+      end
+
+      def default_value
+        @proxy_class.new
+      end
+
+      def valid_type?(value)
+        value.is_a?(@proxy_class)
+      end
+
+      # TODO: serialize could be more efficient if it used the underlying stream
+      # directly rather than string copying, but that would require knowing the
+      # length beforehand.
+      def serialize(value)
+        value.to_s
+      end
+
+      def deserialize(io)
+        @proxy_class.parse(io)
+      end
+
+      def text_format(io, value, options = nil)
+        options = options.dup
+        options[:nest] ||= 0
+        if options[:short]
+          indent = ""
+          newline = " "
+        else
+          indent = "  " * options[:nest]
+          newline = "\n"
+        end
+        options[:nest] += 1
+
+        io.write "{#{newline}"
+        value.text_format(io, options)
+        io.write " " if options[:short]
+        io.write "#{indent}}"
+      end
+    end
+
+    class MessageField < AggregateField
+      include WireFormats::LENGTH_DELIMITED
+    end
+
+    class GroupField < AggregateField
+      include WireFormats::GROUP
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/message.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/message.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/message.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/message.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,626 @@
+require 'stringio'
+require 'protocol_buffers/runtime/field'
+require 'protocol_buffers/runtime/encoder'
+require 'protocol_buffers/runtime/decoder'
+require 'protocol_buffers/runtime/text_formatter'
+require 'protocol_buffers/runtime/text_parser'
+
+module ProtocolBuffers
+
+  # = Generated Code
+  #
+  # This text describes exactly what Ruby code the protocol buffer compiler
+  # generates for any given protocol definition. You should read the language
+  # guide before reading this document:
+  #
+  # http://code.google.com/apis/protocolbuffers/docs/proto.html
+  #
+  # == Packages
+  #
+  # If a package name is given in the <tt>.proto</tt> file, all top-level
+  # messages and enums in the file will be defined underneath a module with the
+  # same name as the package. The first letter of the package is capitalized if
+  # necessary.  This applies to message and enum names as well, since Ruby
+  # classes and modules must be capitalized.
+  #
+  # For example, the following <tt>.proto</tt> file:
+  #
+  #   package wootcakes;
+  #   message uberWoot { }
+  #
+  # Will define a module +Wootcakes+ and a class <tt>Wootcakes::UberWoot</tt>
+  #
+  # == Messages
+  #
+  # Given a simple message definition:
+  #
+  #   message Foo {}
+  #
+  # The compiler will generate a class called +Foo+, which subclasses
+  # ProtocolBuffers::Message.
+  #
+  # These generated classes are not designed for subclassing.
+  #
+  # Ruby message classes have no particular public methods or accessors other
+  # than those defined by ProtocolBuffers::Message and those generated for
+  # nested fields, messages, and enum types (see below).
+  #
+  # A message can be declared inside another message. For example:
+  # <tt>message Foo { message Bar { } }</tt>
+  #
+  # In this case, the +Bar+ class is declared inside the +Foo+ class, so you can
+  # access it as <tt>Foo::Bar</tt> (or if in package +Baz+,
+  # <tt>Baz::Foo::Bar</tt>)
+  #
+  # == Fields
+  #
+  # For each field in the message type, the corresponding class has a member
+  # with the same name as the field. How you can manipulate the member depends
+  # on its type.
+  #
+  # === Singular Fields
+  #
+  # If you have a singular (optional or required) field +foo+ of any non-message
+  # type, you can manipulate the field +foo+ as if it were a regular object
+  # attribute.  For example, if +foo+'s type is <tt>int32</tt>, you can say:
+  #
+  #   message.foo = 123
+  #   puts message.foo
+  #
+  # Note that setting +foo+ to a value of the wrong type will raise a
+  # TypeError. Setting +foo+ to a value of the right type, but one that doesn't
+  # fit (such as assigning an out-of-bounds enum value) will raise an
+  # ArgumentError.
+  #
+  # If +foo+ is read when it is not set, its value is the default value for that
+  # field. To check if +foo+ is set, call <tt>has_foo?</tt> To clear +foo+, call
+  # <tt>message.foo = nil</tt>. For example:
+  #
+  #   assert(!message.has_foo?)
+  #   message.foo = 123
+  #   assert(message.has_foo?)
+  #   message.foo = nil
+  #   assert(!message.has_foo?)
+  #
+  # === Singular String Fields
+  #
+  # String fields are treated like other singular fields, but note that the
+  # default value for string fields is frozen, so it is effectively an immutable
+  # string. Attempting to modify this default string will raise a TypeError,
+  # so assign a new string to the field instead.
+  #
+  # === Singular Message Fields
+  #
+  # Message types are a bit special, since they are mutable. Accessing an unset
+  # message field will return a default instance of the message type. Say you
+  # have the following <tt>.proto</tt> definition:
+  #
+  #   message Foo {
+  #     optional Bar bar = 1;
+  #   }
+  #   message Bar {
+  #     optional int32 i = 1;
+  #   }
+  #
+  # To set the message field, you can do either of the following:
+  #
+  #   foo = Foo.new
+  #   assert(!foo.has_bar?)
+  #   foo.bar = Bar.new
+  #   assert(foo.has_bar?)
+  #
+  # Or, to set bar, you can simply assign a value directly to a field within
+  # bar, and - presto! - foo has a bar field:
+  #
+  #   foo = Foo.new
+  #   assert(!foo.has_bar?)
+  #   foo.bar.i = 1
+  #   assert(foo.has_bar?)
+  #
+  # Note that simply reading a field inside bar does not set the field:
+  #
+  #   foo = Foo.new
+  #   assert(!foo.has_bar?)
+  #   puts foo.bar.i
+  #   assert(!foo.has_bar?)
+  #
+  # === Repeated Fields
+  #
+  # Repeated fields are represented as an object that acts like an Array.
+  # For example, given this message definition:
+  #
+  #   message Foo {
+  #     repeated int32 nums = 1;
+  #   }
+  #
+  # You can do the following:
+  #
+  #   foo = Foo.new
+  #   foo.nums << 15
+  #   foo.nums.push(32)
+  #   assert(foo.nums.length == 2)
+  #   assert(foo.nums[0] == 15)
+  #   assert(foo.nums[1] == 32)
+  #   foo.nums.each { |i| puts i }
+  #   foo.nums[1] = 56
+  #   assert(foo.nums[1] == 56)
+  #
+  # To clear a repeated field, call the <tt>clear</tt> method, or assign nil to
+  # it like a singular field.
+  #
+  #   foo = Foo.new
+  #   foo.nums << 15
+  #   foo.nums.push(32)
+  #   assert(foo.nums.length == 2)
+  #   foo.nums.clear
+  #   assert(foo.nums.length == 0)
+  #   foo.nums = nil # equivalent to foo.nums.clear
+  #   assert(foo.nums.length == 0)
+  #
+  # You can assign to a repeated field using an array, or any other object that
+  # responds to +each+. This will replace the current contents of the repeated
+  # field.
+  #
+  #   foo = Foo.new
+  #   foo.nums << 15
+  #   foo.nums = [1, 3, 5]
+  #   assert(foo.nums.length == 3)
+  #   assert(foo.nums.to_a == [1,3,5])
+  #
+  # Repeated fields are always set, so <tt>foo.has_nums?</tt> will always be
+  # true. Repeated fields don't take up any space in a serialized message if
+  # they are empty.
+  #
+  # === Repeated Message Fields
+  #
+  # Repeated message fields work like other repeated fields. For example, given
+  # this message definition:
+  #
+  #   message Foo {
+  #     repeated Bar bars = 1;
+  #   }
+  #   message Bar {
+  #     optional int32 i = 1;
+  #   }
+  #
+  # You can do the following:
+  #
+  #   foo = Foo.new
+  #   foo.bars << Bar.new(:i => 15)
+  #   foo.bars << Bar.new(:i => 32)
+  #   assert(foo.bars.length == 2)
+  #   assert(foo.bars[0].i == 15)
+  #   assert(foo.bars[1].i == 32)
+  #   foo.bars.each { |bar| puts bar.i }
+  #   foo.bars[1].i = 56
+  #   assert(foo.bars[1].i == 56)
+  #
+  # == Enumerations
+  #
+  # Enumerations are defined as a module with an integer constant for each
+  # valid value. For example, given:
+  #
+  #   enum Foo {
+  #     VALUE_A = 1;
+  #     VALUE_B = 5;
+  #     VALUE_C = 1234;
+  #   }
+  #
+  # The following Ruby code will be generated:
+  #
+  #   module Foo
+  #     VALUE_A = 1
+  #     VALUE_B = 5
+  #     VALUE_C = 1234
+  #   end
+  #
+  # An exception will be thrown if an enum field is assigned a value not in the
+  # enum. If an unknown enum value is found while parsing a message, this is
+  # treated like an unknown tag id. This matches the C++ library behavior.
+  #
+  # == Extensions
+  #
+  # Protocol Buffer extensions are not currently supported in this library.
+  #
+  # == Services
+  #
+  # Protocol Buffer service (RPC) definitions are ignored.
+
+  class Message
+    # Create a new Message of this class.
+    #
+    #   message = MyMessageClass.new(attributes)
+    #   # is equivalent to
+    #   message = MyMessageClass.new
+    #   message.attributes = attributes
+    def initialize(attributes = {})
+      @set_fields = self.class.initial_set_fields.dup
+      self.attributes = attributes
+    end
+
+    # Serialize this Message to the given IO stream using the Protocol Buffer
+    # wire format.
+    #
+    # Equivalent to, but more efficient than
+    #
+    #   io << message
+    #
+    # Returns +io+
+    def serialize(io)
+      Encoder.encode(io, self)
+      io
+    end
+
+    # Serialize this Message to a String and return it.
+    def serialize_to_string
+      sio = ProtocolBuffers.bin_sio
+      serialize(sio)
+      return sio.string
+    end
+    alias_method :to_s, :serialize_to_string
+
+    # Format this message into the given IO stream using the text format of Protocol Buffers.
+    def text_format(io, options = nil)
+      formatter = TextFormatter.new(options)
+      formatter.format(io, self)
+    end
+
+    # Format this message into a text and return it.
+    def text_format_to_string(options = nil)
+      sio = ProtocolBuffers.utf8_sio
+      text_format(sio, options)
+      return sio.string
+    end
+
+    def to_hash
+      self.class.to_hash(self)
+    end
+
+    def self.to_hash(message)
+      return nil if message == nil
+      return message.is_a?(String) ? message.dup : message unless message.is_a?(::ProtocolBuffers::Message)
+      message.fields.select do |tag, field|
+        message.value_for_tag?(tag)
+      end.inject(Hash.new) do |hash, (tag, field)|
+        value = message.value_for_tag(tag)
+        hash[field.name] = value.is_a?(::ProtocolBuffers::RepeatedField) ? value.map { |elem| to_hash(elem) } : to_hash(value)
+        hash
+      end
+    end
+
+    # Parse a Message of this class from the given IO/String. Since Protocol
+    # Buffers are not length delimited, this will read until the end of the
+    # stream.
+    #
+    # This does not call clear! beforehand, so this is logically equivalent to
+    #
+    #   new_message = self.class.new
+    #   new_message.parse(io)
+    #   merge_from(new_message)
+    def parse(io_or_string)
+      io = io_or_string
+      if io.is_a?(String)
+        io = ProtocolBuffers.bin_sio(io)
+      end
+      Decoder.decode(io, self)
+      return self
+    end
+
+    # Shortcut, simply calls self.new.parse(io)
+    def self.parse(io)
+      self.new.parse(io)
+    end
+
+    # Parse the text as a text representation of this class, and merge the parsed fields
+    # into the current message.
+    def parse_from_text(text)
+      parser = TextParser.new
+      parser.parse_text(text, self)
+      return self
+    end
+
+    # Shortcut, simply calls self.new.parse_from_text(text)
+    def self.parse_from_text(text)
+      self.new.parse_from_text(text)
+    end
+
+    # Merge the attribute values from +obj+ into this Message, which must be of
+    # the same class.
+    #
+    # Singular fields will be overwritten, except for embedded messages which
+    # will be merged. Repeated fields will be concatenated.
+    def merge_from(obj)
+      raise(ArgumentError, "Incompatible merge types: #{self.class} and #{obj.class}") unless obj.is_a?(self.class)
+      for tag, field in self.class.fields
+        next unless obj.value_for_tag?(tag)
+        value = obj.value_for_tag(tag)
+        merge_field(tag, value, field)
+      end
+    end
+
+    # Parse the string into a new Message of this class, and merge it into the
+    # current message like +merge_from+.
+    def merge_from_string(string)
+      merge_from(self.class.new.parse(string))
+    end
+
+    # Assign values to attributes in bulk.
+    #
+    #   message.attributes = { :field1 => value1, :field2 => value2 } -> message
+    def attributes=(hash = {})
+      hash.each do |name, value|
+        self.send("#{name}=", value)
+      end
+      self
+    end
+
+    # Comparison by class and field values.
+    def ==(obj)
+      return false unless obj.is_a?(self.class)
+      fields.each do |tag, _|
+        if value_for_tag?(tag)
+          return false unless (obj.value_for_tag?(tag) && value_for_tag(tag) == obj.value_for_tag(tag))
+        else
+          return false if obj.value_for_tag?(tag)
+        end
+      end
+      return true
+    end
+
+    # Comparison by class and field values.
+    def eql?(obj)
+      return false unless obj.is_a?(self.class)
+      fields.each do |tag, _|
+        if value_for_tag?(tag)
+          return false unless (obj.value_for_tag?(tag) && value_for_tag(tag).eql?(obj.value_for_tag(tag)))
+        else
+          return false if obj.value_for_tag?(tag)
+        end
+      end
+      return true
+    end
+
+    def hash
+      hash_code = 0
+      fields.each do |tag, _|
+        if value_for_tag?(tag)
+          hash_code = hash_code ^ value_for_tag(tag).hash
+        end
+      end
+      hash_code
+    end
+
+    # Reset all fields to the default value.
+    def clear!
+      fields.each { |tag, field| self.__send__("#{field.name}=", nil) }
+    end
+
+    # This is a shallow copy.
+    def dup
+      ret = self.class.new
+      fields.each do |tag, field|
+        val = self.__send__(field.name)
+        ret.__send__("#{field.name}=", val)
+      end
+      return ret
+    end
+
+    # Returns a hash of { tag => ProtocolBuffers::Field }
+    def self.fields
+      @fields || @fields = {}
+    end
+
+    def self.initial_set_fields
+      @set_fields ||= []
+    end
+
+    # Returns a hash of { tag => ProtocolBuffers::Field }
+    def fields
+      self.class.fields
+    end
+
+    # Find the field for the given attribute name. Returns a
+    # ProtocolBuffers::field
+    def self.field_for_name(name)
+      name = name.to_sym
+      field = fields.find { |tag,field| field.name == name }
+      field && field.last
+    end
+
+    # Equivalent to fields[tag]
+    def self.field_for_tag(tag)
+      fields[tag]
+    end
+
+    # Reflection: get the attribute value for the given tag id.
+    #
+    #   message.value_for_tag(message.class.field_for_name(:f1).tag)
+    #   # is equivalent to
+    #   message.f1
+    def value_for_tag(tag)
+      self.__send__(fields[tag].name)
+    end
+
+    def set_value_for_tag(tag, value)
+      self.__send__("#{fields[tag].name}=", value)
+    end
+
+    # Reflection: does this Message have the field set?
+    #
+    #   message.value_for_tag?(message.class.field_for_name(:f1).tag)
+    #   # is equivalent to
+    #   message.has_f1?
+    def value_for_tag?(tag)
+      @set_fields[tag] || false
+    end
+
+    # Gets the field, returning nil if not set
+    # If a block is given, this block is called and it's
+    # return value returned if the value is not set
+    def get(*nested_field_names, &b)
+      if nested_field_names.size == 1
+        field_name = nested_field_names.first
+        field = self.class.field_for_name(field_name)
+        raise ArgumentError.new unless field
+        unless self.value_for_tag?(field.tag)
+          return b ? b.call : nil
+        end
+        return self.value_for_tag(field.tag)
+      end
+      last_proto = nested_field_names[0..-2].inject(self) do |sub_proto, ifield_name|
+        sub_field = sub_proto.class.field_for_name(ifield_name)
+        raise ArgumentError.new unless sub_field
+        raise ArgumentError.new unless sub_field.is_a?(ProtocolBuffers::Field::MessageField)
+        unless sub_proto.value_for_tag?(sub_field.tag)
+          return b ? b.call : nil
+        end
+        sub_proto.value_for_tag(sub_field.tag)
+      end
+      last_field_name = nested_field_names.last
+      last_field = last_proto.class.field_for_name(last_field_name)
+      unless last_proto.value_for_tag?(last_field.tag)
+        return b ? b.call : nil
+      end
+      last_proto.value_for_tag(last_field.tag)
+    end
+
+    # Gets the field, throwing ArgumentError if not set
+    def get!(*nested_field_names)
+      get(*nested_field_names) { raise ArgumentError.new("#{nested_field_names} is not set") }
+    end
+
+    def inspect
+      ret = ProtocolBuffers.bin_sio
+      ret << "#<#{self.class.name}"
+      fields.each do |tag, field|
+        if value_for_tag?(tag)
+          value = field.inspect_value(self.__send__(field.name))
+        else
+          value = "<unset>"
+        end
+        ret << " #{field.name}=#{value}"
+      end
+      ret << ">"
+      return ret.string
+    end
+
+    def merge_field(tag, value, field = fields[tag]) # :nodoc:
+      if field.repeated?
+        if value.is_a?(Array)
+          self.__send__("#{field.name}=", self.__send__(field.name) + value)
+        else
+          self.__send__(field.name) << value
+        end
+      else
+        self.__send__("#{field.name}=", value)
+        @set_fields[tag] = true
+      end
+    end
+
+    def self.define_field(otype, type, name, tag, opts = {}) # :NODOC:
+      type = type.is_a?(Module) ? type : type.to_sym
+      name = name.to_sym
+      tag  = tag.to_i
+      raise("Field already exists for tag: #{tag}") if fields[tag]
+      field = Field.create(self, otype, type, name, tag, opts)
+      fields[tag] = field
+      field.add_methods_to(self)
+    end
+
+    def self.required(type, name, tag, opts = {}) # :NODOC:
+      define_field(:required, type, name, tag, opts)
+      @has_required_field = true
+    end
+
+    def self.optional(type, name, tag, opts = {}) # :NODOC:
+      define_field(:optional, type, name, tag, opts)
+    end
+
+    def self.repeated(type, name, tag, opts = {}) # :NODOC:
+      define_field(:repeated, type, name, tag, opts)
+    end
+
+    def notify_on_change(parent, tag)
+      @parent_for_notify = parent
+      @tag_for_notify = tag
+    end
+
+    def default_changed(tag)
+      @set_fields[tag] = true
+      if @parent_for_notify
+        @parent_for_notify.default_changed(@tag_for_notify)
+        @parent_for_notify = @tag_for_notify = nil
+      end
+    end
+
+    def self.set_fully_qualified_name(name)
+      @fully_qualified_name = name.dup.freeze
+    end
+
+    def self.fully_qualified_name
+      @fully_qualified_name
+    end
+
+    def fully_qualified_name
+      self.class.fully_qualified_name
+    end
+
+    def valid?
+      self.class.valid?(self)
+    end
+
+    def self.valid?(message, raise_exception=false)
+      return true unless @has_required_field
+
+      fields.each do |tag, field|
+        next if field.otype != :required
+        next if message.value_for_tag?(tag) && (field.class != Field::MessageField || message.value_for_tag(tag).valid?)
+        return false unless raise_exception
+        raise(ProtocolBuffers::EncodeError.new(field), "Required field '#{field.name}' is invalid")
+      end
+
+      true
+    end
+
+    def validate!
+      self.class.validate!(self)
+    end
+
+    def self.validate!(message)
+      valid?(message, true)
+    end
+
+    def remember_unknown_field(tag_int, value)
+      @unknown_fields || @unknown_fields = []
+      @unknown_fields << [tag_int, value]
+    end
+
+    # yields |tag_int, value| pairs
+    def each_unknown_field # :nodoc:
+      return unless @unknown_fields
+      @unknown_fields.each { |tag_int, value| yield tag_int, value }
+    end
+
+    def unknown_field_count
+      (@unknown_fields || []).size
+    end
+
+    # left in for compatibility with previously created .pb.rb files -- no longer used
+    def self.gen_methods! # :NODOC:
+      @methods_generated = true
+    end
+
+    protected
+
+    def initialize_field(tag)
+      field = fields[tag]
+      new_value = field.default_value
+      self.instance_variable_set("@#{field.name}", new_value)
+      if field.kind_of? Field::AggregateField
+        new_value.notify_on_change(self, tag)
+      end
+      @set_fields[tag] = false
+    end
+
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/rpc.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/rpc.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/rpc.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/rpc.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,23 @@
+module ProtocolBuffers
+  class Rpc
+    attr_reader :name, :proto_name, :request_class, :response_class, :service_class
+
+    def initialize(name, proto_name, request_class, response_class, service_class)
+      @name = name
+      @proto_name = proto_name.dup.freeze
+      @request_class = request_class
+      @response_class = response_class
+      @service_class = service_class
+    end
+
+    def to_s
+      {
+        :name => name,
+        :proto_name => proto_name,
+        :request_class_name => request_class.name,
+        :response_class_name => response_class.name,
+        :service_class_name => service_class.name
+      }.to_s
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/service.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/service.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/service.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/service.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,27 @@
+require 'protocol_buffers/runtime/rpc'
+
+module ProtocolBuffers
+  class Service
+
+    private_class_method :new
+
+    def self.set_fully_qualified_name(name)
+      @fully_qualified_name = name.dup.freeze
+    end
+
+    def self.fully_qualified_name
+      @fully_qualified_name
+    end
+
+    def self.rpcs
+      @rpcs
+    end
+
+    def self.rpc(name, proto_name, request_type, response_type)
+      @rpcs ||= Array.new
+      @rpcs = @rpcs.dup
+      @rpcs << Rpc.new(name.to_sym, proto_name, request_type, response_type, self).freeze
+      @rpcs.freeze
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_formatter.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_formatter.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_formatter.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_formatter.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,116 @@
+module ProtocolBuffers
+  class TextFormatter
+    def initialize(options = nil)
+      @options = options || {}
+    end
+
+    def format(io, message, options = nil)
+      message.validate!
+      options ||= {}
+      options = options.merge(@options)
+      options[:nest] ||= 0
+
+      if options[:short]
+        indent = ""
+        newline = " "
+      else
+        indent = "  " * options[:nest]
+        newline = "\n"
+      end
+
+      sep = ""
+      message.fields.each do |tag, field|
+        next unless message.value_for_tag?(tag)
+        value = message.value_for_tag(tag)
+        if field.repeated?
+          next if value.size == 0
+          value.each do |v|
+            io.write sep; sep = newline
+
+            format_field(io, field, v, indent, newline, options)
+          end
+        else
+          io.write sep; sep = newline
+
+          format_field(io, field, value, indent, newline, options)
+        end
+      end
+
+      message.each_unknown_field do |tag_int, value|
+        io.write sep; sep = newline
+
+        wire_type = tag_int & 0x7
+        id = tag_int >> 3
+        format_unknown_field(io, wire_type, id, value, options)
+      end
+
+      io.write sep if !options[:short]
+
+      io
+    end
+
+    def format_field(io, field, value, indent, newline, options)
+      if field.kind_of? Field::GroupField
+        name = value.class.name.sub(/\A.*::/, '')
+      else
+        name = field.name
+      end
+
+      io.write "#{indent}#{name}"
+      if field.kind_of? Field::AggregateField
+        io.write " "
+      else
+        io.write ": "
+      end
+      field.text_format(io, value, options)
+    end
+
+    def format_unknown_field(io, wire_type, id, value, options)
+      options = options.dup
+      options[:nest] ||= 0
+
+      if options[:short]
+        indent = ""
+        newline = " "
+      else
+        indent = "  " * options[:nest]
+        newline = "\n"
+      end
+
+      if wire_type == 3
+        options[:nest] += 1
+
+        io.write "#{indent}#{id} {#{newline}"
+      else
+        io.write "#{indent}#{id}: "
+      end
+
+      case wire_type
+      when 0 # VARINT
+        io.write "#{value}"
+
+      when 1 # FIXED64
+        lo, hi = value.unpack("V2")
+        io.write "0x%016x" % (hi << 32 | lo)
+
+      when 5 # FIXED32
+        io.write "0x%08x" % value.unpack("V")
+
+      when 2 # LENGTH_DELIMITED
+        value = value.unpack("C*").map { |b| "\\x%02x" % b }.join(nil)
+        io.write "\"#{value}\""
+
+      when 3 # START_GROUP
+        format(io, value, options)
+
+      when 4 # END_GROUP: never appear
+        raise(EncodeError, "Unexpected wire type END_GROUP")
+      else
+        raise(EncodeError, "unknown wire type: #{wire_type}")
+      end
+      if wire_type == 3
+        io.write "#{indent}}"
+      end
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,335 @@
+#
+# DO NOT MODIFY!!!!
+# This file is automatically generated by Racc 1.4.12
+# from Racc grammer file "".
+#
+
+require 'racc/parser.rb'
+
+require 'protocol_buffers/runtime/text_scanner'
+
+module ProtocolBuffers
+  class TextParser < Racc::Parser
+
+module_eval(<<'...end text_parser.ry/module_eval...', 'text_parser.ry', 96)
+def initialize
+  @msgstack = []
+end
+
+attr_accessor :yydebug
+
+def parse_text(text, message)
+  scanner = ProtocolBuffers::TextScanner.new(text)
+  parse_from_scanner(scanner.enum_for(:scan), message)
+end
+
+def parse_from_scanner(scanner, message)
+  @msgstack.clear
+  push_message(message)
+  yyparse(scanner, :each)
+  pop_message
+end
+
+private :yyparse, :do_parse
+private
+def current_message
+  @msgstack.last
+end
+
+def push_message(message)
+  @msgstack.push(message)
+end
+
+def pop_message
+  @msgstack.pop
+end
+
+def set_field(field, value)
+  msg = current_message
+  if field.repeated?
+    msg.value_for_tag(field.tag) << value
+  else
+    msg.set_value_for_tag(field.tag, value)
+  end
+  msg
+end
+...end text_parser.ry/module_eval...
+##### State transition tables begin ###
+
+racc_action_table = [
+     2,     6,     6,    10,     6,    11,    23,    24,    29,    28,
+    13,     7,     7,    30,     7,    15,    20,    17,    19,    18,
+     9,     8,    25 ]
+
+racc_action_check = [
+     1,    26,     1,     5,    27,     5,    12,    12,    26,    24,
+     7,    26,     1,    27,    27,     9,     9,     9,     9,     9,
+     4,     2,    16 ]
+
+racc_action_pointer = [
+   nil,     0,    21,   nil,    13,    -5,   nil,     8,   nil,    13,
+   nil,   nil,    -7,   nil,   nil,   nil,    19,   nil,   nil,   nil,
+   nil,   nil,   nil,   nil,     7,   nil,    -1,     2,   nil,   nil,
+   nil ]
+
+racc_action_default = [
+    -1,   -21,   -21,    -2,    -9,   -21,   -11,   -21,    31,   -10,
+    -5,    -7,   -21,   -13,    -3,    -4,   -15,   -16,   -17,   -18,
+   -19,    -1,    -1,   -12,   -21,   -20,   -21,   -21,   -14,    -6,
+    -8 ]
+
+racc_goto_table = [
+     1,    22,    21,    14,    12,    16,   nil,   nil,   nil,   nil,
+   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
+   nil,    26,    27 ]
+
+racc_goto_check = [
+     1,     7,     6,     4,     8,     9,   nil,   nil,   nil,   nil,
+   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
+   nil,     1,     1 ]
+
+racc_goto_pointer = [
+   nil,     0,   nil,   nil,    -6,   nil,    -8,   -10,    -3,    -4 ]
+
+racc_goto_default = [
+   nil,   nil,     3,     4,   nil,     5,   nil,   nil,   nil,   nil ]
+
+racc_reduce_table = [
+  0, 0, :racc_error,
+  0, 16, :_reduce_1,
+  2, 16, :_reduce_none,
+  3, 17, :_reduce_3,
+  3, 17, :_reduce_4,
+  0, 21, :_reduce_5,
+  5, 17, :_reduce_6,
+  0, 22, :_reduce_7,
+  5, 17, :_reduce_8,
+  1, 20, :_reduce_none,
+  2, 20, :_reduce_none,
+  1, 18, :_reduce_11,
+  3, 18, :_reduce_12,
+  1, 23, :_reduce_13,
+  3, 23, :_reduce_14,
+  1, 19, :_reduce_none,
+  1, 19, :_reduce_none,
+  1, 19, :_reduce_none,
+  1, 19, :_reduce_none,
+  1, 24, :_reduce_none,
+  2, 24, :_reduce_20 ]
+
+racc_reduce_n = 21
+
+racc_shift_n = 31
+
+racc_token_table = {
+  false => 0,
+  :error => 1,
+  :identifier => 2,
+  :string => 3,
+  :integer => 4,
+  :bool => 5,
+  :float => 6,
+  ":" => 7,
+  "<" => 8,
+  ">" => 9,
+  "{" => 10,
+  "}" => 11,
+  "[" => 12,
+  "]" => 13,
+  "." => 14 }
+
+racc_nt_base = 15
+
+racc_use_result_var = true
+
+Racc_arg = [
+  racc_action_table,
+  racc_action_check,
+  racc_action_default,
+  racc_action_pointer,
+  racc_goto_table,
+  racc_goto_check,
+  racc_goto_default,
+  racc_goto_pointer,
+  racc_nt_base,
+  racc_reduce_table,
+  racc_token_table,
+  racc_shift_n,
+  racc_reduce_n,
+  racc_use_result_var ]
+
+Racc_token_to_s_table = [
+  "$end",
+  "error",
+  "identifier",
+  "string",
+  "integer",
+  "bool",
+  "float",
+  "\":\"",
+  "\"<\"",
+  "\">\"",
+  "\"{\"",
+  "\"}\"",
+  "\"[\"",
+  "\"]\"",
+  "\".\"",
+  "$start",
+  "message",
+  "field",
+  "field_name",
+  "primitive_value",
+  "message_field_head",
+  "@1",
+  "@2",
+  "qualified_name",
+  "concat_string" ]
+
+Racc_debug_parser = false
+
+##### State transition tables end #####
+
+# reduce 0 omitted
+
+module_eval(<<'.,.,', 'text_parser.ry', 6)
+  def _reduce_1(val, _values, result)
+                     result = current_message
+
+    result
+  end
+.,.,
+
+# reduce 2 omitted
+
+module_eval(<<'.,.,', 'text_parser.ry', 12)
+  def _reduce_3(val, _values, result)
+                     set_field(val[0], val[2])
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 16)
+  def _reduce_4(val, _values, result)
+                     field, enum_symbol = val[0], val[2]
+                 unless field.kind_of?(ProtocolBuffers::Field::EnumField)
+                   raise Racc::ParseError, "not a enum field: %s" % field.name
+                 end
+                 value = field.value_from_name(enum_symbol)
+                 unless value
+                   raise Racc::ParseError, "enum type %s has no value named %s" % [field.name, enum_symbol]
+                 end
+                 set_field(field, value)
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 28)
+  def _reduce_5(val, _values, result)
+                     field = _values[-2]
+                 push_message(field.proxy_class.new)
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 33)
+  def _reduce_6(val, _values, result)
+                     pop_message
+                 set_field(val[0], val[3])
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 38)
+  def _reduce_7(val, _values, result)
+                     field = _values[-2]
+                 push_message(field.proxy_class.new)
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 43)
+  def _reduce_8(val, _values, result)
+                     pop_message
+                 set_field(val[0], val[3])
+
+    result
+  end
+.,.,
+
+# reduce 9 omitted
+
+# reduce 10 omitted
+
+module_eval(<<'.,.,', 'text_parser.ry', 52)
+  def _reduce_11(val, _values, result)
+                     field = current_message.class.field_for_name(val[0])
+                 if field
+                   return field
+                 end
+
+                 # fallback for case mismatch in group fields.
+                 field = current_message.fields.find { |tag,field| field.name.to_s.downcase == val[0].downcase }
+                 field &&= field.last
+                 if field && field.kind_of?(ProtocolBuffers::Field::GroupField)
+                   return field
+                 end
+
+                 raise Racc::ParseError, "no such field %s in %s" % [val[0], current_message.class]
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 68)
+  def _reduce_12(val, _values, result)
+                     raise NotImplementedError, "extension is not yet supported"
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 73)
+  def _reduce_13(val, _values, result)
+                           result = [val[0]]
+
+    result
+  end
+.,.,
+
+module_eval(<<'.,.,', 'text_parser.ry', 77)
+  def _reduce_14(val, _values, result)
+                           result = (val[0] << val[2])
+
+    result
+  end
+.,.,
+
+# reduce 15 omitted
+
+# reduce 16 omitted
+
+# reduce 17 omitted
+
+# reduce 18 omitted
+
+# reduce 19 omitted
+
+module_eval(<<'.,.,', 'text_parser.ry', 87)
+  def _reduce_20(val, _values, result)
+                          result = val[0] + val[1]
+
+    result
+  end
+.,.,
+
+def _reduce_none(val, _values, result)
+  val[0]
+end
+
+  end   # class TextParser
+  end   # module ProtocolBuffers
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.ry /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.ry
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.ry	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_parser.ry	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,136 @@
+# vim: set ft=racc fenc=us-ascii : -*- mode: racc coding: US-ASCII -*-
+class ProtocolBuffers::TextParser
+token identifier string integer bool float
+rule
+  message    : /* none */
+               {
+                 result = current_message
+               }
+             | message field
+
+  field      : field_name ':' primitive_value
+               {
+                 set_field(val[0], val[2])
+               }
+             | field_name ':' identifier
+               {
+                 field, enum_symbol = val[0], val[2]
+                 unless field.kind_of?(ProtocolBuffers::Field::EnumField)
+                   raise Racc::ParseError, "not a enum field: %s" % field.name
+                 end
+                 value = field.value_from_name(enum_symbol)
+                 unless value
+                   raise Racc::ParseError, "enum type %s has no value named %s" % [field.name, enum_symbol]
+                 end
+                 set_field(field, value)
+               }
+             | message_field_head '<'
+               {
+                 field = _values[-2]
+                 push_message(field.proxy_class.new)
+               }
+               message '>'
+               {
+                 pop_message
+                 set_field(val[0], val[3])
+               }
+             | message_field_head '{'
+               {
+                 field = _values[-2]
+                 push_message(field.proxy_class.new)
+               }
+               message '}'
+               {
+                 pop_message
+                 set_field(val[0], val[3])
+               }
+
+  message_field_head : field_name
+                     | field_name ':'
+
+  field_name : identifier
+               {
+                 field = current_message.class.field_for_name(val[0])
+                 if field
+                   return field
+                 end
+
+                 # fallback for case mismatch in group fields.
+                 field = current_message.fields.find { |tag,field| field.name.to_s.downcase == val[0].downcase }
+                 field &&= field.last
+                 if field && field.kind_of?(ProtocolBuffers::Field::GroupField)
+                   return field
+                 end
+
+                 raise Racc::ParseError, "no such field %s in %s" % [val[0], current_message.class]
+               }
+             | '[' qualified_name ']'
+               {
+                 raise NotImplementedError, "extension is not yet supported"
+               }
+
+  qualified_name   : identifier
+                     {
+                       result = [val[0]]
+                     }
+                   | qualified_name '.' identifier
+                     {
+                       result = (val[0] << val[2])
+                     }
+
+  primitive_value : concat_string
+                  | integer
+                  | float
+                  | bool
+  concat_string   : string
+                  | concat_string string
+                    {
+                      result = val[0] + val[1]
+                    }
+end
+
+---- header
+require 'protocol_buffers/runtime/text_scanner'
+
+---- inner
+def initialize
+  @msgstack = []
+end
+
+attr_accessor :yydebug
+
+def parse_text(text, message)
+  scanner = ProtocolBuffers::TextScanner.new(text)
+  parse_from_scanner(scanner.enum_for(:scan), message)
+end
+
+def parse_from_scanner(scanner, message)
+  @msgstack.clear
+  push_message(message)
+  yyparse(scanner, :each)
+  pop_message
+end
+
+private :yyparse, :do_parse
+private
+def current_message
+  @msgstack.last
+end
+
+def push_message(message)
+  @msgstack.push(message)
+end
+
+def pop_message
+  @msgstack.pop
+end
+
+def set_field(field, value)
+  msg = current_message
+  if field.repeated?
+    msg.value_for_tag(field.tag) << value
+  else
+    msg.set_value_for_tag(field.tag, value)
+  end
+  msg
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_scanner.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_scanner.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_scanner.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/text_scanner.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,94 @@
+# -*- coding: UTF-8 -*-
+
+require 'strscan'
+require 'racc/parser'
+
+module ProtocolBuffers; end
+
+class ProtocolBuffers::TextScanner
+  def initialize(text)
+    @text = text.encode(Encoding::UTF_8)
+    @scanner = StringScanner.new(@text)
+    @lineno = 1
+  end
+
+  attr_reader :lineno
+
+  def scan
+    while @scanner.rest?
+      case
+      when @scanner.skip(/[ \t\v]+/)
+        next
+      when @scanner.skip(/#.*?$/)
+        next
+      when @scanner.skip(/\r?\n|\r/)
+        @lineno += 1
+        next
+      when @scanner.scan(/[.:<>{}\[\]]/)
+        c = @scanner[0]
+        yield [c, c]
+      when @scanner.scan(/true/)
+        yield [:bool, true]
+      when @scanner.scan(/false/)
+        yield [:bool, false]
+      when @scanner.scan(/["']/)
+        quote = @scanner[0]
+        line = lineno
+        if @scanner.scan(/(.*?)(?<!\\)#{quote}/)
+          str = @scanner[1]
+          yield [:string, unescape(str)]
+        else
+          raise Racc::ParseError, "unterminated string from line #{line}"
+        end
+      when @scanner.scan(/([+-])?[0-9]+\.[0-9]+([Ee][+-]?[0-9]+)?/)
+        yield [:float, Float(@scanner[0])]
+      when @scanner.scan(/([+-])?0[Bb]([01]+)/)
+        yield [:integer, Integer(@scanner[0], 2)]
+      when @scanner.scan(/([+-])?0[Xx]([[:xdigit:]]+)/)
+        yield [:integer, Integer(@scanner[0], 16)]
+      when @scanner.scan(/([+-])?0[Oo]?([0-7]+)/)
+        yield [:integer, Integer(@scanner[0], 8)]
+      when @scanner.scan(/([+-])?(?:0[Dd])?([0-9]+)/)
+        yield [:integer, Integer(@scanner[0], 10)]
+      when @scanner.scan(/[[:alpha:]_][[:alnum:]_]*/)
+        yield [:identifier, @scanner[0]]
+      else
+        line = lineno
+        raise Racc::ParseError, "unexpected character at: line #{line}: #{@scanner.rest.inspect}"
+      end
+    end
+    yield [false, nil]
+  end
+
+  private
+  ESCAPE_SEQUENCE = {
+    'a' => "\a",
+    'b' => "\b",
+    'f' => "\f",
+    'n' => "\n",
+    'r' => "\r",
+    't' => "\t",
+    'v' => "\v",
+    '\\' => "\\",
+    '"' => '"',
+    "'" => "'",
+  }.freeze
+
+  def unescape(str)
+    str.gsub(%r!
+      \\ (?:
+        [Xx]([[:xdigit:]]{1,2}) |
+        ([0-7]{1,3})            |
+        ([abfnrtv\\'"])
+    )!x) do
+      case
+      when $1
+        Integer($1, 16).chr
+      when $2
+        Integer($2, 8).chr
+      when $3
+        ESCAPE_SEQUENCE[$3]
+      end
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/varint.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/varint.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/varint.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/runtime/varint.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,64 @@
+module ProtocolBuffers
+
+  module VarintPure # :nodoc:
+    def encode(io, int_val)
+      if int_val < 0
+        # negative varints are always encoded with the full 10 bytes
+        int_val = int_val & 0xffffffff_ffffffff
+      end
+      loop do
+        byte = int_val & 0b0111_1111
+        int_val >>= 7
+        if int_val == 0
+          io << byte.chr
+          break
+        else
+          io << (byte | 0b1000_0000).chr
+        end
+      end
+    end
+
+    def decode(io)
+      int_val = 0
+      shift = 0
+      loop do
+        raise(DecodeError, "too many bytes when decoding varint") if shift >= 64
+        byte = io.getbyte
+        int_val |= (byte & 0b0111_1111) << shift
+        shift += 7
+        return int_val if (byte & 0b1000_0000) == 0
+      end
+    end
+  end
+
+  class Varint
+    def self.encodeZigZag32(int_val)
+      (int_val << 1) ^ (int_val >> 31)
+    end
+
+    def self.encodeZigZag64(int_val)
+      (int_val << 1) ^ (int_val >> 63)
+    end
+
+    def self.decodeZigZag32(int_val)
+      (int_val >> 1) ^ -(int_val & 1)
+    end
+
+    class << self
+      alias_method :decodeZigZag64, :decodeZigZag32
+    end
+  end
+
+end
+
+# optionally load C extension
+begin
+  require 'varint/varint'
+  class ProtocolBuffers::Varint
+    extend ::Varint
+  end
+rescue LoadError
+  class ProtocolBuffers::Varint
+    extend ::ProtocolBuffers::VarintPure
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/version.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/version.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/version.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers/version.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,3 @@
+module ProtocolBuffers
+  VERSION = "1.6.1"
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/lib/protocol_buffers.rb	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,28 @@
+require 'stringio'
+
+if RUBY_VERSION < "1.9"
+  raise("This version of ruby-protocol-buffers no longer supports Ruby 1.8.7")
+end
+
+module ProtocolBuffers
+  def self.bin_sio(*args)
+    sio = StringIO.new(*args)
+    sio.set_encoding(Encoding::BINARY) if
+      sio.respond_to?(:set_encoding) and
+      sio.external_encoding != Encoding::BINARY
+    sio
+  end
+
+  def self.utf8_sio(*args)
+    sio = StringIO.new(*args)
+    sio.set_encoding('utf-8') if
+      sio.respond_to?(:set_encoding) and
+      sio.external_encoding != Encoding::UTF_8
+    sio
+  end
+end
+
+require 'protocol_buffers/version'
+require 'protocol_buffers/runtime/message'
+require 'protocol_buffers/runtime/enum'
+require 'protocol_buffers/runtime/service'
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/LICENSE /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/LICENSE
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/LICENSE	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/LICENSE	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,24 @@
+Copyright (c) 2009, Decho Corporation
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Decho Corporation nor the names of its contributors
+      may be used to endorse or promote products derived from this software
+      without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Rakefile /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Rakefile
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Rakefile	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/Rakefile	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,13 @@
+require "bundler/gem_tasks"
+
+Dir['tasks/**/*.rake'].each { |t| load t }
+
+task :default => [:spec]
+
+file 'lib/protocol_buffers/runtime/text_parser.rb' => 'lib/protocol_buffers/runtime/text_parser.ry' do |t|
+  sh 'racc', '-o', t.name, *t.prerequisites
+end
+
+task :text_parser => 'lib/protocol_buffers/runtime/text_parser.rb'
+task :spec => :text_parser
+task :build => :text_parser
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/README.md /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/README.md
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/README.md	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/README.md	2020-08-31 15:47:26.412000000 +0800
@@ -0,0 +1,169 @@
+# Ruby Protocol Buffers
+
+[![Build Status](https://travis-ci.org/codekitchen/ruby-protocol-buffers.png?branch=master)](https://travis-ci.org/codekitchen/ruby-protocol-buffers)
+
+Protocol Buffers are a way of encoding structured data in an efficient yet
+extensible format. Google uses Protocol Buffers for almost all of its
+internal RPC protocols and file formats.
+
+This library has two components: a compiler to turn `.proto` definitions
+into Ruby modules (extension `.pb.rb`), and a runtime to use protocol
+buffers defined by these modules.
+
+The compiler relies on Google's C++ based compiler (`protoc`) for much of
+the heavy lifting -- this has huge advantages in ensuring compatibility and
+correctness. If you don't need cross-language interoperability you can
+create Message classes directly in ruby, in which case `protoc` is not
+needed. See "Writing Message Classes Directly" below.
+
+This library is heavily optimized for encoding and decoding speed.
+
+Because this is a tool for generating code, the RDoc documentation is a bit
+unusual. See the text in the ProtocolBuffers::Message class for details on
+what code is generated.
+
+## Installation
+
+    $ gem install ruby-protocol-buffers
+
+If you want to compile .proto files to ruby, you'll need `protoc` version >=
+2.2 (the Google Protocol Buffer compiler) installed in the environment where
+you will be compiling them.  You do not need `protoc` installed to use the
+generated `.pb.rb` files.
+
+For greater performance, consider installing the varint gem as well.  This
+optional gem builds a small C extension to make parsing protocol buffers
+faster. If your application uses a Gemfile, add varint to the Gemfile
+alongside ruby-protocol-buffers.
+
+## Example
+
+Given the file test.proto:
+
+```protobuf
+package Test;
+
+message MyMessage {
+  optional string myField = 1;
+}
+```
+
+Compile it to ruby using the command:
+
+    $ ruby-protoc test.proto
+
+Then it can be used from ruby code:
+
+```ruby
+require 'test.pb'
+msg = Test::MyMessage.new(:myField => 'zomgkittenz')
+open("test_msg", "wb") do |f|
+  msg.serialize(f)
+end
+encoded = msg.serialize_to_string # or msg.to_s
+Test::MyMessage.parse(encoded) == msg # true
+```
+
+## Writing Message Classes Directly
+
+Protocol Buffer definitions are often shared between applications written in
+different programming languages, and so are normally defined in .proto files
+and translated to ruby using the `ruby-protoc` binary.
+
+However, it's quite simple to write `ProtocolBuffers::Message` classes
+directly when a .proto file isn't needed.
+
+```ruby
+require 'protocol_buffers'
+
+class User < ProtocolBuffers::Message
+  required :string, :name, 1
+  required :string, :email, 2
+  optional :int32, :logins, 3
+end
+
+class Group < ProtocolBuffers::Message
+  repeated User, :users, 1
+  repeated Group, :subgroups, 2
+
+  module GroupType
+    include ProtocolBuffers::Enum
+    Study = 1
+    Play = 2
+  end
+
+  optional GroupType, :group_type, 3
+end
+```
+
+This code is essentially equivalent to the code `ruby-protoc` will generate
+if given this .proto file:
+
+```protobuf
+message User {
+  required string name = 1;
+  required string email = 2;
+  optional int32 logins = 3;
+}
+
+message Group {
+  repeated User users = 1;
+  repeated Group subgroups = 2;
+
+  enum GroupType {
+    Study = 1;
+    Play = 2;
+  }
+
+  optional GroupType group_type = 3;
+}
+
+```
+
+Using a hand-written Message subclass is the same as using a Message class
+generated by `ruby-protoc`.
+
+```ruby
+group = Group.new(:group_type => Group::GroupType::Play)
+group.users << User.new(:name => 'test user', :email => 'test@example.com')
+open("group1.test", "wb") do |f|
+  group.serialize(f)
+end
+```
+
+## Features
+
+### Supported Features
+
+* messages, enums, field types, all basic protobuf features
+* packages
+* imports
+* nested types
+* passing on unknown fields when re-serializing a message
+* groups
+* RPC stubbing
+* formatting to and parsing from text format
+
+### Unsupported Features
+
+* extensions
+* packed option (could be useful)
+* accessing custom options
+
+### Probably Never to be Supported
+
+* the unsupported options (java_*, optimize_for, message_set_wire_format,
+  deprecated)
+
+## Authors
+
+Brian Palmer (http://github.com/codekitchen)
+
+## Source
+
+http://github.com/mozy/ruby-protocol-buffers
+
+## License
+
+See the LICENSE file included with the distribution for licensing and
+copyright details.
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/ruby-protocol-buffers.gemspec /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/ruby-protocol-buffers.gemspec
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/ruby-protocol-buffers.gemspec	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/ruby-protocol-buffers.gemspec	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,31 @@
+# -*- encoding: utf-8 -*-
+lib = File.expand_path('../lib', __FILE__)
+$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
+require "protocol_buffers/version"
+
+Gem::Specification.new do |gem|
+  gem.name          = "ruby-protocol-buffers"
+  gem.version       = ProtocolBuffers::VERSION
+  gem.authors       = ["Brian Palmer", "Benedikt BÃ¶hm", "Rob Marable", "Paulo Luis Franchini Casaretto"]
+  gem.email         = ["brian@codekitchen.net", "bb@xnull.de"]
+  gem.summary       = %{Ruby compiler and runtime for the google protocol buffers library.}
+  gem.homepage      = "https://github.com/codekitchen/ruby-protocol-buffers"
+
+  gem.files         = `git ls-files`.split($/) + ['lib/protocol_buffers/runtime/text_parser.rb']
+  gem.executables   = gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }
+  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})
+  gem.require_paths = ["lib"]
+
+  gem.license       = 'BSD'
+
+  gem.extra_rdoc_files << "Changelog.md"
+
+  gem.add_development_dependency "autotest-standalone"
+  gem.add_development_dependency "autotest-growl"
+  gem.add_development_dependency "rake"
+  gem.add_development_dependency "rake-compiler"
+  gem.add_development_dependency "simplecov"
+  gem.add_development_dependency "rspec", "~> 2.14"
+  gem.add_development_dependency "yard"
+  gem.add_development_dependency "racc", "~> 1.4.12"
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/compiler_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/compiler_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/compiler_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/compiler_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,76 @@
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers'
+require 'protocol_buffers/compiler'
+
+require 'protocol_buffers/compiler/file_descriptor_to_ruby'
+
+require 'tmpdir'
+require 'tempfile'
+describe ProtocolBuffers, "compiler" do
+
+  test_files = Dir[File.join(File.dirname(__FILE__), "proto_files", "*.proto")]
+
+  before do
+    pending "need protoc installed" unless has_compiler?
+  end
+
+  test_files.each do |file|
+    next if File.basename(file) == 'depends.proto'
+
+    it "can compile #{File.basename(file)}" do
+      proc do
+        ProtocolBuffers::Compiler.compile_and_load(file)
+      end.should_not raise_error()
+    end
+  end
+
+  it 'can compile and instantiate a proto with nested dependencies' do
+    protocfile = Tempfile.new('ruby-protoc')
+    protocfile.binmode
+
+    ProtocolBuffers::Compiler.compile(protocfile.path, %w(
+      spec/proto_files/simple.proto
+      spec/proto_files/nested/child.proto
+      spec/proto_files/depends.proto
+    ), :include_dirs => %w(spec/proto_files))
+
+
+    descriptor_set = Google::Protobuf::FileDescriptorSet.parse(protocfile)
+    protocfile.close(true)
+
+    Dir.mktmpdir do |dir|
+      descriptor_set.file.each do |file|
+        name = file.name
+        path = File.join(dir, File.dirname(name), File.basename(name, '.proto') + '.pb.rb')
+        FileUtils.mkdir_p File.dirname(path)
+        File.open(path, "w") {|f|
+          FileDescriptorToRuby.new(file).write(f)
+        }
+      end
+
+      $LOAD_PATH << dir
+      load File.join(dir, 'depends.pb.rb')
+    end
+  end
+
+  it "can compile and instantiate a message in a package with under_scores" do
+    Object.send(:remove_const, :UnderScore) if defined?(UnderScore)
+
+    ProtocolBuffers::Compiler.compile_and_load(
+      File.join(File.dirname(__FILE__), "proto_files", "under_score_package.proto"))
+
+    proc do
+      under_test = UnderScore::UnderTest.new
+    end.should_not raise_error()
+  end
+
+  it "should compile and correctly translate" do
+    ProtocolBuffers::Compiler.compile_and_load(
+      File.join(File.dirname(__FILE__), "proto_files", "simple.proto"))
+    ProtocolBuffers::Compiler.compile_and_load(
+      File.join(File.dirname(__FILE__), "proto_files", "featureful.proto"))
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/fields_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/fields_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/fields_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/fields_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,103 @@
+# encoding: binary
+
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+require 'stringio'
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers/runtime/field'
+
+describe ProtocolBuffers, "fields" do
+
+  def mkfield(ftype)
+    ProtocolBuffers::Field.const_get(ftype).new(:optional, "test", 1)
+  end
+
+  it "checks bounds on varint field types" do
+    u32 = mkfield(:Uint32Field)
+    proc { u32.check_valid(0xFFFFFFFF) }.should_not raise_error()
+    proc { u32.check_valid(0x100000000) }.should raise_error(ArgumentError)
+    proc { u32.check_valid(-1) }.should raise_error(ArgumentError)
+
+    u64 = mkfield(:Uint64Field)
+    proc { u64.check_valid(0xFFFFFFFF_FFFFFFFF) }.should_not raise_error()
+    proc { u64.check_valid(0x100000000_00000000) }.should raise_error(ArgumentError)
+    proc { u64.check_valid(-1) }.should raise_error(ArgumentError)
+  end
+
+  it "properly encodes and decodes negative varints" do
+    val = -2082844800000000
+    str = "\200\300\313\274\236\265\246\374\377\001"
+    sio = ProtocolBuffers.bin_sio
+    ProtocolBuffers::Varint.encode(sio, val)
+    sio.string.should == str
+    sio.rewind
+    val2 = ProtocolBuffers::Varint.decode(sio)
+    int64 = mkfield(:Int64Field)
+    int64.deserialize(val2).should == val
+    proc { int64.check_value(int64.deserialize(val2)) }.should_not raise_error
+  end
+
+  context "UTF-8 encoding of length-delimited fields" do
+    if RUBY_VERSION < "1.9"
+      pending "UTF-8 validation only happens in ruby 1.9+"
+    else
+
+      before :each do
+        @good_utf   = "\xc2\xa1hola\x21"
+        @bad_utf    = "\xc2"
+        @good_ascii = "!hola!".force_encoding("us-ascii")
+
+        @good_utf_io   = proc { StringIO.new(@good_utf) }
+        @bad_utf_io    = proc { StringIO.new(@bad_utf) }
+        @good_ascii_io = proc { StringIO.new(@good_ascii) }
+
+        @s = mkfield(:StringField)
+        @b = mkfield(:BytesField)
+      end
+
+      context "string fields" do
+
+        it "forces UTF-8 on serializing" do
+          @s.serialize(@good_utf).encoding.should == Encoding::UTF_8
+          proc { @s.check_valid(@s.serialize(@good_utf)) }.should_not raise_error()
+
+          @s.serialize(@good_ascii).encoding.should == Encoding::UTF_8
+          proc { @s.check_valid(@s.serialize(@good_ascii)) }.should_not raise_error()
+
+          proc { @s.serialize(@bad_utf) }.should raise_error(ArgumentError)
+        end
+
+        it "forces UTF-8 on deserializing" do
+          @s.deserialize(@good_utf_io[]).encoding.should == Encoding::UTF_8
+          proc { @s.check_valid(@s.deserialize(@good_utf_io[])) }.should_not raise_error()
+
+          @s.deserialize(@good_ascii_io[]).encoding.should == Encoding::UTF_8
+          proc { @s.check_valid(@s.deserialize(@good_ascii_io[])) }.should_not raise_error()
+
+          @s.deserialize(@bad_utf_io[]).encoding.should == Encoding::UTF_8
+          proc { @s.check_valid(@s.deserialize(@bad_utf_io[])) }.should raise_error(ArgumentError)
+        end
+      end
+
+      context "byte fields" do
+
+        it "does not force UTF-8 on deserializing" do
+          @b.deserialize(@good_utf_io[]).encoding.should == Encoding::BINARY
+          proc { @b.check_valid(@b.deserialize(@good_utf_io[])) }.should_not raise_error()
+
+          @b.deserialize(@good_ascii_io[]).encoding.should == Encoding.find("us-ascii")
+          proc { @b.check_valid(@b.deserialize(@good_ascii_io[])) }.should_not raise_error()
+
+          @b.deserialize(@bad_utf_io[]).encoding.should == Encoding::BINARY
+          proc { @b.check_valid(@b.deserialize(@bad_utf_io[])) }.should_not raise_error()
+        end
+      end
+    end
+  end
+
+  it "provides a reader for proxy_class on message fields" do
+    ProtocolBuffers::Field::MessageField.new(nil, :optional, :fake_name, 1).should respond_to(:proxy_class)
+    ProtocolBuffers::Field::MessageField.new(Class, :optional, :fake_name, 1).proxy_class.should == Class
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/message_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/message_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/message_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/message_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,141 @@
+# encoding: binary
+
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers'
+
+describe ProtocolBuffers, "message" do
+  before(:each) do
+    # clear our namespaces
+    %w( Simple Featureful Foo Packed TehUnknown TehUnknown2 TehUnknown3 Enums A C Services).each do |klass|
+      Object.send(:remove_const, klass.to_sym) if Object.const_defined?(klass.to_sym)
+    end
+
+    # load test protos
+    %w( simple featureful packed enums no_package services).each do |proto|
+      load File.join(File.dirname(__FILE__), "proto_files", "#{proto}.pb.rb")
+    end
+  end
+
+  it "correctly handles value_for_tag? when fields are set in the constructor" do
+    a = Featureful::A.new(
+      :i2 => 1,
+      :sub2 => Featureful::A::Sub.new(
+        :payload => "test_payload"
+      )
+    )
+
+    a.value_for_tag?(1).should == true
+    a.value_for_tag?(5).should == true
+  end
+
+  it "correctly handles value_for_tag? when a MessageField is set to the same object in two locations within the same proto and set in the constructor" do
+    d = Featureful::D.new(
+      :f => [1, 2, 3].map do |num|
+        Featureful::F.new(
+          :s => "#{num}"
+        )
+      end
+    )
+    c = Featureful::C.new(
+      :d => d,
+      :e => [1].map do |num|
+        Featureful::E.new(
+          :d => d
+        )
+      end
+    )
+
+    c.value_for_tag?(1).should == true
+  end
+
+  it "correctly handles value_for_tag? when a Messagefield is set to the same object in two locations within the same proto and set outside of the constructor" do
+    d = Featureful::D.new
+    d.f = [1, 2, 3].map do |num|
+      Featureful::F.new(
+        :s => "#{num}"
+      )
+    end
+    c = Featureful::C.new
+    c.d = d
+    c.e = [1].map do |num|
+      Featureful::E.new(
+        :d => d
+      )
+    end
+
+    c.value_for_tag?(1).should == true
+  end
+
+  it "correctly handles value_for_tag? when a field is accessed and then modified and this field is a MessageField with only a repeated field accessed" do
+    c = Featureful::C.new
+    c_d = c.d
+    c_d.f = [1, 2, 3].map do |num|
+      Featureful::F.new(
+        :s => "#{num}"
+      )
+    end
+    d = Featureful::D.new
+    d.f = [1, 2, 3].map do |num|
+      Featureful::F.new(
+        :s => "#{num}"
+      )
+    end
+    c.e = [1].map do |num|
+      Featureful::E.new(
+        :d => d
+      )
+    end
+
+    c.value_for_tag?(1).should == true
+  end
+
+  it "correctly handles value_for_tag? when a field is accessed and then modified and this field is a MessageField with a repeated and optional field accessed" do
+    c = Featureful::C.new
+    c_d = c.d
+    c_d.f = [1, 2, 3].map do |num|
+      Featureful::F.new(
+        :s => "#{num}"
+      )
+    end
+    d = Featureful::D.new
+    d.f = [1, 2, 3].map do |num|
+      Featureful::F.new(
+        :s => "#{num}"
+      )
+    end
+    d.f2 = Featureful::F.new(
+      :s => "4"
+    )
+    c.e = [1].map do |num|
+      Featureful::E.new(
+        :d => d
+      )
+    end
+
+    c.value_for_tag?(1).should == true
+  end
+
+  it "correctly handles get" do
+    f = Featureful::A.new
+    f.i3 = 4
+    f.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+
+    f.get(:sub3, :subsub1, :subsub_payload).should == "sub3subsubpayload"
+    f.get(:i3).should == 4
+    f.get(:i2).should == nil
+    f.get(:sub2).should == nil
+  end
+
+  it "correctly handles get!" do
+    f = Featureful::A.new
+    f.i3 = 4
+    f.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+
+    f.get!(:sub3, :subsub1, :subsub_payload).should == "sub3subsubpayload"
+    f.get!(:i3).should == 4
+    proc { f.get!(:i2) }.should raise_error(ArgumentError)
+    proc { f.get!(:sub2) }.should raise_error(ArgumentError)
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/negative_int32_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/negative_int32_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/negative_int32_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/negative_int32_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,33 @@
+# Tests for issues with decoding negative int32 fields
+
+# By Mark Herman <mherman@iseatz.com> based on code from
+# Tom Zetty <tzetty@iseatz.com>
+
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers'
+
+describe "Testing for decode errors for negative int32 fields" do
+  # These should fail without the int32 negative handling fix
+  it "should return -1 given -1" do
+    (validate_pbr(SignedIntTest, -1, true)).should be true
+  end
+
+  it "should return -1111 given -1111" do
+    (validate_pbr(SignedIntTest, -1111, true)).should be true
+  end
+
+  # These should pass with or without the negative handling fix
+  it "should return 1 given 1" do
+    (validate_pbr(SignedIntTest, 1, true)).should be true
+  end
+
+  it "should return 0 given 0" do
+    (validate_pbr(SignedIntTest, 0, true)).should be true
+  end
+
+  it "should return 100000 given 100000" do
+    (validate_pbr(SignedIntTest, 100000, true)).should be true
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/nil_bugs_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/nil_bugs_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/nil_bugs_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/nil_bugs_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,24 @@
+# Tests for issues with handling of nil fields in protobuffers
+
+# By Mark Herman <mherman@iseatz.com>
+
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers'
+
+# Without the nil fix, assigning nil to a field would cause the encoder to
+# start failing to encode fields.
+describe "testing handling of nil assignments to protobuffers" do
+  it "should accept nil assignments into a single field without losing other data" do
+    # I will assign nil a couple of times and then test whether the protobuffer encodes at all
+    test_pb = NilTest.new
+    test_pb.test_field_1 = "test_value_1"
+    test_pb.test_field_2 = "test_value_2"
+
+    test_pb.test_field_1 = nil
+    test_pb.test_field_1 = nil
+
+    (test_pb.to_s.length > 0).should be true
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/depends.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/depends.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/depends.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/depends.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,8 @@
+package depends;
+
+import "simple.proto";
+import "nested/child.proto";
+
+message Depends {
+  optional nested.child.Child child_field = 1;
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/dotted_package.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/dotted_package.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/dotted_package.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/dotted_package.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,9 @@
+package polka.dot.bikini;
+
+message Test1 {
+  optional string test_field = 1;
+
+  message Test1Child {
+    optional string test_child_field = 1;
+  }
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,61 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Enums
+  # forward declarations
+  class FooMessage < ::ProtocolBuffers::Message; end
+
+  # enums
+  module FooEnum
+    include ::ProtocolBuffers::Enum
+
+    set_fully_qualified_name "enums.FooEnum"
+
+    ONE = 1
+    TWO = 2
+    THREE = 3
+  end
+
+  module BarEnum
+    include ::ProtocolBuffers::Enum
+
+    # purposefully removing qualified name to make sure that nothing breaks
+    #set_fully_qualified_name "enums.BarEnum"
+
+    FOUR = 4
+    FIVE = 5
+    SIX = 6
+  end
+
+  class FooMessage < ::ProtocolBuffers::Message
+    # forward declarations
+
+    # enums
+    module NestedFooEnum
+      include ::ProtocolBuffers::Enum
+
+      set_fully_qualified_name "enums.FooMessage.NestedFooEnum"
+
+      SEVEN = 7
+      EIGHT = 8
+    end
+
+    module NestedBarEnum
+      include ::ProtocolBuffers::Enum
+
+      # purposefully removing qualified name to make sure that nothing breaks
+      #set_fully_qualified_name "enums.FooMessage.NestedBarEnum"
+
+      NINE = 9
+      TEN = 10
+    end
+
+    set_fully_qualified_name "enums.FooMessage"
+
+    optional ::Enums::FooMessage::NestedFooEnum, :nested_foo_enum, 1
+    optional ::Enums::FooMessage::NestedBarEnum, :nested_bar_enum, 2
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/enums.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,26 @@
+package enums;
+
+enum FooEnum {
+  ONE = 1;
+  TWO = 2;
+  THREE = 3;
+}
+
+enum BarEnum {
+  FOUR = 4;
+  FIVE = 5;
+  SIX = 6;
+}
+
+message FooMessage {
+  enum NestedFooEnum {
+    SEVEN = 7;
+    EIGHT = 8;
+  }
+  enum NestedBarEnum {
+    NINE = 9;
+    TEN = 10;
+  }
+  optional NestedFooEnum nested_foo_enum = 1;
+  optional NestedBarEnum nested_bar_enum = 2;
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,179 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Featureful
+  # forward declarations
+  class A < ::ProtocolBuffers::Message; end
+  class B < ::ProtocolBuffers::Message; end
+  class ABitOfEverything < ::ProtocolBuffers::Message; end
+  class C < ::ProtocolBuffers::Message; end
+  class D < ::ProtocolBuffers::Message; end
+  class E < ::ProtocolBuffers::Message; end
+  class F < ::ProtocolBuffers::Message; end
+
+  # enums
+  module MainPayloads
+    include ::ProtocolBuffers::Enum
+
+    set_fully_qualified_name "featureful.MainPayloads"
+
+    P1 = 2
+    P2 = 3
+    P3 = 4
+  end
+
+  class A < ::ProtocolBuffers::Message
+    # forward declarations
+    class Sub < ::ProtocolBuffers::Message; end
+    class Group1 < ::ProtocolBuffers::Message; end
+    class Group2 < ::ProtocolBuffers::Message; end
+    class Group3 < ::ProtocolBuffers::Message; end
+
+    set_fully_qualified_name "featureful.A"
+
+    # nested messages
+    class Sub < ::ProtocolBuffers::Message
+      # forward declarations
+      class SubSub < ::ProtocolBuffers::Message; end
+
+      # enums
+      module Payloads
+        include ::ProtocolBuffers::Enum
+
+        set_fully_qualified_name "featureful.A.Sub.Payloads"
+
+        P1 = 0
+        P2 = 1
+      end
+
+      set_fully_qualified_name "featureful.A.Sub"
+
+      # nested messages
+      class SubSub < ::ProtocolBuffers::Message
+        set_fully_qualified_name "featureful.A.Sub.SubSub"
+
+        optional :string, :subsub_payload, 1
+      end
+
+      optional :string, :payload, 1
+      required ::Featureful::A::Sub::Payloads, :payload_type, 2, :default => ::Featureful::A::Sub::Payloads::P1
+      optional ::Featureful::A::Sub::SubSub, :subsub1, 3
+    end
+
+    class Group1 < ::ProtocolBuffers::Message
+      # forward declarations
+      class Subgroup < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "featureful.A.Group1"
+
+      # nested messages
+      class Subgroup < ::ProtocolBuffers::Message
+        set_fully_qualified_name "featureful.A.Group1.Subgroup"
+
+        required :int32, :i1, 1
+      end
+
+      required :int32, :i1, 1
+      repeated ::Featureful::A::Group1::Subgroup, :subgroup, 2, :group => true
+    end
+
+    class Group2 < ::ProtocolBuffers::Message
+      # forward declarations
+      class Subgroup < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "featureful.A.Group2"
+
+      # nested messages
+      class Subgroup < ::ProtocolBuffers::Message
+        set_fully_qualified_name "featureful.A.Group2.Subgroup"
+
+        required :int32, :i1, 1
+      end
+
+      required :int32, :i1, 1
+      repeated ::Featureful::A::Group2::Subgroup, :subgroup, 2, :group => true
+    end
+
+    class Group3 < ::ProtocolBuffers::Message
+      # forward declarations
+      class Subgroup < ::ProtocolBuffers::Message; end
+
+      set_fully_qualified_name "featureful.A.Group3"
+
+      # nested messages
+      class Subgroup < ::ProtocolBuffers::Message
+        set_fully_qualified_name "featureful.A.Group3.Subgroup"
+
+        required :int32, :i1, 1
+      end
+
+      required :int32, :i1, 1
+      repeated ::Featureful::A::Group3::Subgroup, :subgroup, 2, :group => true
+    end
+
+    repeated :int32, :i1, 1
+    optional :int32, :i2, 2
+    required :int32, :i3, 3
+    repeated ::Featureful::A::Sub, :sub1, 4
+    optional ::Featureful::A::Sub, :sub2, 5
+    required ::Featureful::A::Sub, :sub3, 6
+    repeated ::Featureful::A::Group1, :group1, 7, :group => true
+    optional ::Featureful::A::Group2, :group2, 8, :group => true
+    required ::Featureful::A::Group3, :group3, 9, :group => true
+  end
+
+  class B < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.B"
+
+    repeated ::Featureful::A, :a, 1
+  end
+
+  class ABitOfEverything < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.ABitOfEverything"
+
+    optional :double, :double_field, 1
+    optional :float, :float_field, 2
+    optional :int32, :int32_field, 3
+    optional :int64, :int64_field, 4, :default => 15
+    optional :uint32, :uint32_field, 5
+    optional :uint64, :uint64_field, 6
+    optional :sint32, :sint32_field, 7
+    optional :sint64, :sint64_field, 8
+    optional :fixed32, :fixed32_field, 9
+    optional :fixed64, :fixed64_field, 10
+    optional :sfixed32, :sfixed32_field, 11
+    optional :sfixed64, :sfixed64_field, 12
+    optional :bool, :bool_field, 13, :default => false
+    optional :string, :string_field, 14, :default => "zomgkittenz"
+    optional :bytes, :bytes_field, 15
+  end
+
+  class C < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.C"
+
+    optional ::Featureful::D, :d, 1
+    repeated ::Featureful::E, :e, 2
+  end
+
+  class D < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.D"
+
+    repeated ::Featureful::F, :f, 1
+    optional ::Featureful::F, :f2, 2
+  end
+
+  class E < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.E"
+
+    optional ::Featureful::D, :d, 1
+  end
+
+  class F < ::ProtocolBuffers::Message
+    set_fully_qualified_name "featureful.F"
+
+    optional :string, :s, 1
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/featureful.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,93 @@
+package featureful;
+
+option optimize_for = LITE_RUNTIME;
+
+message A {
+  message Sub {
+    enum Payloads {
+      P1 = 0;
+      P2 = 1;
+    };
+
+    optional string payload = 1;
+    required Payloads payload_type = 2 [default = P1];
+
+    message SubSub {
+      optional string subsub_payload = 1;
+    };
+    optional SubSub subsub1 = 3;
+  };
+
+  repeated int32 i1 = 1;
+  optional int32 i2 = 2;
+  required int32 i3 = 3;
+
+  repeated Sub sub1 = 4;
+  optional Sub sub2 = 5;
+  required Sub sub3 = 6;
+
+  repeated group Group1 = 7 {
+    required int32 i1 = 1;
+    repeated group Subgroup = 2 {
+      required int32 i1 = 1;
+    }
+  }
+  optional group Group2 = 8 {
+    required int32 i1 = 1;
+    repeated group Subgroup = 2 {
+      required int32 i1 = 1;
+    }
+  }
+  required group Group3 = 9 {
+    required int32 i1 = 1;
+    repeated group Subgroup = 2 {
+      required int32 i1 = 1;
+    }
+  }
+};
+
+message B {
+  repeated A a = 1;
+};
+
+enum MainPayloads {
+  P1 = 2;
+  P2 = 3;
+  P3 = 4;
+};
+
+message ABitOfEverything {
+  optional double double_field = 1;
+  optional float float_field = 2;
+  optional int32 int32_field = 3;
+  optional int64 int64_field = 4 [default = 15];
+  optional uint32 uint32_field = 5;
+  optional uint64 uint64_field = 6;
+  optional sint32 sint32_field = 7;
+  optional sint64 sint64_field = 8;
+  optional fixed32 fixed32_field = 9;
+  optional fixed64 fixed64_field = 10;
+  optional sfixed32 sfixed32_field = 11;
+  optional sfixed64 sfixed64_field = 12;
+  optional bool bool_field = 13 [default = false];
+  optional string string_field = 14 [default = "zomgkittenz"];
+  optional bytes bytes_field = 15;
+};
+
+message C {
+  optional D d = 1;
+  repeated E e = 2;
+}
+
+message D {
+  repeated F f = 1;
+  optional F f2 = 2;
+}
+
+message E {
+  optional D d = 1;
+}
+
+message F {
+  optional string s = 1;
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/nested/child.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/nested/child.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/nested/child.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/nested/child.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,5 @@
+package nested.child;
+
+message Child {
+  optional string test_field = 1;
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,31 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+# forward declarations
+class A < ::ProtocolBuffers::Message; end
+class C < ::ProtocolBuffers::Message; end
+
+class A < ::ProtocolBuffers::Message
+  # forward declarations
+  class B < ::ProtocolBuffers::Message; end
+
+  set_fully_qualified_name "A"
+
+  # nested messages
+  class B < ::ProtocolBuffers::Message
+    set_fully_qualified_name "A.B"
+
+  end
+
+  optional ::A::B, :b, 1
+end
+
+class C < ::ProtocolBuffers::Message
+  # purposefully removing qualified name to make sure that nothing breaks
+  #set_fully_qualified_name "C"
+
+  optional ::A::B, :b, 1
+end
+
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/no_package.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,10 @@
+message A {
+  message B {
+  };
+
+  optional B b = 1;
+};
+
+message C {
+  optional A.B b = 1;
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,37 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Packed
+  # forward declarations
+  class Test < ::ProtocolBuffers::Message; end
+
+  class Test < ::ProtocolBuffers::Message
+    # forward declarations
+
+    # enums
+    module N
+      include ::ProtocolBuffers::Enum
+      A = 1
+      B = 2
+      C = 3
+    end
+
+    repeated :int32, :a, 4, :packed => true
+    repeated :int64, :b, 5, :packed => true
+    repeated :uint32, :c, 6, :packed => true
+    repeated :uint64, :d, 7, :packed => true
+    repeated :sint32, :e, 8, :packed => true
+    repeated :sint64, :f, 9, :packed => true
+    repeated :fixed64, :g, 10, :packed => true
+    repeated :sfixed64, :h, 11, :packed => true
+    repeated :double, :i, 12, :packed => true
+    repeated :fixed32, :j, 13, :packed => true
+    repeated :sfixed32, :k, 14, :packed => true
+    repeated :float, :l, 15, :packed => true
+    repeated :bool, :m, 16, :packed => true
+    repeated ::Packed::Test::N, :n, 17, :packed => true
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/packed.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,30 @@
+package packed;
+
+message Test {
+  repeated int32    a = 4  [packed=true];
+  repeated int64    b = 5  [packed=true];
+
+  repeated uint32   c = 6  [packed=true];
+  repeated uint64   d = 7  [packed=true];
+
+  repeated sint32   e = 8  [packed=true];
+  repeated sint64   f = 9  [packed=true];
+
+  repeated fixed64  g = 10 [packed=true];
+  repeated sfixed64 h = 11 [packed=true];
+  repeated double   i = 12 [packed=true];
+
+  repeated fixed32  j = 13 [packed=true];
+  repeated sfixed32 k = 14 [packed=true];
+  repeated float    l = 15 [packed=true];
+
+  repeated bool     m = 16 [packed=true];
+
+  enum N {
+    A = 1;
+    B = 2;
+    C = 3;
+  }
+  repeated N        n = 17 [packed=true];
+
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,50 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Services
+  # forward declarations
+  class FooRequest < ::ProtocolBuffers::Message; end
+  class FooResponse < ::ProtocolBuffers::Message; end
+  class BarRequest < ::ProtocolBuffers::Message; end
+  class BarResponse < ::ProtocolBuffers::Message; end
+
+  class FooRequest < ::ProtocolBuffers::Message
+    set_fully_qualified_name "services.FooRequest"
+
+    optional :sint64, :one, 1
+  end
+
+  class FooResponse < ::ProtocolBuffers::Message
+    set_fully_qualified_name "services.FooResponse"
+
+    optional :uint64, :two, 1
+  end
+
+  class BarRequest < ::ProtocolBuffers::Message
+    set_fully_qualified_name "services.BarRequest"
+
+    optional :string, :three, 1
+  end
+
+  class BarResponse < ::ProtocolBuffers::Message
+    set_fully_qualified_name "services.BarResponse"
+
+    optional :bytes, :four, 1
+  end
+
+  class FooBarService < ::ProtocolBuffers::Service
+    set_fully_qualified_name "services.FooBarService"
+
+    rpc :get_foo, "GetFoo", ::Services::FooRequest, ::Services::FooResponse
+    rpc :get_bar, "GetBar", ::Services::BarRequest, ::Services::BarResponse
+  end
+  class NoNameFooBarService < ::ProtocolBuffers::Service
+    # purposefully removing qualified name to make sure that nothing breaks
+    #set_fully_qualified_name "services.NoNameFooBarService"
+
+    rpc :get_foo, "GetFoo", ::Services::FooRequest, ::Services::FooResponse
+    rpc :get_bar, "GetBar", ::Services::BarRequest, ::Services::BarResponse
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/services.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,27 @@
+package services;
+
+message FooRequest {
+  optional sint64 one = 1;
+}
+
+message FooResponse {
+  optional uint64 two = 1;
+}
+
+message BarRequest {
+  optional string three = 1;
+}
+
+message BarResponse {
+  optional bytes four = 1;
+}
+
+service FooBarService {
+  rpc GetFoo(FooRequest) returns (FooResponse);
+  rpc GetBar(BarRequest) returns (BarResponse);
+}
+
+service NoNameFooBarService {
+  rpc GetFoo(FooRequest) returns (FooResponse);
+  rpc GetBar(BarRequest) returns (BarResponse);
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.pb.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.pb.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.pb.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.pb.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,30 @@
+#!/usr/bin/env ruby
+# Generated by the protocol buffer compiler. DO NOT EDIT!
+
+require 'protocol_buffers'
+
+module Simple
+  # forward declarations
+  class Test1 < ::ProtocolBuffers::Message; end
+  class Foo < ::ProtocolBuffers::Message; end
+  class Bar < ::ProtocolBuffers::Message; end
+
+  class Test1 < ::ProtocolBuffers::Message
+    set_fully_qualified_name "simple.Test1"
+
+    optional :string, :test_field, 1
+  end
+
+  class Foo < ::ProtocolBuffers::Message
+    set_fully_qualified_name "simple.Foo"
+
+  end
+
+  class Bar < ::ProtocolBuffers::Message
+    # purposefully removing qualified name to make sure that nothing breaks
+    #set_fully_qualified_name "simple.Bar"
+
+    optional ::Simple::Foo, :foo, 1
+  end
+
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/simple.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,10 @@
+package simple;
+
+message Test1 {
+  optional string test_field = 1;
+};
+
+message Foo {}
+message Bar {
+  optional Foo foo = 1;
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/top_level_enum.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/top_level_enum.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/top_level_enum.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/top_level_enum.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,10 @@
+package foo;
+
+enum Bar {
+  A = 1;
+  B = 2;
+}
+
+message Baz {
+  optional Bar bar = 1;
+}
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/under_score_package.proto /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/under_score_package.proto
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/under_score_package.proto	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/proto_files/under_score_package.proto	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,11 @@
+package under_score;
+
+message UnderTest {
+  optional string test_field = 1;
+
+  message UnderTestChild {
+    optional string test_child_field = 1;
+  }
+
+  repeated UnderTest.UnderTestChild children = 2;
+};
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/runtime_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/runtime_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/runtime_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/runtime_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,969 @@
+# encoding: binary
+
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+require 'stringio'
+
+$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
+require 'protocol_buffers'
+require 'protocol_buffers/compiler'
+
+describe ProtocolBuffers, "runtime" do
+  before(:each) do
+    # clear our namespaces
+    %w( Simple Featureful Foo Packed TehUnknown TehUnknown2 TehUnknown3 Enums A C Services).each do |klass|
+      Object.send(:remove_const, klass.to_sym) if Object.const_defined?(klass.to_sym)
+    end
+
+    # load test protos
+    %w( simple featureful packed enums no_package services).each do |proto|
+      load File.join(File.dirname(__FILE__), "proto_files", "#{proto}.pb.rb")
+    end
+  end
+
+  context "packed field handling" do
+
+    before :each do
+      @packed = Packed::Test.new
+    end
+
+    it "does not encode empty field" do
+      @packed.a = [ ]
+      @packed.to_s.should == ""
+
+      ser = ProtocolBuffers.bin_sio(@packed.to_s)
+      unpacked = Packed::Test.parse(ser)
+      unpacked.a.should == [ ]
+    end
+
+    it "correctly encodes repeated field" do
+      # Example values from https://developers.google.com/protocol-buffers/docs/encoding.
+      @packed.a  = [ 3, 270 ]
+      @packed.a << 86942
+      @packed.to_s.should == "\x22\x06\x03\x8e\x02\x9e\xa7\x05"
+
+      ser = ProtocolBuffers.bin_sio(@packed.to_s)
+      unpacked = Packed::Test.parse(ser)
+      unpacked.a.should == [ 3, 270, 86942 ]
+    end
+
+    it "handles primitive numeric data types" do
+      types_to_be_packed = {
+        :int32    => { :field => :a, :value => [ 0, 1, 1 ] },
+        :int64    => { :field => :b, :value => [ 2, 3, 5 ] },
+
+        :uint32   => { :field => :c, :value => [ 8, 13, 21 ] },
+        :uint64   => { :field => :d, :value => [ 34, 55, 89 ] },
+
+        :sint32   => { :field => :e, :value => [ -114, 233, -377 ] },
+        :sint64   => { :field => :f, :value => [ 610, -987, 1597 ] },
+
+        :fixed64  => { :field => :g, :value => [ 2584, 4181, 6765 ] },
+        :sfixed64 => { :field => :h, :value => [ -10946, 17711, -28657 ] },
+        :double   => { :field => :i, :value => [ 46.368, -75025, 121.393 ] },
+
+        :fixed32  => { :field => :j, :value => [ 196418, 317811, 514229 ] },
+        :sfixed32 => { :field => :k, :value => [ -832040, 1346269, -2178309 ] },
+        :float    => { :field => :l, :value => [ 3524.578, -5702887, 92274.65 ] },
+
+        :bool     => { :field => :m, :value => [ false, false, true, false ] },
+        :enum     => { :field => :n, :value => [ Packed::Test::N::A, Packed::Test::N::B, Packed::Test::N::A, Packed::Test::N::C ] }
+      }
+
+      types_to_be_packed.values.each do |v|
+        @packed.send("#{v[:field]}=", v[:value])
+      end
+
+      ser = ProtocolBuffers.bin_sio(@packed.to_s)
+      unpacked = Packed::Test.parse(ser)
+
+      types_to_be_packed.each_pair do |k, v|
+        if [ :float, :double ].include? k
+          act = unpacked.send(v[:field]).map{|i| (i * 100).round}
+          exp = v[:value].map{|i| (i * 100).round}
+
+          act.should == exp
+        else
+          unpacked.send(v[:field]).should == v[:value]
+        end
+      end
+
+    end
+
+  end
+
+  it "can handle basic operations" do
+
+    msg1 = Simple::Test1.new
+    msg1.test_field.should == ""
+
+    msg1.test_field = "zomgkittenz"
+
+    ser = ProtocolBuffers.bin_sio(msg1.to_s)
+    msg2 = Simple::Test1.parse(ser)
+    msg2.test_field.should == "zomgkittenz"
+    msg2.should == msg1
+  end
+
+  it "correctly unsets fields" do
+    msg1 = Simple::Test1.new
+    msg1.has_test_field?.should == false
+    msg1.test_field.should == ""
+    msg1.to_s.should == ""
+
+    msg1.test_field = "zomgkittenz"
+    msg1.has_test_field?.should == true
+    msg1.test_field.should == "zomgkittenz"
+    msg1.to_s.should_not == ""
+
+    msg1.test_field = nil
+    msg1.has_test_field?.should == false
+    msg1.test_field.should == ""
+    msg1.to_s.should == ""
+  end
+
+  it "doesn't serialize unset fields" do
+    msg1 = Simple::Test1.new
+    msg1.has_test_field?.should == false
+    msg1.test_field.should == ""
+    msg1.to_s.should == ""
+
+    msg2 = Simple::Test1.parse(ProtocolBuffers.bin_sio(msg1.to_s))
+    msg2.has_test_field?.should == false
+    msg2.test_field.should == ""
+    msg2.to_s.should == ""
+
+    msg1 = Simple::Test1.new
+    msg1.has_test_field?.should == false
+    msg1.test_field.should == ""
+    msg1.to_s.should == ""
+
+    msg1.test_field = "zomgkittenz"
+    msg1.to_s.should_not == ""
+
+    msg1.test_field = nil
+
+    msg2 = Simple::Test1.parse(ProtocolBuffers.bin_sio(msg1.to_s))
+    msg2.has_test_field?.should == false
+    msg2.test_field.should == ""
+    msg2.to_s.should == ""
+  end
+
+  it "flags values that have been set" do
+    a1 = Featureful::A.new
+    a1.has_i2?.should == false
+    a1.i2 = 5
+    a1.has_i2?.should == true
+  end
+
+  it "flags sub-messages that have been set" do
+    a1 = Featureful::A.new
+    a1.value_for_tag?(a1.class.field_for_name(:sub1).tag).should == true
+    a1.value_for_tag?(a1.class.field_for_name(:sub2).tag).should == false
+    a1.value_for_tag?(a1.class.field_for_name(:sub3).tag).should == false
+
+    a1.has_sub1?.should == true
+    a1.has_sub2?.should == false
+    a1.has_sub3?.should == false
+
+    a1.sub2 = Featureful::A::Sub.new(:payload => "ohai")
+    a1.has_sub2?.should == true
+  end
+
+  it "flags group that have been set" do
+    a1 = Featureful::A.new
+    a1.value_for_tag?(a1.class.field_for_name(:group1).tag).should == true
+    a1.value_for_tag?(a1.class.field_for_name(:group2).tag).should == false
+    a1.value_for_tag?(a1.class.field_for_name(:group3).tag).should == false
+
+    a1.has_group1?.should == true
+    a1.has_group2?.should == false
+    a1.has_group3?.should == false
+
+    a1.group2 = Featureful::A::Group2.new(:i1 => 1)
+    a1.has_group2?.should == true
+  end
+
+  describe "#inspect" do
+    it "should leave out un-set fields" do
+      b1 = Simple::Bar.new
+      b1.inspect.should == "#<Simple::Bar foo=<unset>>"
+      b1.foo = Simple::Foo.new
+      b1.inspect.should == "#<Simple::Bar foo=#<Simple::Foo>>"
+    end
+  end
+
+  it "detects changes to a sub-message and flags it as set if it wasn't" do
+    a1 = Featureful::A.new
+    a1.has_sub2?.should == false
+    a1.sub2.payload = "ohai"
+    a1.has_sub2?.should == true
+
+    a1.has_group2?.should == false
+    a1.group2.i1 = 1
+    a1.has_sub2?.should == true
+  end
+
+  it "detects changes to a sub-sub-message and flags up the chain" do
+    a1 = Featureful::A.new
+    a1.sub2.has_subsub1?.should == false
+    a1.has_sub2?.should == false
+    a1.sub2.subsub1.subsub_payload = "ohai"
+    a1.has_sub2?.should == true
+    a1.sub2.has_subsub1?.should == true
+  end
+
+  it "allows directly recursive sub-messages" do
+    module Foo
+      class Foo < ProtocolBuffers::Message
+        optional :int32, :payload, 1
+        optional Foo, :foo, 2
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo.has_foo?.should == false
+    foo.foo.payload = 17
+    foo.has_foo?.should == true
+    foo.foo.has_foo?.should == false
+  end
+
+  it "allows indirectly recursive sub-messages" do
+    module Foo
+      class Bar < ProtocolBuffers::Message; end
+
+      class Foo < ProtocolBuffers::Message
+        optional :int32, :payload, 1
+        optional Bar, :bar, 2
+      end
+
+      class Bar
+        optional Foo, :foo, 1
+        optional :int32, :payload, 2
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo.has_bar?.should == false
+    foo.bar.payload = 17
+    foo.has_bar?.should == true
+    foo.bar.has_foo?.should == false
+    foo.bar.foo.payload = 23
+    foo.bar.has_foo?.should == true
+  end
+
+  it "pretends that repeated fields are arrays" do
+    # make sure our RepeatedField class acts like a normal Array
+    module Foo
+      class Foo < ProtocolBuffers::Message
+        repeated :int32, :nums, 1
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo2 = Foo::Foo.new(:nums => [1,2,3])
+    proc do
+      foo.nums << 1
+      foo.nums.class.should == ProtocolBuffers::RepeatedField
+      foo.nums.to_a.class.should == Array
+      (foo.nums & foo2.nums).should == [1]
+      (foo.nums + foo2.nums).should == [1,1,2,3]
+      foo2.nums.map! { |i| i + 1 }
+      foo2.nums.to_a.should == [2,3,4]
+      foo2.nums.class.should == ProtocolBuffers::RepeatedField
+    end.should_not raise_error
+  end
+
+  it "does type checking of repeated fields" do
+    a1 = Featureful::A.new
+    proc do
+      a1.sub1 << Featureful::A::Sub.new
+    end.should_not raise_error
+
+    a1 = Featureful::A.new
+    proc do
+      a1.sub1 << Featureful::A::Sub.new << "dummy string"
+    end.should raise_error(TypeError)
+    a1.sub1.should == [Featureful::A::Sub.new]
+
+    a1 = Featureful::A.new
+    proc do
+      a1.sub1 = [Featureful::A::Sub.new, Featureful::A::Sub.new, 5, Featureful::A::Sub.new]
+    end.should raise_error(TypeError)
+  end
+
+  it "does value checking of repeated fields" do
+    module Foo
+      class Foo < ProtocolBuffers::Message
+        repeated :int32, :nums, 1
+      end
+    end
+
+    foo = Foo::Foo.new
+    proc do
+      foo.nums << 5 << 3 << (1 << 32) # value too large for int32
+    end.should raise_error(ArgumentError)
+  end
+
+  # sort of redundant test, but let's check the example in the docs for
+  # correctness
+  it "handles singular message fields exactly as in the documentation" do
+    module Foo
+      class Bar < ProtocolBuffers::Message
+        optional :int32, :i, 1
+      end
+      class Foo < ProtocolBuffers::Message
+        optional Bar, :bar, 1
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo.has_bar?.should == false
+    foo.bar = Foo::Bar.new
+    foo.has_bar?.should == true
+
+    foo = Foo::Foo.new
+    foo.has_bar?.should == false
+    foo.bar.i = 1
+    foo.has_bar?.should == true
+
+    foo = Foo::Foo.new
+    foo.has_bar?.should == false
+    _local_i = foo.bar.i
+    foo.has_bar?.should == false
+  end
+
+  # another example from the docs
+  it "handles repeated field logic" do
+    module Foo
+      class Foo < ProtocolBuffers::Message
+        repeated :int32, :nums, 1
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo.has_nums?.should == true
+    foo.nums << 15
+    foo.has_nums?.should == true
+    foo.nums.push(32)
+    foo.nums.length.should == 2
+    foo.nums[0].should == 15
+    foo.nums[1].should == 32
+    foo.nums[1] = 56
+    foo.nums[1].should == 56
+
+    foo = Foo::Foo.new
+    foo.nums << 15
+    foo.nums.push(32)
+    foo.nums.length.should == 2
+    foo.nums.clear
+    foo.nums.length.should == 0
+    foo.nums << 15
+    foo.nums.length.should == 1
+    foo.nums = nil
+    foo.nums.length.should == 0
+
+    foo = Foo::Foo.new
+    foo.nums << 15
+    foo.nums = [1, 3, 5]
+    foo.nums.length.should == 3
+    foo.nums.to_a.should == [1,3,5]
+
+    foo.merge_from_string(foo.to_s)
+    foo.nums.length.should == 6
+    foo.nums.to_a.should == [1,3,5,1,3,5]
+  end
+
+  it "can assign any object with an each method to a repeated field" do
+    module Foo
+      class Bar < ProtocolBuffers::Message
+        optional :int32, :i, 1
+      end
+
+      class Foo < ProtocolBuffers::Message
+        repeated Bar, :nums, 1
+      end
+    end
+
+    class Blah
+      def each
+        yield Foo::Bar.new(:i => 1)
+        yield Foo::Bar.new(:i => 3)
+      end
+    end
+
+    foo = Foo::Foo.new
+    foo.nums = Blah.new
+    foo.nums.to_a.should == [Foo::Bar.new(:i => 1), Foo::Bar.new(:i => 3)]
+  end
+
+  it "shouldn't modify the default Message instance like this" do
+    a1 = Featureful::A.new
+    a1.sub2.payload = "ohai"
+    a2 = Featureful::A.new
+    a2.sub2.payload.should == ""
+    sub = Featureful::A::Sub.new
+    sub.payload.should == ""
+  end
+
+  it "responds to gen_methods! for backwards compat" do
+    Featureful::A.gen_methods!
+  end
+
+  def filled_in_bit
+    bit = Featureful::ABitOfEverything.new
+    bit.int64_field.should == 15
+    bit.bool_field.should == false
+    bit.string_field.should == "zomgkittenz"
+    bit.double_field = 1.0
+    bit.float_field = 2.0
+    bit.int32_field = 3
+    bit.int64_field = 4
+    bit.uint32_field = 5
+    bit.uint64_field = 6
+    bit.sint32_field = 7
+    bit.sint64_field = 8
+    bit.fixed32_field = 9
+    bit.fixed64_field = 10
+    bit.sfixed32_field = 11
+    bit.sfixed64_field = 12
+    bit.bool_field = true
+    bit.string_field = "14"
+    bit.bytes_field = "15"
+    bit
+  end
+
+  it "can serialize and de-serialize all basic field types" do
+    bit = filled_in_bit
+
+    bit2 = Featureful::ABitOfEverything.parse(bit.to_s)
+    bit.should == bit2
+    bit.fields.each do |tag, field|
+      bit.value_for_tag(tag).should == bit2.value_for_tag(tag)
+    end
+  end
+
+  it "does type checking" do
+    bit = filled_in_bit
+
+    proc do
+      bit.fixed32_field = 1.0
+    end.should raise_error(TypeError)
+
+    proc do
+      bit.double_field = 15
+    end.should_not raise_error()
+    bit2 = Featureful::ABitOfEverything.parse(bit.to_s)
+    bit2.double_field.should == 15
+    bit2.double_field.should == 15.0
+    bit2.double_field.is_a?(Float).should == true
+
+    proc do
+      bit.bool_field = 1.0
+    end.should raise_error(TypeError)
+
+    proc do
+      bit.string_field = 1.0
+    end.should raise_error(TypeError)
+
+    a1 = Featureful::A.new
+    proc do
+      a1.sub2 = "zomgkittenz"
+    end.should raise_error(TypeError)
+  end
+
+  it "doesn't allow invalid enum values" do
+    sub = Featureful::A::Sub.new
+
+    proc do
+      sub.payload_type.should == 0
+      sub.payload_type = Featureful::A::Sub::Payloads::P2
+      sub.payload_type.should == 1
+    end.should_not raise_error()
+
+    proc do
+      sub.payload_type = 2
+    end.should raise_error(ArgumentError)
+  end
+
+  it "enforces required fields on serialization" do
+    module TehUnknown
+      class MyResult < ProtocolBuffers::Message
+        required :string, :field_1, 1
+        optional :string, :field_2, 2
+      end
+    end
+
+    res1 = TehUnknown::MyResult.new(:field_2 => 'b')
+
+    proc { res1.to_s }.should raise_error(ProtocolBuffers::EncodeError)
+
+    begin
+      res1.to_s
+    rescue Exception => e
+      e.invalid_field.name.should == :field_1
+      e.invalid_field.tag.should == 1
+      e.invalid_field.otype.should == :required
+      e.invalid_field.default_value.should == ''
+    end
+
+  end
+
+  it "enforces required fields on deserialization" do
+    module TehUnknown
+      class MyResult < ProtocolBuffers::Message
+        optional :string, :field_1, 1
+        optional :string, :field_2, 2
+      end
+    end
+
+    res1 = TehUnknown::MyResult.new(:field_2 => 'b')
+    buf = res1.to_s
+
+    # now make field_1 required
+    module TehUnknown2
+      class MyResult < ProtocolBuffers::Message
+        required :string, :field_1, 1
+        optional :string, :field_2, 2
+      end
+    end
+
+    proc { TehUnknown2::MyResult.parse(buf) }.should raise_error(ProtocolBuffers::DecodeError)
+  end
+
+  it "enforces valid values on deserialization" do
+    module TehUnknown
+      class MyResult < ProtocolBuffers::Message
+        optional :int64, :field_1, 1
+      end
+    end
+
+    res1 = TehUnknown::MyResult.new(:field_1 => (2**33))
+    buf = res1.to_s
+
+    module TehUnknown2
+      class MyResult < ProtocolBuffers::Message
+        optional :int32, :field_1, 1
+      end
+    end
+
+    proc { TehUnknown2::MyResult.parse(buf) }.should raise_error(ProtocolBuffers::DecodeError)
+  end
+
+  it "ignores and passes on unknown fields" do
+    module TehUnknown
+      class MyResult < ProtocolBuffers::Message
+        optional :int32, :field_1, 1
+        optional :int32, :field_2, 2
+        optional :int32, :field_3, 3
+        optional :int32, :field_4, 4
+      end
+    end
+
+    res1 = TehUnknown::MyResult.new(:field_1 => 0xffff, :field_2 => 0xfffe,
+                                   :field_3 => 0xfffd, :field_4 => 0xfffc)
+    serialized = res1.to_s
+
+    # remove field_2 to pretend we never knew about it
+    module TehUnknown2
+      class MyResult < ProtocolBuffers::Message
+        optional :int32, :field_1, 1
+        optional :int32, :field_3, 3
+      end
+    end
+
+    res2 = nil
+    proc do
+      res2 = TehUnknown2::MyResult.parse(serialized)
+    end.should_not raise_error()
+
+    res2.field_1.should == 0xffff
+    res2.field_3.should == 0xfffd
+
+    proc do
+      res2.field_2.should == 0xfffe
+    end.should raise_error(NoMethodError)
+
+    serialized2 = res2.to_s
+
+    # now we know about field_2 again
+    module TehUnknown3
+      class MyResult < ProtocolBuffers::Message
+        optional :int32, :field_1, 1
+        optional :int32, :field_2, 2
+        optional :int32, :field_4, 4
+      end
+    end
+
+    res3 = TehUnknown3::MyResult.parse(serialized2)
+    res3.field_1.should == 0xffff
+
+    res3.field_2.should == 0xfffe
+    res3.field_4.should == 0xfffc
+  end
+
+  it "ignores and passes on unknown enum values" do
+    module TehUnknown
+      class MyResult < ProtocolBuffers::Message
+        module E
+          include ProtocolBuffers::Enum
+          V1 = 1
+          V2 = 2
+        end
+        optional E, :field_1, 1
+      end
+    end
+
+    res1 = TehUnknown::MyResult.new(:field_1 => TehUnknown::MyResult::E::V2)
+    serialized = res1.to_s
+
+    # remove field_2 to pretend we never knew about it
+    module TehUnknown2
+      class MyResult < ProtocolBuffers::Message
+        module E
+          include ProtocolBuffers::Enum
+          V1 = 1
+        end
+        optional E, :field_1, 1
+      end
+    end
+
+    res2 = nil
+    proc do
+      res2 = TehUnknown2::MyResult.parse(serialized)
+    end.should_not raise_error()
+
+    res2.value_for_tag?(1).should be false
+    res2.unknown_field_count.should == 1
+
+    serialized2 = res2.to_s
+
+    # now we know about field_2 again
+    module TehUnknown3
+      class MyResult < ProtocolBuffers::Message
+        module E
+          include ProtocolBuffers::Enum
+          V1 = 1
+          V2 = 2
+        end
+        optional E, :field_1, 1
+      end
+    end
+
+    res3 = TehUnknown3::MyResult.parse(serialized2)
+    res3.field_1.should == 2
+  end
+
+  describe "Message#valid?" do
+    it "should validate sub-messages" do
+      f = Featureful::A.new
+      f.i3 = 1
+      f.sub3 = Featureful::A::Sub.new
+      f.valid?.should == false
+      f.sub3.valid?.should == false
+      f.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+      f.valid?.should == false
+      f.group3.valid?.should == false
+      f.group3.i1 = 1
+      f.valid?.should == true
+      f.sub3.valid?.should == true
+    end
+  end
+
+  it "should work with IO streams not set to binary" do
+    pending("requires encoding support") unless "".respond_to?(:encoding)
+    class IntMsg < ProtocolBuffers::Message
+      required :int32, :i, 1
+    end
+    sio = StringIO.new("\b\xc3\x911")
+    sio.set_encoding('utf-8')
+    msg = IntMsg.parse(sio)
+    msg.i.should == 805059
+  end
+
+  it "handles if you set a repeated field to itself" do
+    f = Featureful::A.new
+    f.i1 = [1, 2, 3]
+    f.i1 = f.i1
+    f.i1.should =~ [1, 2, 3]
+  end
+
+  it "correctly converts to a hash" do
+    f = Featureful::A.new
+    f.i1 = [1, 2, 3]
+    f.i3 = 4
+    sub11 = Featureful::A::Sub.new
+    sub11.payload = "sub11payload"
+    sub11.payload_type = Featureful::A::Sub::Payloads::P1
+    sub11.subsub1.subsub_payload = "sub11subsubpayload"
+    sub12 = Featureful::A::Sub.new
+    sub12.payload = "sub12payload"
+    sub12.payload_type = Featureful::A::Sub::Payloads::P2
+    sub12.subsub1.subsub_payload = "sub12subsubpayload"
+    f.sub1 = [sub11, sub12]
+    f.sub3.payload = "sub3payload"
+    f.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    f.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+    f.group3.i1 = 1
+
+    f.valid?.should == true
+    f.to_hash.should == {
+      :i1 => [1, 2, 3],
+      :i3 => 4,
+      :sub1 => [
+        {
+          :payload => "sub11payload",
+          :payload_type => 0,
+          :subsub1 => {
+            :subsub_payload => "sub11subsubpayload"
+          }
+        },
+        {
+          :payload => "sub12payload",
+          :payload_type => 1,
+          :subsub1 => {
+            :subsub_payload => "sub12subsubpayload"
+          }
+        }
+      ],
+      :sub3 => {
+        :payload => "sub3payload",
+        :payload_type => 0,
+        :subsub1 => {
+          :subsub_payload => "sub3subsubpayload"
+        }
+      },
+      :group1 => [],
+      :group3 => {
+        :i1 => 1,
+        :subgroup => []
+      }
+    }
+
+  end
+
+  it "correctly handles ==, eql? and hash" do
+    f1 = Featureful::A.new
+    f1.i1 = [1, 2, 3]
+    f1.i3 = 4
+    sub111 = Featureful::A::Sub.new
+    sub111.payload = "sub11payload"
+    sub111.payload_type = Featureful::A::Sub::Payloads::P1
+    sub111.subsub1.subsub_payload = "sub11subsubpayload"
+    sub112 = Featureful::A::Sub.new
+    sub112.payload = "sub12payload"
+    sub112.payload_type = Featureful::A::Sub::Payloads::P2
+    sub112.subsub1.subsub_payload = "sub12subsubpayload"
+    f1.sub1 = [sub111, sub112]
+    f1.sub3.payload = ""
+    f1.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    f1.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+    f1.group3.i1 = 1
+
+    f2 = Featureful::A.new
+    f2.i1 = [1, 2, 3]
+    f2.i3 = 4
+    sub211 = Featureful::A::Sub.new
+    sub211.payload = "sub11payload"
+    sub211.payload_type = Featureful::A::Sub::Payloads::P1
+    sub211.subsub1.subsub_payload = "sub11subsubpayload"
+    sub212 = Featureful::A::Sub.new
+    sub212.payload = "sub12payload"
+    sub212.payload_type = Featureful::A::Sub::Payloads::P2
+    sub212.subsub1.subsub_payload = "sub12subsubpayload"
+    f2.sub1 = [sub211, sub212]
+    f2.sub3.payload = ""
+    f2.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    f2.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+    f2.group3.i1 = 1
+
+    # different because subsub1.sub_payload different
+    f3 = Featureful::A.new
+    f3.i1 = [1, 2, 3]
+    f3.i3 = 4
+    sub311 = Featureful::A::Sub.new
+    sub311.payload = "sub11payload"
+    sub311.payload_type = Featureful::A::Sub::Payloads::P1
+    sub311.subsub1.subsub_payload = "sub11subsubpayload"
+    sub312 = Featureful::A::Sub.new
+    sub312.payload = "sub12payload"
+    sub312.payload_type = Featureful::A::Sub::Payloads::P2
+    sub312.subsub1.subsub_payload = "sub12subsubpayload_DIFFERENT"
+    f3.sub1 = [sub311, sub312]
+    f3.sub3.payload = ""
+    f3.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    f3.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+    f3.group3.i1 = 1
+
+    # different because sub3.payload not set
+    f4 = Featureful::A.new
+    f4.i1 = [1, 2, 3]
+    f4.i3 = 4
+    sub411 = Featureful::A::Sub.new
+    sub411.payload = "sub11payload"
+    sub411.payload_type = Featureful::A::Sub::Payloads::P1
+    sub411.subsub1.subsub_payload = "sub11subsubpayload"
+    sub412 = Featureful::A::Sub.new
+    sub412.payload = "sub12payload"
+    sub412.payload_type = Featureful::A::Sub::Payloads::P2
+    sub412.subsub1.subsub_payload = "sub12subsubpayload"
+    f4.sub1 = [sub411, sub412]
+    f4.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    f4.sub3.subsub1.subsub_payload = "sub3subsubpayload"
+    f4.group3.i1 = 1
+
+    f1.should == f2
+    f1.should_not == f3
+    f1.should_not == f4
+    f2.should == f1
+    f2.should_not == f3
+    f2.should_not == f4
+    f3.should_not == f1
+    f3.should_not == f2
+    f3.should_not == f4
+
+    f1.eql?(f2).should == true
+    f1.eql?(f3).should_not == true
+    f1.eql?(f4).should_not == true
+    f2.eql?(f1).should == true
+    f2.eql?(f3).should_not == true
+    f2.eql?(f4).should_not == true
+    f3.eql?(f1).should_not == true
+    f3.eql?(f2).should_not == true
+    f3.eql?(f4).should_not == true
+
+    f1.hash.should == f2.hash
+    f1.hash.should_not == f3.hash
+    f1.hash.should_not == f4.hash
+    f2.hash.should == f1.hash
+    f2.hash.should_not == f3.hash
+    f2.hash.should_not == f4.hash
+    f3.hash.should_not == f1.hash
+    f3.hash.should_not == f2.hash
+    f3.hash.should_not == f4.hash
+  end
+
+  it "correctly handles fully qualified names on Messages" do
+    Simple::Test1.fully_qualified_name.should == "simple.Test1"
+    Simple::Foo.fully_qualified_name.should == "simple.Foo"
+    Simple::Bar.fully_qualified_name.should == nil
+  end
+
+  it "correctly handles fully qualified names on Messages with no package" do
+    A.fully_qualified_name.should == "A"
+    A::B.fully_qualified_name.should == "A.B"
+    C.fully_qualified_name.should == nil
+  end
+
+  it "has only Enum values as constants" do
+    Enums::FooEnum.constants.map(&:to_sym).should =~ [:ONE, :TWO, :THREE]
+    Enums::BarEnum.constants.map(&:to_sym).should =~ [:FOUR, :FIVE, :SIX]
+    Enums::FooMessage::NestedFooEnum.constants.map(&:to_sym).should =~ [:SEVEN, :EIGHT]
+    Enums::FooMessage::NestedBarEnum.constants.map(&:to_sym).should =~ [:NINE, :TEN]
+  end
+
+  it "correctly populates the maps between name and values for Enums" do
+    Enums::FooEnum.value_to_names_map.should == {
+      1 => [:ONE],
+      2 => [:TWO],
+      3 => [:THREE]
+    }
+    Enums::BarEnum.value_to_names_map.should == {
+      4 => [:FOUR],
+      5 => [:FIVE],
+      6 => [:SIX]
+    }
+    Enums::FooEnum.name_to_value_map.should == {
+      :ONE => 1,
+      :TWO => 2,
+      :THREE => 3
+    }
+    Enums::BarEnum.name_to_value_map.should == {
+      :FOUR => 4,
+      :FIVE => 5,
+      :SIX => 6
+    }
+    Enums::FooMessage::NestedFooEnum.value_to_names_map.should == {
+      7 => [:SEVEN],
+      8 => [:EIGHT],
+    }
+    Enums::FooMessage::NestedBarEnum.value_to_names_map.should == {
+      9 => [:NINE],
+      10 => [:TEN],
+    }
+    Enums::FooMessage::NestedFooEnum.name_to_value_map.should == {
+      :SEVEN => 7,
+      :EIGHT => 8,
+    }
+    Enums::FooMessage::NestedBarEnum.name_to_value_map.should == {
+      :NINE => 9,
+      :TEN => 10,
+    }
+  end
+
+  it "correctly handles fully qualified names on Enums" do
+    Enums::FooEnum.fully_qualified_name.should == "enums.FooEnum"
+    Enums::BarEnum.fully_qualified_name.should == nil
+    Enums::FooMessage::NestedFooEnum.fully_qualified_name.should == "enums.FooMessage.NestedFooEnum"
+    Enums::FooMessage::NestedBarEnum.fully_qualified_name.should == nil
+  end
+
+  it "correctly handles service definitions" do
+    get_foo_rpc, get_bar_rpc = get_rpcs
+
+    get_foo_rpc.name.should == :get_foo
+    get_foo_rpc.proto_name.should == "GetFoo"
+    get_foo_rpc.request_class.should == Services::FooRequest
+    get_foo_rpc.response_class.should == Services::FooResponse
+    get_foo_rpc.service_class.should == Services::FooBarService
+
+    get_bar_rpc.name.should == :get_bar
+    get_bar_rpc.proto_name.should == "GetBar"
+    get_bar_rpc.request_class.should == Services::BarRequest
+    get_bar_rpc.response_class.should == Services::BarResponse
+    get_bar_rpc.service_class.should == Services::FooBarService
+  end
+
+  it "correctly handles == for Rpcs" do
+    get_foo_rpc, get_bar_rpc = get_rpcs
+
+    get_foo_rpc.should == get_foo_rpc
+    get_bar_rpc.should == get_bar_rpc
+    get_foo_rpc.should_not == get_bar_rpc
+  end
+
+  it "correctly freezes rpcs" do
+    get_foo_rpc, get_bar_rpc = get_rpcs
+
+    get_foo_rpc.frozen?.should == true
+    get_bar_rpc.frozen?.should == true
+    get_foo_rpc.proto_name.frozen?.should == true
+    get_bar_rpc.proto_name.frozen?.should == true
+
+    # make sure to_s is still possible when frozen
+    get_foo_rpc.to_s
+    get_bar_rpc.to_s
+
+    Services::FooBarService.rpcs.frozen?.should == true
+  end
+
+  it "correctly handles fully qualified names on Services" do
+    Services::FooBarService.fully_qualified_name.should == "services.FooBarService"
+    Services::NoNameFooBarService.fully_qualified_name.should == nil
+  end
+
+  def get_rpcs
+    Services::FooBarService.rpcs.size.should == 2
+    first_rpc = Services::FooBarService.rpcs[0]
+    second_rpc = Services::FooBarService.rpcs[1]
+    case first_rpc.name
+    when :get_foo
+      second_rpc.name.should == :get_bar
+      return first_rpc, second_rpc
+    when :get_bar
+      first_rpc.name.should == :get_bar
+      return second_rpc, first_rpc
+    else raise ArgumentError.new(first_rpc.name)
+    end
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec_helper.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec_helper.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec_helper.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec_helper.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,116 @@
+require 'rubygems'
+require 'rspec'
+
+require 'simplecov'
+SimpleCov.start
+
+require 'protocol_buffers'
+
+# These are a couple of classes used by tests
+class SignedIntTest < ::ProtocolBuffers::Message
+  required :int32, :test_member, 1
+  gen_methods! # new fields ignored after this point
+end
+
+class StringTest < ::ProtocolBuffers::Message
+  optional :string, :test_member, 1
+  gen_methods! # new fields ignored after this point
+end
+
+class NilTest < ::ProtocolBuffers::Message
+  optional :string, :test_field_1, 1
+  optional :string, :test_field_2, 2
+  gen_methods! # new fields ignored after this point
+end
+
+# klass should be derived from ::ProtocolBuffers::Message
+# and have a member named test_member
+# value is assigned to test member, then an encoding/parse cycle occurs
+# rescues are reported
+
+# suppress_output is meant for use in RSpec tests where output is not desired
+
+# This function returns true if value == decoded proto value
+def validate_pbr(klass, value, suppress_output = false)
+  unless suppress_output
+    puts
+    puts "Validate Pbr: class=#{klass.name}, value=#{value}"
+    puts "  creating and encoding"
+  end
+
+  encode_pbr = klass.new
+  encode_pbr.test_member = value
+  encoded_string = encode_pbr.to_s
+
+  unless suppress_output
+    puts "  encoded_string: #{to_hex_string encoded_string}"
+    puts "  encoded length: #{encoded_string.length}"
+    puts "  parsing encoded_string"
+  end
+
+  decode_pbr = nil;
+  begin
+    decode_pbr = klass.parse encoded_string
+  rescue Exception => e
+    # Exceptions always return false
+    unless suppress_output
+      puts e.message
+      puts "  FAIL: RESCUE occured in #{klass.name}.parse"
+    end
+    return false
+  end
+
+  if decode_pbr
+    unless suppress_output
+      puts "  decoded value: #{decode_pbr.test_member}"
+      puts "   passed value: #{value}"
+      puts "  decoded value <=> passed value = #{decode_pbr.test_member <=> value}"
+    end
+
+    if value.respond_to?("bytesize")
+      unless suppress_output
+        puts "  decoded value bytesize: #{decode_pbr.test_member.bytesize}"
+        puts "  passed value bytesize : #{value.bytesize}"
+        puts "  decoded value inspect : #{decode_pbr.test_member.inspect}"
+        puts "  passed value inspect  : #{value.inspect}"
+      end
+
+      # Ruby 1.8 Strings don't have encodings
+      if decode_pbr.test_member.respond_to?("encoding")
+        unless suppress_output
+          puts "  decoded value encoding: #{decode_pbr.test_member.encoding.name}"
+          puts "  passed value encoding : #{value.encoding.name}"
+        end
+      end
+    end
+
+    unless suppress_output
+      puts "  GOOD COMPARE" if decode_pbr.test_member == value
+    end
+
+    decode_pbr.test_member == value
+  end
+end
+
+def to_hex_string ss
+  yy = []
+  ss.each_byte { |b| yy << b.to_s(16) }
+  yy.join(' ')
+end
+
+def has_compiler?
+  ProtocolBuffers::Compiler.available?
+end
+
+RSpec.configure do |config|
+  config.backtrace_exclusion_patterns = []
+  config.after(:each) do
+    # clear our namespaces
+    Object.send(:remove_const, :Simple) if defined?(Simple)
+    Object.send(:remove_const, :Featureful) if defined?(Featureful)
+    Object.send(:remove_const, :Foo) if defined?(Foo)
+    Object.send(:remove_const, :TehUnknown) if defined?(TehUnknown)
+    Object.send(:remove_const, :TehUnknown2) if defined?(TehUnknown2)
+    Object.send(:remove_const, :TehUnknown3) if defined?(TehUnknown3)
+  end
+end
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec.opts /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec.opts
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec.opts	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/spec.opts	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1 @@
+--color
diff -uNr /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/text_format_spec.rb /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/text_format_spec.rb
--- /usr/patch/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/text_format_spec.rb	1970-01-01 08:00:00.000000000 +0800
+++ /usr/elk/logstash-5.5.0/vendor/bundle/jruby/1.9/gems/ruby-protocol-buffers-1.6.1/spec/text_format_spec.rb	2020-08-31 15:47:26.416000000 +0800
@@ -0,0 +1,679 @@
+# -*- coding: UTF-8 -*-
+require File.expand_path(File.dirname(__FILE__) + '/spec_helper')
+
+describe ProtocolBuffers::TextScanner do
+  def scanned_list(text)
+    s = ProtocolBuffers::TextScanner.new(text)
+    s.enum_for(:scan).to_a
+  end
+
+  it "returns [false, nil] on the end" do
+    expect(scanned_list("")).to eq [[false, nil]]
+  end
+
+  it "returns [:bool, true] for 'true'" do
+    expect(scanned_list("true")).to eq [[:bool, true], [false, nil]]
+  end
+
+  it "returns [:bool, false] for 'false'" do
+    expect(scanned_list("false")).to eq [[:bool, false], [false, nil]]
+  end
+
+  %w( . : [ ] < > { } ).each do |c|
+    it "returns a single character token for #{c}" do
+      expect(scanned_list(c)).to eq [[c, c], [false, nil]]
+    end
+  end
+
+  it 'returns [:string, str] for a simple single quoted text' do
+    expect(scanned_list(%q['str'])).to eq [[:string, 'str'], [false, nil]]
+  end
+
+  it 'returns [:string, str] for a simple doubl quoted text' do
+    expect(scanned_list(%q["str"])).to eq [[:string, 'str'], [false, nil]]
+  end
+
+  it 'raises Racc::ParseError on unterminated quotation' do
+    expect {
+      scanned_list(%q['str])
+    }.to raise_error(Racc::ParseError, /unterminated string from line 1/)
+
+    expect {
+      scanned_list(%Q['str '\n'str])
+    }.to raise_error(Racc::ParseError, /unterminated string from line 2/)
+
+    expect {
+      scanned_list(%Q['str" 'str'])
+    }.to raise_error(Racc::ParseError, /unterminated string from line 1/)
+  end
+
+  it 'raises Racc::ParseError on multiline string' do
+    expect {
+      scanned_list(%Q['str\n'])
+    }.to raise_error(Racc::ParseError, /unterminated string from line 1/)
+  end
+
+  it 'understands hex escaped string' do
+    expect(scanned_list(%q["\\x12"])).to eq [[:string, "\x12"], [false, nil]]
+    expect(scanned_list(%q["\\X12"])).to eq [[:string, "\x12"], [false, nil]]
+
+    expect(scanned_list(%q['\\x12'])).to eq [[:string, "\x12"], [false, nil]]
+
+    expect(scanned_list(%q['\\xfghijk'])).to eq [[:string, "\x0f" + "ghijk"], [false, nil]]
+  end
+
+  it 'understands octal escaped string' do
+    expect(scanned_list(%q["\\012"])).to eq [[:string, "\012"], [false, nil]]
+    expect(scanned_list(%q['\\12'])).to eq [[:string, "\012"], [false, nil]]
+
+    expect(scanned_list(%q['\\0'])).to eq [[:string, "\0"], [false, nil]]
+
+    expect(scanned_list(%q['\\0012'])).to eq [[:string, "\001" + "2"], [false, nil]]
+    expect(scanned_list(%q['\\6789'])).to eq [[:string, "\067" + "89"], [false, nil]]
+  end
+
+  it 'understands named escaped string' do
+    input = %q[
+      "
+      \\a
+      \\b
+      \\f
+      \\n
+      \\r
+      \\t
+      \\v
+      \\\\
+      \\"
+      \\'
+      "
+    ].gsub(/\s/, '')
+    expect(scanned_list(input)).to eq [
+      [:string, "\a\b\f\n\r\t\v\\\"'"],
+      [false, nil]
+    ]
+  end
+
+  it 'accepts quoted punctuations' do
+    expect(scanned_list(%q[".:[]<>{}"])).to eq [[:string, ".:[]<>{}"], [false, nil]]
+    expect(scanned_list(%q["'"])).to eq [[:string, "'"], [false, nil]]
+    expect(scanned_list(%q['"'])).to eq [[:string, '"'], [false, nil]]
+  end
+
+  it 'leaves uninterpretable escape as is' do
+    expect(scanned_list(%q["\\c"])).to eq [[:string, "\\c"], [false, nil]]
+    expect(scanned_list(%q["\\u0030"])).to eq [[:string, "\\u0030"], [false, nil]]
+  end
+
+  it 'returns [:integer, value] for binary integer literal' do
+    expect(scanned_list('0b0101')).to eq [[:integer, 0b0101], [false, nil]]
+    expect(scanned_list('0B0101')).to eq [[:integer, 0b0101], [false, nil]]
+    expect(scanned_list('+0B0101')).to eq [[:integer, +0b0101], [false, nil]]
+    expect(scanned_list('-0B0101')).to eq [[:integer, -0b0101], [false, nil]]
+  end
+
+  it 'returns [:integer, value] for octal integer literal' do
+    expect(scanned_list('0123')).to eq [[:integer, 0123], [false, nil]]
+    expect(scanned_list('0o123')).to eq [[:integer, 0123], [false, nil]]
+    expect(scanned_list('0O123')).to eq [[:integer, 0123], [false, nil]]
+    expect(scanned_list('+0123')).to eq [[:integer, 0123], [false, nil]]
+    expect(scanned_list('+0o123')).to eq [[:integer, 0123], [false, nil]]
+    expect(scanned_list('-0123')).to eq [[:integer, -0123], [false, nil]]
+    expect(scanned_list('-0o123')).to eq [[:integer, -0123], [false, nil]]
+  end
+
+  it 'returns [:integer, value] for decimal integer literal' do
+    expect(scanned_list('12345')).to eq [[:integer, 12345], [false, nil]]
+    expect(scanned_list('0d12345')).to eq [[:integer, 12345], [false, nil]]
+    expect(scanned_list('0D12345')).to eq [[:integer, 12345], [false, nil]]
+    expect(scanned_list('+12345')).to eq [[:integer, 12345], [false, nil]]
+    expect(scanned_list('+0d12345')).to eq [[:integer, 12345], [false, nil]]
+    expect(scanned_list('-12345')).to eq [[:integer, -12345], [false, nil]]
+    expect(scanned_list('-0d12345')).to eq [[:integer, -12345], [false, nil]]
+  end
+
+  it 'returns [:integer, value] for hex integer literal' do
+    expect(scanned_list('0xABC12')).to eq [[:integer, 0xABC12], [false, nil]]
+    expect(scanned_list('0XABC12')).to eq [[:integer, 0xABC12], [false, nil]]
+    expect(scanned_list('+0xABC12')).to eq [[:integer, 0xABC12], [false, nil]]
+    expect(scanned_list('-0xABC12')).to eq [[:integer, -0xABC12], [false, nil]]
+  end
+
+  it 'returns [:integer, 0] for "0"' do
+    expect(scanned_list('0')).to eq [[:integer, 0], [false, nil]]
+    expect(scanned_list('+0')).to eq [[:integer, 0], [false, nil]]
+    expect(scanned_list('-0')).to eq [[:integer, 0], [false, nil]]
+  end
+
+  it 'returns [:float, value] for decimal float literal' do
+    expect(scanned_list('0.123')).to eq [[:float, 0.123], [false, nil]]
+    expect(scanned_list('12.34')).to eq [[:float, 12.34], [false, nil]]
+    expect(scanned_list('+0.123')).to eq [[:float, 0.123], [false, nil]]
+    expect(scanned_list('+12.34')).to eq [[:float, 12.34], [false, nil]]
+    expect(scanned_list('-0.123')).to eq [[:float, -0.123], [false, nil]]
+    expect(scanned_list('-12.34')).to eq [[:float, -12.34], [false, nil]]
+    expect(scanned_list('0.0')).to eq [[:float, 0.0], [false, nil]]
+    expect(scanned_list('+0.0')).to eq [[:float, 0.0], [false, nil]]
+    expect(scanned_list('-0.0')).to eq [[:float, -0.0], [false, nil]]
+  end
+
+  it 'returns [:float, value] for scientific float literal' do
+    expect(scanned_list('1.1e5')).to eq [[:float, 1.1e5], [false, nil]]
+    expect(scanned_list('1.1E5')).to eq [[:float, 1.1e5], [false, nil]]
+    expect(scanned_list('1.1e+5')).to eq [[:float, 1.1e5], [false, nil]]
+    expect(scanned_list('1.1e-5')).to eq [[:float, 1.1e-5], [false, nil]]
+    expect(scanned_list('1.1e0')).to eq [[:float, 1.1], [false, nil]]
+    expect(scanned_list('1.1e+0')).to eq [[:float, 1.1], [false, nil]]
+    expect(scanned_list('1.1e-0')).to eq [[:float, 1.1], [false, nil]]
+  end
+
+  it 'returns [:identifier, str] for identifiers' do
+    %w! abc ab_c _abc abc_ ABC AB_C _ABC ABC_ Abc AbC aBc !.each do |name|
+      expect(scanned_list(name)).to eq [[:identifier, name], [false, nil]]
+    end
+  end
+
+  it 'ignores spaces between tokens' do
+    expect(scanned_list("abc\n: def . ghi jk :\t'l : m' n\r: 012")).to eq [
+      [:identifier, 'abc'],
+      [':', ':'],
+      [:identifier, 'def'],
+      ['.', '.'],
+      [:identifier, 'ghi'],
+      [:identifier, 'jk'],
+      [':', ':'],
+      [:string, 'l : m'],
+      [:identifier, 'n'],
+      [':', ':'],
+      [:integer, 012],
+      [false, nil]
+    ]
+  end
+
+  it 'splits tokens without spaces' do
+    expect(scanned_list("abc:def.ghi jk:'l : m'n:012")).to eq [
+      [:identifier, 'abc'],
+      [':', ':'],
+      [:identifier, 'def'],
+      ['.', '.'],
+      [:identifier, 'ghi'],
+      [:identifier, 'jk'],
+      [':', ':'],
+      [:string, 'l : m'],
+      [:identifier, 'n'],
+      [':', ':'],
+      [:integer, 012],
+      [false, nil]
+    ]
+  end
+
+  it 'ignores comments' do
+    expect(scanned_list("#")).to eq [[false, nil]]
+    expect(scanned_list("#\n")).to eq [[false, nil]]
+    expect(scanned_list("# abc\n")).to eq [[false, nil]]
+    expect(scanned_list("abc #\n")).to eq [[:identifier, 'abc'], [false, nil]]
+  end
+end
+
+describe ProtocolBuffers::TextParser do
+  before(:each) do
+    @parser = ProtocolBuffers::TextParser.new
+    load File.join(File.dirname(__FILE__), "proto_files", "simple.pb.rb")
+    load File.join(File.dirname(__FILE__), "proto_files", "featureful.pb.rb")
+  end
+
+  it 'returns parsed message' do
+    m = ::Simple::Foo.new
+    tokens = [[false, nil]]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+  end
+
+  it 'accepts simple field' do
+    m = ::Simple::Test1.new
+    tokens = [
+      [:identifier, 'test_field'],
+      [':', ':'],
+      [:string, 'str'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.test_field).to eq 'str'
+  end
+
+  it 'rejects unknown field name' do
+    m = ::Simple::Test1.new
+    tokens = [
+      [:identifier, 'no_such_field'],
+      [':', ':'],
+      [:string, 'str'],
+      [false, nil]
+    ]
+    expect {
+      @parser.parse_from_scanner(tokens, m)
+    }.to raise_error(Racc::ParseError, /no such field/)
+  end
+
+  it 'accepts nested field' do
+    m = ::Simple::Bar.new
+    tokens = [
+      [:identifier, 'foo'],
+      ['<', '<'],
+      ['>', '>'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m).to have_foo
+  end
+
+  it 'accepts nested field with colon' do
+    m = ::Simple::Bar.new
+    tokens = [
+      [:identifier, 'foo'],
+      [':', ':'],
+      ['<', '<'],
+      ['>', '>'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m).to have_foo
+  end
+
+
+  it 'accepts deeply nested field' do
+    m = ::Featureful::C.new
+    tokens = [
+      [:identifier, 'e'],
+      ['<', '<'],
+      [:identifier, 'd'],
+      ['<', '<'],
+      [:identifier, 'f'],
+      ['<', '<'],
+      [:identifier, 's'],
+      [':', ':'],
+      [:string, 'str'],
+      ['>', '>'],
+      ['>', '>'],
+      ['>', '>'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+
+    expect(m).not_to have_d
+    expect(m).to have(1).e
+
+    expect(m.e[0]).to have_d
+    expect(m.e[0].d).to have(1).f
+
+    expect(m.e[0].d.f[0]).to have_s
+    expect(m.e[0].d.f[0].s).to eq 'str'
+  end
+
+  it 'accepts group field' do
+    m = ::Featureful::A::Group1.new
+    tokens = [
+      [:identifier, 'i1'],
+      [':', ':'],
+      [:integer, 1],
+      [:identifier, 'Subgroup'],
+      ['{', '{'],
+      [:identifier, 'i1'],
+      [':', ':'],
+      [:integer, 1],
+      ['}', '}'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+
+    expect(m.i1).to eq(1)
+    expect(m).to have(1).subgroup
+    expect(m.subgroup[0].i1).to eq(1)
+  end
+
+  it 'accepts multiple values for repeated field' do
+    m = ::Featureful::D.new
+    tokens = [
+      [:identifier, 'f'],
+      ['<', '<'],
+      [:identifier, 's'],
+      [':', ':'],
+      [:string, 'str'],
+      ['>', '>'],
+      [:identifier, 'f'],
+      ['{', '{'],
+      [:identifier, 's'],
+      [':', ':'],
+      [:string, 'str2'],
+      ['}', '}'],
+      [:identifier, 'f'],
+      ['<', '<'],
+      ['>', '>'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+
+    expect(m).to have(3).f
+    expect(m.f[0]).to have_s
+    expect(m.f[0].s).to eq 'str'
+    expect(m.f[1]).to have_s
+    expect(m.f[1].s).to eq 'str2'
+    expect(m.f[2]).not_to have_s
+  end
+
+  it 'rejects unterminated field' do
+    m = ::Simple::Test1.new
+    tokens = [
+      [:identifier, 'test_field'],
+      [':', ':'],
+      [false, nil]
+    ]
+    expect {
+      @parser.parse_from_scanner(tokens, m)
+    }.to raise_error(Racc::ParseError)
+
+    m = ::Simple::Test1.new
+    tokens = [
+      [:identifier, 'test_field'],
+      [false, nil]
+    ]
+    expect {
+      @parser.parse_from_scanner(tokens, m)
+    }.to raise_error(Racc::ParseError)
+  end
+
+  it 'accepts string field' do
+    m = ::Featureful::ABitOfEverything.new
+    tokens = [
+      [:identifier, 'string_field'],
+      [':', ':'],
+      [:string, 'str'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.string_field).to eq 'str'
+    expect(m.string_field.encoding).to eq Encoding::UTF_8
+  end
+
+  it 'accepts bytes field' do
+    m = ::Featureful::ABitOfEverything.new
+    tokens = [
+      [:identifier, 'bytes_field'],
+      [':', ':'],
+      [:string, "bytes\x00\x01\x02\x03"],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.bytes_field).to eq "bytes\x00\x01\x02\x03"
+  end
+
+  it 'accepts float field' do
+    m = ::Featureful::ABitOfEverything.new
+    tokens = [
+      [:identifier, 'float_field'],
+      [':', ':'],
+      [:float, 1.1],
+      [:identifier, 'double_field'],
+      [':', ':'],
+      [:float, 1.1],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.float_field).to eq 1.1
+    expect(m.double_field).to eq 1.1
+  end
+
+  it 'accepts int field' do
+    m = ::Featureful::ABitOfEverything.new
+    tokens = [
+      [:identifier, 'int32_field'],
+      [':', ':'],
+      [:integer, 1],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.int32_field).to eq 1
+  end
+
+  it 'accepts bool field' do
+    m = ::Featureful::ABitOfEverything.new
+    tokens = [
+      [:identifier, 'bool_field'],
+      [':', ':'],
+      [:bool, true],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.bool_field).to be_true
+  end
+
+  it 'accepts integer as a enum field' do
+    m = ::Featureful::A::Sub.new
+    tokens = [
+      [:identifier, 'payload_type'],
+      [':', ':'],
+      [:integer, 1],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m).to have_payload_type
+    expect(m.payload_type).to eq ::Featureful::A::Sub::Payloads::P2
+  end
+
+  it 'accepts enum name as a enum field' do
+    m = ::Featureful::A::Sub.new
+    tokens = [
+      [:identifier, 'payload_type'],
+      [':', ':'],
+      [:identifier, 'P2'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m).to have_payload_type
+    expect(m.payload_type).to eq ::Featureful::A::Sub::Payloads::P2
+  end
+
+  it 'concatenates strings' do
+    m = ::Simple::Test1.new
+    tokens = [
+      [:identifier, 'test_field'],
+      [':', ':'],
+      [:string, 'str'],
+      [:string, 'another str'],
+      [false, nil]
+    ]
+    expect(@parser.parse_from_scanner(tokens, m)).to be_equal(m)
+    expect(m.test_field).to eq 'stranother str'
+  end
+
+  it 'rejects unknown field' do
+    # The text format for unknown field is designed only for displaying a
+    # message to human.
+    # Since wire_types in it are ambigous, we cannot parse the notation.
+    m = ::Simple::Test1.new
+    tokens = [
+      [:integer, 1],
+      [':', ':'],
+      [:string, 'str'],
+      [false, nil]
+    ]
+    expect {
+      @parser.parse_from_scanner(tokens, m)
+    }.to raise_error(Racc::ParseError)
+  end
+end
+
+describe ProtocolBuffers::TextFormatter do
+  def formatter(options = nil)
+    ProtocolBuffers::TextFormatter.new(options)
+  end
+
+  # Returns a dummy instance of Featureful::A
+  def dummy_a
+    m = Featureful::A.new
+    m.i1 = [1, 2, 3]
+    m.i3 = 4
+
+    subsub = Featureful::A::Sub::SubSub.new(:subsub_payload => "foo")
+    m.sub1 = [
+      Featureful::A::Sub.new(:payload => "bar",
+                             :payload_type => Featureful::A::Sub::Payloads::P1,
+                             :subsub1 => subsub),
+                             Featureful::A::Sub.new(:payload => "baz",
+                                                    :payload_type => Featureful::A::Sub::Payloads::P2),
+    ]
+    m.sub3.payload = "qux"
+    m.sub3.payload_type = Featureful::A::Sub::Payloads::P1
+    m.sub3.subsub1.subsub_payload = "quux"
+
+    sg = Featureful::A::Group1::Subgroup.new(:i1 => 1)
+    m.group1 = [
+      Featureful::A::Group1.new(:i1 => 1, :subgroup => [sg]),
+      Featureful::A::Group1.new(:i1 => 2),
+    ]
+    m.group3.i1 = 5
+    m.group3.subgroup << Featureful::A::Group3::Subgroup.new(:i1 => 1)
+
+    m
+  end
+
+  before(:each) do
+    @parser = ProtocolBuffers::TextParser.new
+    load File.join(File.dirname(__FILE__), "proto_files", "simple.pb.rb")
+    load File.join(File.dirname(__FILE__), "proto_files", "featureful.pb.rb")
+  end
+
+  it "formats integer field in decimal" do
+    m = Featureful::ABitOfEverything.new
+    m.int32_field = 123
+    expect(m.text_format_to_string).to eq "int32_field: 123\n"
+  end
+
+  it "formats float field in decimal" do
+    m = Featureful::ABitOfEverything.new
+    m.float_field = 0.123
+    expect(m.text_format_to_string).to eq "float_field: 0.123\n"
+  end
+
+  it "formats string field with quotation" do
+    m = Featureful::ABitOfEverything.new
+    m.string_field = "str"
+    expect(m.text_format_to_string).to eq "string_field: \"str\"\n"
+  end
+
+  it "escapes non ascii printable characters in string field" do
+    str = "\xe3\x81\x82\0\n"
+    str.force_encoding(Encoding::UTF_8) if str.respond_to?(:force_encoding)
+    m = Featureful::ABitOfEverything.new
+    m.string_field = str
+
+    formatted = m.text_format_to_string
+    expect(formatted).to match(/\Astring_field: "(.*?)"\n/)
+
+    escaped = formatted[/string_field: (".*?")/, 1]
+    expect(escaped).to match(/\A[[:ascii:]&&[:print:]]+\z/)
+    expect(eval(escaped)).to eq str
+  end
+
+  it "escapes bytes in bytes field" do
+    m = Featureful::ABitOfEverything.new
+    m.bytes_field = "bytes"
+    expect(m.text_format_to_string).to eq "bytes_field: \"\\x62\\x79\\x74\\x65\\x73\"\n"
+  end
+
+  it "formats message field with indent" do
+    m = Featureful::E.new
